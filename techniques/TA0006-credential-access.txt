{"technique_id":"T1003.001","technique_name":"OS Credential Dumping: LSASS Memory","description":"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct Lateral Movement using Use Alternate Authentication Material. As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system. For example, on the target host use procdump: * procdump -ma lsass.exe lsass_dump Locally, mimikatz can be run using: * sekurlsa::Minidump lsassdump.dmp * sekurlsa::logonPasswords Built-in Windows tools such as `comsvcs.dll` can also be used: * rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID lsass.dmp full Similar to Image File Execution Options Injection, the silent process exit mechanism can be abused to create a memory dump of `lsass.exe` through Windows Error Reporting (`WerFault.exe`). Windows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called. The following SSPs can be used to access credentials: * Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package. * Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges. * Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later. * CredSSP: Provides SSO and Network Level Authentication for Remote Desktop Services.","detection":"Monitor for unexpected processes interacting with LSASS.exe. Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity. On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process. Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.","procedures":["[G0119] Indrik Spider: Indrik Spider used Cobalt Strike to carry out credential dumping using ProcDump.","[C0014] Operation Wocao: During Operation Wocao, threat actors used ProcDump to dump credentials from memory.","[G0049] OilRig: OilRig has used credential dumping tools such as Mimikatz to steal credentials to accounts logged into the compromised system and to Outlook Web Access.","[G0003] Cleaver: Cleaver has been known to dump credentials using Mimikatz and Windows Credential Editor.","[G0077] Leafminer: Leafminer used several tools for retrieving login and password information, including LaZagne and Mimikatz.","[G0027] Threat Group-3390: Threat Group-3390 actors have used a modified version of Mimikatz called Wrapikatz to dump credentials. They have also dumped credentials from domain controllers.","[S0692] SILENTTRINITY: SILENTTRINITY can create a memory dump of LSASS via the `MiniDumpWriteDump Win32` API call.","[G0006] APT1: APT1 has been known to use credential dumping using Mimikatz.","[C0029] Cutting Edge: During Cutting Edge, threat actors used Task Manager to dump LSASS memory from Windows devices to disk.","[G0065] Leviathan: Leviathan has used publicly available tools to dump password hashes, including ProcDump and WCE.","[G0061] FIN8: FIN8 harvests credentials using Invoke-Mimikatz or Windows Credentials Editor (WCE).","[S0349] LaZagne: LaZagne can perform credential dumping from memory to obtain account and password information.","[G0125] HAFNIUM: HAFNIUM has used procdump to dump the LSASS process memory.","[G0108] Blue Mockingbird: Blue Mockingbird has used Mimikatz to retrieve credentials from LSASS memory.","[S0121] Lslsass: Lslsass can dump active logon session password hashes from the lsass process.","[S0681] Lizar: Lizar can run Mimikatz to harvest credentials.","[G1017] Volt Typhoon: Volt Typhoon has attempted to access hashed credentials from the LSASS process memory space.","[G0107] Whitefly: Whitefly has used Mimikatz to obtain credentials.","[G0064] APT33: APT33 has used a variety of publicly available tools like LaZagne, Mimikatz, and ProcDump to dump credentials.","[G1016] FIN13: FIN13 has obtained memory dumps with ProcDump to parse and extract credentials from a victim's LSASS process memory with Mimikatz.","[S0606] Bad Rabbit: Bad Rabbit has used Mimikatz to harvest credentials from the victim's machine.","[G0050] APT32: APT32 used Mimikatz and customized versions of Windows Credential Dumper to harvest credentials.","[G1030] Agrius: Agrius used tools such as Mimikatz to dump LSASS memory to capture credentials in victim environments.","[S0046] CozyCar: CozyCar has executed Mimikatz to harvest stored credentials from the victim and further victim penetration.","[S0357] Impacket: SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.","[G0093] GALLIUM: GALLIUM used a modified version of Mimikatz along with a PowerShell-based Mimikatz to dump credentials on the victim machines.","[S0368] NotPetya: NotPetya contains a modified version of Mimikatz to help gather credentials that are later used for lateral movement.","[S0192] Pupy: Pupy can execute Lazagne as well as Mimikatz using PowerShell.","[G1023] APT5: APT5 has used the Task Manager process to target LSASS process memory in order to obtain NTLM password hashes. APT5 has also dumped clear text passwords and hashes from memory using Mimikatz hosted through an RDP mapped drive.","[S0154] Cobalt Strike: Cobalt Strike can spawn a job to inject into LSASS memory and dump password hashes.","[S0378] PoshC2: PoshC2 contains an implementation of Mimikatz to gather credentials from memory.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used various tools (such as Mimikatz and WCE) to perform credential dumping.","[S0005] Windows Credential Editor: Windows Credential Editor can dump credentials.","[G0087] APT39: APT39 has used Mimikatz, Windows Credential Editor and ProcDump to dump credentials.","[C0030] Triton Safety Instrumented System Attack: In the Triton Safety Instrumented System Attack, TEMP.Veles used Mimikatz.","[G0059] Magic Hound: Magic Hound has stolen domain credentials by dumping LSASS process memory using Task Manager, comsvcs.dll, and from a Microsoft Active Directory Domain Controller using Mimikatz.","[G1006] Earth Lusca: Earth Lusca has used ProcDump to obtain the hashes of credentials by dumping the memory of the LSASS process.","[S0428] PoetRAT: PoetRAT used voStro.exe, a compiled pypykatz (Python version of Mimikatz), to steal credentials.","[C0038] HomeLand Justice: During HomeLand Justice, threat actors dumped LSASS memory on compromised hosts.","[S0367] Emotet: Emotet has been observed dropping and executing password grabber modules including Mimikatz.","[G0068] PLATINUM: PLATINUM has used keyloggers that are also capable of dumping credentials.","[G0117] Fox Kitten: Fox Kitten has used prodump to dump credentials from LSASS.","[S0056] Net Crawler: Net Crawler uses credential dumpers such as Mimikatz and Windows Credential Editor to extract cached credentials from Windows systems.","[G0091] Silence: Silence has used the Farse6.1 utility (based on Mimikatz) to extract credentials from lsass.exe.","[C0025] 2016 Ukraine Electric Power Attack: During the 2016 Ukraine Electric Power Attack, Sandworm Team used Mimikatz to capture and use legitimate credentials.","[S0583] Pysa: Pysa can perform OS credential dumping using Mimikatz.","[S0002] Mimikatz: Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSASS Memory.","[G0034] Sandworm Team: Sandworm Team has used its plainpwd tool, a modified version of Mimikatz, and comsvcs.dll to dump Windows credentials from system memory.","[G1036] Moonstone Sleet: Moonstone Sleet retrieved credentials from LSASS memory.","[G0069] MuddyWater: MuddyWater has performed credential dumping with Mimikatz and procdump64.exe.","[G0102] Wizard Spider: Wizard Spider has dumped the lsass.exe memory to harvest credentials with the use of open-source tool LaZagne.","[G0143] Aquatic Panda: Aquatic Panda has attempted to harvest credentials through LSASS memory dumping.","[G0004] Ke3chang: Ke3chang has dumped credentials, including by using Mimikatz.","[G0022] APT3: APT3 has used a tool to dump credentials by injecting itself into lsass.exe and triggering with the argument \"dig.\"","[G0096] APT41: APT41 has used hashdump, Mimikatz, Procdump, and the Windows Credential Editor to dump password hashes from memory and authenticate to other user accounts.","[S0363] Empire: Empire contains an implementation of Mimikatz to gather credentials from memory.","[S0187] Daserf: Daserf leverages Mimikatz and Windows Credential Editor to steal credentials.","[G0037] FIN6: FIN6 has used Windows Credential Editor for credential dumping.","[G1003] Ember Bear: Ember Bear uses legitimate Sysinternals tools such as procdump to dump LSASS memory.","[S1060] Mafalda: Mafalda can dump password hashes from `LSASS.exe`.","[G0007] APT28: APT28 regularly deploys both publicly available (ex: Mimikatz) and custom password retrieval tools on victims. They have also dumped the LSASS process memory using the MiniDump function.","[S0633] Sliver: Sliver has a built-in `procdump` command allowing for retrieval of memory from processes such as `lsass.exe` for credential harvesting.","[S0365] Olympic Destroyer: Olympic Destroyer contains a module that tries to obtain credentials from LSASS, similar to Mimikatz. These credentials are used with PsExec and Windows Management Instrumentation to help the malware propagate itself across a network.","[G0094] Kimsuky: Kimsuky has gathered credentials using Mimikatz and ProcDump.","[G1040] Play: Play has used Mimikatz and the Windows Task Manager to dump LSASS process memory.","[G1039] RedCurl: RedCurl used LaZagne to obtain passwords from memory.","[S0439] Okrum: Okrum was seen using MimikatzLite to perform credential dumping.","[S0194] PowerSploit: PowerSploit contains a collection of Exfiltration modules that can harvest credentials using Mimikatz.","[C0032] C0032: During the C0032 campaign, TEMP.Veles used Mimikatz and a custom tool, SecHack, to harvest credentials.","[S0342] GreyEnergy: GreyEnergy has a module for Mimikatz to collect Windows credentials from the victim’s machine."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1003.002","technique_name":"OS Credential Dumping: Security Account Manager","description":"Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the net user command. Enumerating the SAM database requires SYSTEM level access. A number of tools can be used to retrieve the SAM file through in-memory techniques: * pwdumpx.exe * gsecdump * Mimikatz * secretsdump.py Alternatively, the SAM can be extracted from the Registry with Reg: * reg save HKLM\\sam sam * reg save HKLM\\system system Creddump7 can then be used to process the SAM database locally to retrieve hashes. Notes: * RID 500 account is the local, built-in administrator. * RID 501 is the guest account. * User accounts start with a RID of 1,000+.","detection":"Hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Valid Accounts in-use by adversaries may help as well.","procedures":["[G1034] Daggerfly: Daggerfly used Reg to dump the Security Account Manager (SAM) hive from victim machines for follow-on credential extraction.","[S0488] CrackMapExec: CrackMapExec can dump usernames and hashed passwords from the SAM.","[S0008] gsecdump: gsecdump can dump Windows password hashes from the SAM.","[G0093] GALLIUM: GALLIUM used reg commands to dump specific hives from the Windows Registry, such as the SAM hive, and obtain password hashes.","[C0041] FrostyGoop Incident: During FrostyGoop Incident, the adversary retrieved the contents of the Security Account Manager (SAM) hive in the victim environment for credential capture.","[G0016] APT29: APT29 has used the `reg save` command to save registry hives.","[S0250] Koadic: Koadic can gather hashed passwords by dumping SAM/SECURITY hive.","[G1016] FIN13: FIN13 has extracted the SAM and SYSTEM registry hives using the `reg.exe` binary for obtaining password hashes from a compromised machine.","[C0017] C0017: During C0017, APT41 copied the `SAM` and `SYSTEM` Registry hives for credential harvesting.","[S0006] pwdump: pwdump can be used to dump credentials from the SAM.","[G0035] Dragonfly: Dragonfly has dropped and executed SecretsDump to dump password hashes.","[G0004] Ke3chang: Ke3chang has dumped credentials, including by using gsecdump.","[S0376] HOPLIGHT: HOPLIGHT has the capability to harvest credentials and passwords from the SAM database.","[G1030] Agrius: Agrius dumped the SAM file on victim machines to capture credentials.","[C0002] Night Dragon: During Night Dragon, threat actors dumped account hashes using gsecdump.","[S0002] Mimikatz: Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the SAM table.","[G0096] APT41: APT41 extracted user account data from the Security Account Managerr (SAM), making a copy of this database from the registry using the reg save command or by exploiting volume shadow copies.","[S0125] Remsec: Remsec can dump the SAM database.","[G1023] APT5: APT5 has copied and exfiltrated the SAM Registry hive from targeted systems.","[G0045] menuPass: menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.","[S0046] CozyCar: Password stealer and NTLM stealer modules in CozyCar harvest stored credentials from the victim, including credentials used as part of Windows NTLM user authentication.","[G0027] Threat Group-3390: Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers.","[C0051] APT28 Nearest Neighbor Campaign: During APT28 Nearest Neighbor Campaign, APT28 used the following commands to dump SAM, SYSTEM, and SECURITY hives: reg save hklm\\sam, reg save hklm\\system, and reg save hklm\\security.","[S0080] Mivast: Mivast has the capability to gather NTLM password information.","[S0357] Impacket: SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors leveraged a custom tool to dump OS credentials and used following commands: `reg save HKLM\\\\SYSTEM system.hiv`, `reg save HKLM\\\\SAM sam.hiv`, and `reg save HKLM\\\\SECURITY security.hiv`, to dump SAM, SYSTEM and SECURITY hives.","[S0371] POWERTON: POWERTON has the ability to dump password hashes.","[G0102] Wizard Spider: Wizard Spider has acquired credentials from the SAM/SECURITY registry hives.","[S0050] CosmicDuke: CosmicDuke collects Windows account hashes.","[S0154] Cobalt Strike: Cobalt Strike can recover hashed passwords.","[S1022] IceApple: IceApple's Credential Dumper module can dump encrypted password hashes from SAM registry keys, including `HKLM\\SAM\\SAM\\Domains\\Account\\F` and `HKLM\\SAM\\SAM\\Domains\\Account\\Users\\*\\V`.","[G1003] Ember Bear: Ember Bear acquires victim credentials by extracting registry hives such as the Security Account Manager through commands such as reg save.","[S0120] Fgdump: Fgdump can dump Windows password hashes."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1003.003","technique_name":"OS Credential Dumping: NTDS","description":"Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller. In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information. The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes. * Volume Shadow Copy * secretsdump.py * Using the in-built Windows tool, ntdsutil.exe * Invoke-NinjaCopy","detection":"Monitor processes and command-line arguments for program execution that may be indicative of credential dumping, especially attempts to access or copy the NTDS.dit.","procedures":["[G0007] APT28: APT28 has used the ntdsutil.exe utility to export the Active Directory database for credential access.","[C0051] APT28 Nearest Neighbor Campaign: During APT28 Nearest Neighbor Campaign, APT28 dumped NTDS.dit through creating volume shadow copies via vssadmin.","[C0048] Operation MidnightEclipse: During Operation MidnightEclipse, threat actors obtained active directory credentials via the NTDS.DIT file.","[S0488] CrackMapExec: CrackMapExec can dump hashed passwords associated with Active Directory using Windows' Directory Replication Services API (DRSUAPI), or Volume Shadow Copy.","[G1015] Scattered Spider: Scattered Spider has extracted the `NTDS.dit` file by creating volume shadow copies of virtual domain controller disks.","[G0034] Sandworm Team: Sandworm Team has used `ntdsutil.exe` to back up the Active Directory database, likely for credential access.","[G1016] FIN13: FIN13 has harvested the NTDS.DIT file and leveraged the Impacket tool on the compromised domain controller to locally decrypt it.","[S0404] esentutl: esentutl can copy `ntds.dit` using the Volume Shadow Copy service.","[G0037] FIN6: FIN6 has used Metasploit’s PsExec NTDSGRAB module to obtain a copy of the victim's Active Directory database.","[G1017] Volt Typhoon: Volt Typhoon has used ntds.util to create domain controller installation media containing usernames and password hashes.","[G0045] menuPass: menuPass has used Ntdsutil to dump credentials.","[G0114] Chimera: Chimera has gathered the SYSTEM registry and ntds.dit files from target systems. Chimera specifically has used the NtdsAudit tool to dump the password hashes of domain users via msadcs.exe \"NTDS.dit\" -s \"SYSTEM\" -p RecordedTV_pdmp.txt --users-csv RecordedTV_users.csv and used ntdsutil to copy the Active Directory database.","[S0357] Impacket: SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information from NTDS.dit.","[G0117] Fox Kitten: Fox Kitten has used Volume Shadow Copy to access credential information from NTDS.","[C0029] Cutting Edge: During Cutting Edge, threat actors accessed and mounted virtual hard disk backups to extract ntds.dit.","[G0102] Wizard Spider: Wizard Spider has gained access to credentials via exported copies of the ntds.dit Active Directory database. Wizard Spider has also created a volume shadow copy and used a batch script file to collect NTDS.dit with the use of the Windows utility, ntdsutil.","[G0035] Dragonfly: Dragonfly has dropped and executed SecretsDump to dump password hashes. They also obtained ntds.dit from domain controllers.","[S0250] Koadic: Koadic can gather hashed passwords by gathering domain controller hashes from NTDS.","[G0096] APT41: APT41 used ntdsutil to obtain a copy of the victim environment ntds.dit file.","[G0129] Mustang Panda: Mustang Panda has used vssadmin to create a volume shadow copy and retrieve the NTDS.dit file. Mustang Panda has also used reg save on the SYSTEM file Registry location to help extract the NTDS.dit file.","[G0004] Ke3chang: Ke3chang has used NTDSDump and other password dumping tools to gather credentials.","[G0125] HAFNIUM: HAFNIUM has stolen copies of the Active Directory database (NTDS.DIT).","[G1004] LAPSUS$: LAPSUS$ has used Windows built-in tool `ntdsutil` to extract the Active Directory (AD) database."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1003.004","technique_name":"OS Credential Dumping: LSA Secrets","description":"Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts. LSA secrets are stored in the registry at HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets. LSA secrets can also be dumped from memory. Reg can be used to extract from the Registry. Mimikatz can be used to extract secrets from memory.","detection":"Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.","procedures":["[G0069] MuddyWater: MuddyWater has performed credential dumping with LaZagne.","[S1022] IceApple: IceApple's Credential Dumper module can dump LSA secrets from registry keys, including: `HKLM\\SECURITY\\Policy\\PolEKList\\default`, `HKLM\\SECURITY\\Policy\\Secrets\\*\\CurrVal`, and `HKLM\\SECURITY\\Policy\\Secrets\\*\\OldVal`.","[S0050] CosmicDuke: CosmicDuke collects LSA secrets.","[S0008] gsecdump: gsecdump can dump LSA secrets.","[S0349] LaZagne: LaZagne can perform credential dumping from LSA secrets to obtain account and password information.","[G0027] Threat Group-3390: Threat Group-3390 actors have used gsecdump to dump credentials. They have also dumped credentials from domain controllers.","[G0049] OilRig: OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.","[S0488] CrackMapExec: CrackMapExec can dump hashed passwords from LSA secrets for the targeted system.","[G0077] Leafminer: Leafminer used several tools for retrieving login and password information, including LaZagne.","[G0064] APT33: APT33 has used a variety of publicly available tools like LaZagne to gather credentials.","[G0016] APT29: APT29 has used the `reg save` command to extract LSA secrets offline.","[G0045] menuPass: menuPass has used a modified version of pentesting tools wmiexec.vbs and secretsdump.py to dump credentials.","[G0035] Dragonfly: Dragonfly has dropped and executed SecretsDump to dump password hashes.","[S0677] AADInternals: AADInternals can dump secrets from the Local Security Authority.","[S0357] Impacket: SecretsDump and Mimikatz modules within Impacket can perform credential dumping to obtain account and password information.","[S0192] Pupy: Pupy can use Lazagne for harvesting credentials.","[G1003] Ember Bear: Ember Bear has used frameworks such as Impacket to dump LSA secrets for credential capture.","[G0004] Ke3chang: Ke3chang has dumped credentials, including by using gsecdump.","[S0002] Mimikatz: Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from the LSA."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1003.005","technique_name":"OS Credential Dumping: Cached Domain Credentials","description":"Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable. On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password. On Linux systems, Active Directory credentials can be accessed through caches maintained by software like System Security Services Daemon (SSSD) or Quest Authentication Services (formerly VAS). Cached credential hashes are typically located at `/var/lib/sss/db/cache.[domain].ldb` for SSSD or `/var/opt/quest/vas/authcache/vas_auth.vdb` for Quest. Adversaries can use utilities, such as `tdbdump`, on these database files to dump the cached hashes and use Password Cracking to obtain the plaintext password. With SYSTEM or sudo access, the tools/utilities such as Mimikatz, Reg, and secretsdump.py for Windows or Linikatz for Linux can be used to extract the cached credentials. Note: Cached credentials for Windows Vista are derived using PBKDF2.","detection":"Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, which may require additional logging features to be configured in the operating system to collect necessary information for analysis. Detection of compromised Valid Accounts in-use by adversaries may help as well.","procedures":["[S0439] Okrum: Okrum was seen using modified Quarks PwDump to perform credential dumping.","[G0064] APT33: APT33 has used a variety of publicly available tools like LaZagne to gather credentials.","[G0077] Leafminer: Leafminer used several tools for retrieving login and password information, including LaZagne.","[S0119] Cachedump: Cachedump can extract cached password hashes from cache entry information.","[S0349] LaZagne: LaZagne can perform credential dumping from MSCache to obtain account and password information.","[G0049] OilRig: OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.","[S0192] Pupy: Pupy can use Lazagne for harvesting credentials.","[G0069] MuddyWater: MuddyWater has performed credential dumping with LaZagne."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1003.006","technique_name":"OS Credential Dumping: DCSync","description":"Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller using a technique called DCSync. Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket or change an account's password as noted in Account Manipulation. DCSync functionality has been included in the \"lsadump\" module in Mimikatz. Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.","detection":"Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync. Also monitor for network protocols and other replication requests from IPs not associated with known domain controllers. Note: Domain controllers may not log replication requests originating from the default domain controller account.","procedures":["[S0002] Mimikatz: Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DCSync/NetSync.","[G1006] Earth Lusca: Earth Lusca has used a DCSync command with Mimikatz to retrieve credentials from an exploited controller.","[C0027] C0027: During C0027, Scattered Spider performed domain replication.","[C0014] Operation Wocao: During Operation Wocao, threat actors used Mimikatz's DCSync to dump credentials from the memory of the targeted system.","[G1004] LAPSUS$: LAPSUS$ has used DCSync attacks to gather credentials for privilege escalation routines.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used privileged accounts to replicate directory service data with domain controllers."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1003.007","technique_name":"OS Credential Dumping: Proc Filesystem","description":"Adversaries may gather credentials from the proc filesystem or `/proc`. The proc filesystem is a pseudo-filesystem used as an interface to kernel data structures for Linux based systems managing virtual memory. For each process, the `/proc//maps` file shows how memory is mapped within the process’s virtual address space. And `/proc//mem`, exposed for debugging purposes, provides access to the process’s virtual address space. When executing with root privileges, adversaries can search these memory locations for all processes on a system that contain patterns indicative of credentials. Adversaries may use regex patterns, such as grep -E \"^[0-9a-f-]* r\" /proc/\"$pid\"/maps | cut -d' ' -f 1, to look for fixed strings in memory structures or cached hashes. When running without privileged access, processes can still view their own virtual memory locations. Some services or programs may save credentials in clear text inside the process’s memory. If running as or with the permissions of a web browser, a process can search the `/maps` & `/mem` locations for common website credential patterns (that can also be used to find adjacent memory within the same structure) in which hashes or cleartext credentials may be located.","detection":"To obtain the passwords and hashes stored in memory, processes must open a maps file in the `/proc` filesystem for the process being analyzed. This file is stored under the path `/proc/PID/maps`, where the `PID` directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.","procedures":["[S1109] PACEMAKER: PACEMAKER has the ability to extract credentials from OS memory.","[S0349] LaZagne: LaZagne can use the `/maps` and `/mem` files to identify regex patterns to dump cleartext passwords from the browser's process memory.","[S0179] MimiPenguin: MimiPenguin can use the `/maps` and `/mem` file to search for regex patterns and dump the process memory."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1003.008","technique_name":"OS Credential Dumping: /etc/passwd and /etc/shadow","description":"Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information, including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user. Linux stores user information such as user ID, group ID, home directory path, and login shell in /etc/passwd. A \"user\" on the system may belong to a person or a service. All password hashes are stored in /etc/shadow - including entries for users with no passwords and users with locked or disabled accounts. Adversaries may attempt to read or dump the /etc/passwd and /etc/shadow files on Linux systems via command line utilities such as the cat command. Additionally, the Linux utility unshadow can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper - for example, via the command /usr/bin/unshadow /etc/passwd /etc/shadow > /tmp/crack.password.db. Since the user information stored in /etc/passwd are linked to the password hashes in /etc/shadow, an adversary would need to have access to both.","detection":"The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access /etc/passwd and /etc/shadow, alerting on the pid, process name, and arguments of such programs.","procedures":["[S0349] LaZagne: LaZagne can obtain credential information from /etc/shadow using the shadow.py module.","[C0045] ShadowRay: During ShadowRay, threat actors used `cat /etc/shadow` to steal password hashes."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1040","technique_name":"Network Sniffing","description":"Adversaries may passively sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data. Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary. Network sniffing may reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities. Adversaries may likely also utilize network sniffing during Adversary-in-the-Middle (AiTM) to passively gain additional knowledge about the environment. In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to. Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic. The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic. On network devices, adversaries may perform network captures using Network Device CLI commands such as `monitor capture`.","detection":"Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a Adversary-in-the-Middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes. In cloud-based environments, monitor for the creation of new traffic mirrors or modification of existing traffic mirrors. For network infrastructure devices, collect AAA logging to monitor for the capture of network traffic.","procedures":["[G0034] Sandworm Team: Sandworm Team has used intercepter-NG to sniff passwords in network traffic.","[G0094] Kimsuky: Kimsuky has used the Nirsoft SniffPass network sniffer to obtain passwords sent over non-secure protocols.","[S0357] Impacket: Impacket can be used to sniff network traffic via an interface or raw socket.","[S0590] NBTscan: NBTscan can dump and print whole packet content.","[S0443] MESSAGETAP: MESSAGETAP uses the libpcap library to listen to all traffic and parses network protocols starting with Ethernet and IP layers. It continues parsing protocol layers including SCTP, SCCP, and TCAP and finally extracts SMS message data and routing metadata.","[S1206] JumbledPath: JumbledPath has the ability to perform packet capture on remote devices via actor-defined jump-hosts.","[G1047] Velvet Ant: Velvet Ant has used a custom tool, \"VELVETTAP\", to perform packet capture from compromised F5 BIG-IP devices.","[G1045] Salt Typhoon: Salt Typhoon has used a variety of tools and techniques to capture packet data between network interfaces.","[C0028] 2015 Ukraine Electric Power Attack: During the 2015 Ukraine Electric Power Attack, Sandworm Team used BlackEnergy’s network sniffer module to discover user credentials being sent over the network between the local LAN and the power grid’s industrial control systems.","[S0587] Penquin: Penquin can sniff network traffic to look for packets matching specific conditions.","[S0661] FoggyWeb: FoggyWeb can configure custom listeners to passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor.","[S0363] Empire: Empire can be used to conduct packet captures on target hosts.","[S0174] Responder: Responder captures hashes and credentials that are sent to the system after the name services have been poisoned.","[S0367] Emotet: Emotet has been observed to hook network APIs to monitor network traffic.","[C0046] ArcaneDoor: ArcaneDoor included network packet capture and sniffing for data collection in victim environments.","[G0064] APT33: APT33 has used SniffPass to collect credentials by sniffing network traffic.","[S1204] cd00r: cd00r can use the libpcap library to monitor captured packets for specifc sequences.","[S1186] Line Dancer: Line Dancer can create and exfiltrate packet captures from compromised environments.","[G0105] DarkVishnya: DarkVishnya used network sniffing to obtain login data.","[G0007] APT28: APT28 deployed the open source tool Responder to conduct NetBIOS Name Service poisoning, which captured usernames and hashed passwords that allowed access to legitimate credentials. APT28 close-access teams have used Wi-Fi pineapples to intercept Wi-Fi signals and user credentials.","[S1203] J-magic: J-magic has a pcap listener function that can create an Extended Berkley Packet Filter (eBPF) on designated interfaces and ports.","[S0378] PoshC2: PoshC2 contains a module for taking packet captures on compromised hosts.","[S1154] VersaMem: VersaMem hooked the Catalina application filter chain `doFilter` on compromised systems to monitor all inbound requests to the local Tomcat web server, inspecting them for parameters like passwords and follow-on Java modules.","[S0019] Regin: Regin appears to have functionality to sniff for credentials passed over HTTP, SMTP, and SMB."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1056.001","technique_name":"Input Capture: Keylogging","description":"Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when OS Credential Dumping efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured. In order to increase the likelihood of capturing credentials quickly, an adversary may also perform actions such as clearing browser cookies to force users to reauthenticate to systems. Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes. Some methods include: * Hooking API callbacks used for processing keystrokes. Unlike Credential API Hooking, this focuses solely on API functions intended for processing keystroke data. * Reading raw keystroke data from the hardware buffer. * Windows Registry modifications. * Custom drivers. * Modify System Image may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.","detection":"Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include `SetWindowsHook`, `GetKeyState`, and `GetAsyncKeyState`. Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.","procedures":["[G0059] Magic Hound: Magic Hound malware is capable of keylogging.","[C0014] Operation Wocao: During Operation Wocao, threat actors obtained the password for the victim's password manager via a custom keylogger.","[S0021] Derusbi: Derusbi is capable of logging keystrokes.","[S1012] PowerLess: PowerLess can use a module to log keystrokes.","[S0643] Peppy: Peppy can log keystrokes on compromised hosts.","[S0670] WarzoneRAT: WarzoneRAT has the capability to install a live and offline keylogger, including through the use of the `GetAsyncKeyState` Windows API.","[S0038] Duqu: Duqu can track key presses with a keylogger module.","[S0283] jRAT: jRAT has the capability to log keystrokes from the victim’s machine, both offline and online.","[S0455] Metamorfo: Metamorfo has a command to launch a keylogger and capture keystrokes on the victim’s machine.","[S0045] ADVSTORESHELL: ADVSTORESHELL can perform keylogging.","[S1146] MgBot: MgBot includes keylogger payloads focused on the QQ chat application.","[G0087] APT39: APT39 has used tools for capturing keystrokes.","[S0149] MoonWind: MoonWind has a keylogger.","[S0152] EvilGrab: EvilGrab has the capability to capture keystrokes.","[S0161] XAgentOSX: XAgentOSX contains keylogging functionality that will monitor for active application windows and write them to the log, it can handle special characters, and it will buffer by default 50 characters before sending them out over the C2 infrastructure.","[S0363] Empire: Empire includes keylogging capabilities for Windows, Linux, and macOS systems.","[S0339] Micropsia: Micropsia has keylogging capabilities.","[S0113] Prikormka: Prikormka contains a keylogger module that collects keystrokes and the titles of foreground windows.","[G0082] APT38: APT38 used a Trojan called KEYLIME to capture keystrokes from the victim’s machine.","[S0410] Fysbis: Fysbis can perform keylogging.","[S0194] PowerSploit: PowerSploit's Get-Keystrokes Exfiltration module can log keystrokes.","[S0379] Revenge RAT: Revenge RAT has a plugin for keylogging.","[G1017] Volt Typhoon: Volt Typhoon has created and accessed a file named rult3uil.log on compromised domain controllers to capture keypresses and command execution.","[S0167] Matryoshka: Matryoshka is capable of keylogging.","[G0130] Ajax Security Team: Ajax Security Team has used CWoolger and MPK, custom-developed malware, which recorded all keystrokes on an infected system.","[S0381] FlawedAmmyy: FlawedAmmyy can collect keyboard events.","[S0148] RTM: RTM can record keystrokes from both the keyboard and virtual keyboard.","[S0454] Cadelspy: Cadelspy has the ability to log keystrokes on the compromised host.","[S0567] Dtrack: Dtrack’s dropper contains a keylogging executable.","[S0434] Imminent Monitor: Imminent Monitor has a keylogging module.","[S0261] Catchamas: Catchamas collects keystrokes from the victim’s machine.","[S0154] Cobalt Strike: Cobalt Strike can track key presses with a keylogger module.","[S0033] NetTraveler: NetTraveler contains a keylogger.","[G0007] APT28: APT28 has used tools to perform keylogging.","[S0262] QuasarRAT: QuasarRAT has a built-in keylogger.","[S0125] Remsec: Remsec contains a keylogger component.","[S1159] DUSTTRAP: DUSTTRAP can perform keylogging operations.","[S0072] OwaAuth: OwaAuth captures and DES-encrypts credentials before writing the username and password to a log file, C:\\log.txt.","[S0234] Bandook: Bandook contains keylogging capabilities.","[S0240] ROKRAT: ROKRAT can use `SetWindowsHookEx` and `GetKeyNameText` to capture keystrokes.","[G0012] Darkhotel: Darkhotel has used a keylogger.","[S0019] Regin: Regin contains a keylogger.","[S0013] PlugX: PlugX has a module for capturing keystrokes per process including window titles.","[S0533] SLOTHFULMEDIA: SLOTHFULMEDIA has a keylogging capability.","[S0414] BabyShark: BabyShark has a PowerShell-based remote administration ability that can implement a PowerShell or C# based keylogger.","[S0257] VERMIN: VERMIN collects keystrokes from the victim machine.","[S0128] BADNEWS: When it first starts, BADNEWS spawns a new thread to log keystrokes.","[S0012] PoisonIvy: PoisonIvy contains a keylogger.","[S0652] MarkiRAT: MarkiRAT can capture all keystrokes on a compromised host.","[S0595] ThiefQuest: ThiefQuest uses the CGEventTap functions to perform keylogging.","[S0348] Cardinal RAT: Cardinal RAT can log keystrokes.","[S0375] Remexi: Remexi gathers and exfiltrates keystrokes from the machine.","[S0260] InvisiMole: InvisiMole can capture keystrokes on a compromised host.","[S0213] DOGCALL: DOGCALL is capable of logging keystrokes.","[S0253] RunningRAT: RunningRAT captures keystrokes and sends them back to the C2 server.","[S0569] Explosive: Explosive has leveraged its keylogging capabilities to gain access to administrator accounts on target servers.","[G0045] menuPass: menuPass has used key loggers to steal usernames and passwords.","[S0622] AppleSeed: AppleSeed can use GetKeyState and GetKeyboardState to capture keystrokes on the victim’s machine.","[S1207] XLoader: XLoader can capture keystrokes from the victim machine.","[S0115] Crimson: Crimson can use a module to perform keylogging on compromised hosts.","[S0062] DustySky: DustySky contains a keylogger.","[S0378] PoshC2: PoshC2 has modules for keystroke logging and capturing credentials from spoofed Outlook authentication messages.","[S1050] PcShare: PcShare has the ability to capture keystrokes.","[G1023] APT5: APT5 has used malware with keylogging capabilities to monitor the communications of targeted entities.","[G0131] Tonto Team: Tonto Team has used keylogging tools in their operations.","[S0337] BadPatch: BadPatch has a keylogging capability.","[S0447] Lokibot: Lokibot has the ability to capture input on the compromised host via keylogging.","[S0625] Cuba: Cuba logs keystrokes via polling by using GetKeyState and VkKeyScan functions.","[S0662] RCSession: RCSession has the ability to capture keystrokes on a compromised host.","[S0387] KeyBoy: KeyBoy installs a keylogger for intercepting credentials and keystrokes.","[S1122] Mispadu: Mispadu can log keystrokes on the victim's machine.","[S0170] Helminth: The executable version of Helminth has a module to log keystrokes.","[G0027] Threat Group-3390: Threat Group-3390 actors installed a credential logger on Microsoft Exchange servers. Threat Group-3390 also leveraged the reconnaissance framework, ScanBox, to capture keystrokes.","[S0050] CosmicDuke: CosmicDuke uses a keylogger.","[S0373] Astaroth: Astaroth logs keystrokes from the victim's machine.","[S0649] SMOKEDHAM: SMOKEDHAM can continuously capture keystrokes.","[S0094] Trojan.Karagany: Trojan.Karagany can capture keystrokes on a compromised host.","[S0201] JPIN: JPIN contains a custom keylogger.","[S0018] Sykipot: Sykipot contains keylogging functionality to steal passwords.","[S1111] DarkGate: DarkGate will spawn a thread on execution to capture all keyboard events and write them to a predefined log file.","[S1044] FunnyDream: The FunnyDream Keyrecord component can capture keystrokes.","[S1066] DarkTortilla: DarkTortilla can download a keylogging module.","[S0437] Kivars: Kivars has the ability to initiate keylogging on the infected host.","[G0032] Lazarus Group: Lazarus Group malware KiloAlfa contains keylogging functionality.","[S0531] Grandoreiro: Grandoreiro can log keystrokes on the victim's machine.","[S0192] Pupy: Pupy uses a keylogger to capture keystrokes it then sends back to the server after it is stopped.","[S0030] Carbanak: Carbanak logs key strokes for configured processes and sends them back to the C2 server.","[G0043] Group5: Malware used by Group5 is capable of capturing keystrokes.","[S0338] Cobian RAT: Cobian RAT has a feature to perform keylogging on the victim’s machine.","[S0331] Agent Tesla: Agent Tesla can log keystrokes on the victim’s machine.","[G0068] PLATINUM: PLATINUM has used several different keyloggers.","[G0085] FIN4: FIN4 has captured credentials via fake Outlook Web App (OWA) login pages and has also used a .NET based keylogger.","[S0058] SslMM: SslMM creates a new thread implementing a keylogging facility using Windows Keyboard Accelerators.","[S0023] CHOPSTICK: CHOPSTICK is capable of performing keylogging.","[S1090] NightClub: NightClub can use a plugin for keylogging.","[G0034] Sandworm Team: Sandworm Team has used a keylogger to capture keystrokes by using the SetWindowsHookEx function.","[S0660] Clambling: Clambling can capture keystrokes on a compromised host.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP has the ability to support keylogging.","[S0247] NavRAT: NavRAT logs the keystrokes on the targeted system.","[S0385] njRAT: njRAT is capable of logging keystrokes.","[S0336] NanoCore: NanoCore can perform keylogging on the victim’s machine.","[S0279] Proton: Proton uses a keylogger to capture keystrokes.","[S0409] Machete: Machete logs keystrokes from the victim’s machine.","[G0094] Kimsuky: Kimsuky has used a PowerShell-based keylogger as well as a tool called MECHANICAL to log keystrokes.","[G0049] OilRig: OilRig has employed keyloggers including KEYPUNCH and LONGWATCH.","[S0438] Attor: One of Attor's plugins can collect user credentials via capturing keystrokes and can capture keystrokes pressed within the window of the injected process.","[G1044] APT42: APT42 has used custom malware to log keystrokes.","[S0070] HTTPBrowser: HTTPBrowser is capable of capturing keystrokes on victims.","[G0054] Sowbug: Sowbug has used keylogging tools.","[S0248] yty: yty uses a keylogger plugin to gather keystrokes.","[S1016] MacMa: MacMa can use Core Graphics Event Taps to intercept user keystrokes from any text input field and saves them to text files. Text input fields include Spotlight, Finder, Safari, Mail, Messages, and other apps that have text fields for passwords.","[S0089] BlackEnergy: BlackEnergy has run a keylogger plug-in on a victim.","[S0593] ECCENTRICBANDWAGON: ECCENTRICBANDWAGON can capture and store keystrokes.","[S0032] gh0st RAT: gh0st RAT has a keylogger.","[S0076] FakeM: FakeM contains a keylogger module.","[S0198] NETWIRE: NETWIRE can perform keylogging.","[S0332] Remcos: Remcos has a command for keylogging.","[S0650] QakBot: QakBot can capture keystrokes on a compromised host.","[S0342] GreyEnergy: GreyEnergy has a module to harvest pressed keystrokes.","[G1001] HEXANE: HEXANE has used a PowerShell-based keylogger named `kl.ps1`.","[C0028] 2015 Ukraine Electric Power Attack: During the 2015 Ukraine Electric Power Attack, Sandworm Team gathered account credentials via a BlackEnergy keylogger plugin.","[S0187] Daserf: Daserf can log keystrokes.","[S0004] TinyZBot: TinyZBot contains keylogger functionality.","[S0439] Okrum: Okrum was seen using a keylogger tool to capture keystrokes.","[S0334] DarkComet: DarkComet has a keylogging capability.","[G0050] APT32: APT32 has abused the PasswordChangeNotify to monitor for and capture account password changes.","[C0029] Cutting Edge: During Cutting Edge, threat actors modified a JavaScript file on the Web SSL VPN component of Ivanti Connect Secure devices to keylog credentials.","[S0673] DarkWatchman: DarkWatchman can track key presses with a keylogger module.","[S0330] Zeus Panda: Zeus Panda can perform keylogging on the victim’s machine by hooking the functions TranslateMessage and WM_KEYDOWN.","[S0017] BISCUIT: BISCUIT can capture keystrokes.","[S1059] metaMain: metaMain has the ability to log keyboard events.","[S0088] Kasidet: Kasidet has the ability to initiate keylogging.","[S0282] MacSpy: MacSpy captures keystrokes.","[S0692] SILENTTRINITY: SILENTTRINITY has a keylogging capability.","[S0356] KONNI: KONNI has the capability to perform keylogging.","[S0526] KGH_SPY: KGH_SPY can perform keylogging by polling the GetAsyncKeyState() function.","[S0130] Unknown Logger: Unknown Logger is capable of recording keystrokes.","[G0022] APT3: APT3 has used a keylogging tool that records keystrokes in encrypted files.","[S0467] TajMahal: TajMahal has the ability to capture keystrokes on an infected host.","[G1016] FIN13: FIN13 has logged the keystrokes of victims to escalate privileges.","[S0412] ZxShell: ZxShell has a feature to capture a remote computer's keystrokes using a keylogger.","[G0004] Ke3chang: Ke3chang has used keyloggers.","[S0090] Rover: Rover has keylogging functionality.","[G0096] APT41: APT41 used a keylogger called GEARSHIFT on a target system.","[S1087] AsyncRAT: AsyncRAT can capture keystrokes on the victim’s machine.","[S0428] PoetRAT: PoetRAT has used a Python tool named klog.exe for keylogging."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1056.002","technique_name":"Input Capture: GUI Input Capture","description":"Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: Bypass User Account Control). Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. This type of prompt can be used to collect credentials via various languages such as AppleScript and PowerShell. On Linux systems adversaries may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. Unix Shell). Adversaries may also mimic common software authentication requests, such as those from browsers or email clients. This may also be paired with user activity monitoring (i.e., Browser Information Discovery and/or Application Window Discovery) to spoof prompts when users are naturally accessing sensitive sites/data.","detection":"Monitor process execution for unusual programs as well as malicious instances of Command and Scripting Interpreter that could be used to prompt users for credentials. For example, command/script history including abnormal parameters (such as requests for credentials and/or strings related to creating password prompts) may be malicious. Inspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and/or sources.","procedures":["[S0279] Proton: Proton prompts users for their credentials.","[S0278] iKitten: iKitten prompts the user for their credentials.","[S0455] Metamorfo: Metamorfo has displayed fake forms on top of banking sites to intercept credentials from victims.","[S0274] Calisto: Calisto presents an input prompt asking for the user's login and password.","[S0276] Keydnap: Keydnap prompts the users for credentials.","[G1039] RedCurl: RedCurl prompts the user for credentials through a Microsoft Outlook pop-up.","[S0482] Bundlore: Bundlore prompts the user for their credentials.","[G0085] FIN4: FIN4 has presented victims with spoofed Windows Authentication prompts to collect their credentials.","[S0281] Dok: Dok prompts the user for credentials.","[S1122] Mispadu: Mispadu can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.","[S0658] XCSSET: XCSSET prompts the user to input credentials using a native macOS dialog box leveraging the system process /Applications/Safari.app/Contents/MacOS/SafariForWebKitDevelopment.","[S0692] SILENTTRINITY: SILENTTRINITY's `credphisher.py` module can prompt a current user for their credentials.","[S1153] Cuckoo Stealer: Cuckoo Stealer has captured passwords by prompting victims with a “macOS needs to access System Settings” GUI window."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1056.003","technique_name":"Input Capture: Web Portal Capture","description":"Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service.","detection":"File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.","procedures":["[G1035] Winter Vivern: Winter Vivern registered and hosted domains to allow for creation of web pages mimicking legitimate government email logon sites to collect logon information.","[C0030] Triton Safety Instrumented System Attack: In the Triton Safety Instrumented System Attack, TEMP.Veles captured credentials as they were being changed by redirecting text-based login codes to websites they controlled.","[S1116] WARPWIRE: WARPWIRE can capture credentials submitted during the web logon process in order to access layer seven applications such as RDP.","[S1022] IceApple: The IceApple OWA credential logger can monitor for OWA authentication requests and log the credentials.","[C0029] Cutting Edge: During Cutting Edge, threat actors modified the JavaScript loaded by the Ivanti Connect Secure login page to capture credentials entered."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1056.004","technique_name":"Input Capture: Credential API Hooking","description":"Adversaries may hook into Windows application programming interface (API) functions and Linux system functions to collect user credentials. Malicious hooking mechanisms may capture API or function calls that include parameters that reveal user authentication credentials. Unlike Keylogging, this technique focuses specifically on API functions that include parameters that reveal user credentials. In Windows, hooking involves redirecting calls to these functions and can be implemented via: * **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. * **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored. * **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow. In Linux and macOS, adversaries may hook into system functions via the `LD_PRELOAD` (Linux) or `DYLD_INSERT_LIBRARIES` (macOS) environment variables, which enables loading shared libraries into a program’s address space. For example, an adversary may capture credentials by hooking into the `libc read` function leveraged by SSH or SCP.","detection":"Monitor for calls to the `SetWindowsHookEx` and `SetWinEventHook` functions, which install a hook procedure. Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools or by programmatically examining internal kernel structures. Rootkits detectors can also be used to monitor for various types of hooking activity. Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes to compare the in-memory IAT to the real addresses of the referenced functions.","procedures":["[S0330] Zeus Panda: Zeus Panda hooks processes by leveraging its own IAT hooked functions.","[S1154] VersaMem: VersaMem hooked and overrided Versa's built-in authentication method, `setUserPassword`, to intercept plaintext credentials when submitted to the server.","[S0484] Carberp: Carberp has hooked several Windows API functions to steal credentials.","[S0182] FinFisher: FinFisher hooks processes by modifying IAT pointers to CreateWindowEx.","[S0386] Ursnif: Ursnif has hooked APIs to perform a wide variety of information theft, such as monitoring traffic from browsers.","[S0412] ZxShell: ZxShell hooks several API functions to spawn system threads.","[G0068] PLATINUM: PLATINUM is capable of using Windows hook interfaces for information gathering such as credential access.","[S0251] Zebrocy: Zebrocy installs an application-defined Windows hook to get notified when a network drive has been attached, so it can then use the hook to call its RecordToFile file stealing method.","[S0416] RDFSNIFFER: RDFSNIFFER hooks several Win32 API functions to hijack elements of the remote system management user-interface.","[S0363] Empire: Empire contains some modules that leverage API hooking to carry out tasks, such as netripper.","[S0266] TrickBot: TrickBot has the ability to capture RDP credentials by capturing the CredEnumerateA API","[S0353] NOKKI: NOKKI uses the Windows call SetWindowsHookEx and begins injecting it into every GUI process running on the victim's machine."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1110.001","technique_name":"Brute Force: Password Guessing","description":"Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts. Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following: * SSH (22/TCP) * Telnet (23/TCP) * FTP (21/TCP) * NetBIOS / SMB / Samba (139/TCP & 445/TCP) * LDAP (389/TCP) * Kerberos (88/TCP) * RDP / Terminal Services (3389/TCP) * HTTP/HTTP Management Services (80/TCP & 443/TCP) * MSSQL (1433/TCP) * Oracle (1521/TCP) * MySQL (3306/TCP) * VNC (5900/TCP) * SNMP (161/UDP and 162/TCP/UDP) In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.. Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols. In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.","detection":"Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.","procedures":["[S0020] China Chopper: China Chopper's server component can perform brute force password guessing against authentication portals.","[S0367] Emotet: Emotet has been observed using a hard coded list of passwords to brute force user accounts.","[S0374] SpeakUp: SpeakUp can perform brute forcing using a pre-defined list of usernames and passwords in an attempt to log in to administrative panels.","[G0007] APT28: APT28 has used a brute-force/password-spray tooling that operated in two modes: in brute-force mode it typically sent over 300 authentication attempts per hour per targeted account over the course of several hours or days. APT28 has also used a Kubernetes cluster to conduct distributed, large-scale password guessing attacks.","[S0488] CrackMapExec: CrackMapExec can brute force passwords for a specified user on a single target system or across an entire network.","[S0698] HermeticWizard: HermeticWizard can use a list of hardcoded credentials in attempt to authenticate to SMB shares.","[G0016] APT29: APT29 has successfully conducted password guessing attacks against a list of mailboxes.","[S0532] Lucifer: Lucifer has attempted to brute force TCP ports 135 (RPC) and 1433 (MSSQL) with the default username or list of usernames and passwords.","[S0453] Pony: Pony has used a small dictionary of common passwords against a collected list of local accounts.","[S0341] Xbash: Xbash can obtain a list of weak passwords from the C2 server to use for brute forcing as well as attempt to brute force services with open ports.","[S0598] P.A.S. Webshell: P.A.S. Webshell can use predefined users and passwords to execute brute force attacks against SSH, FTP, POP3, MySQL, MSSQL, and PostgreSQL services."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1110.002","technique_name":"Brute Force: Password Cracking","description":"Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. OS Credential Dumping can be used to obtain password hashes, this may only get an adversary so far when Pass the Hash is not an option. Further, adversaries may leverage Data from Configuration Repository in order to obtain hashed credentials for network devices. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network. The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.","detection":"It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network. Consider focusing efforts on detecting other adversary behavior used to acquire credential materials, such as OS Credential Dumping or Kerberoasting.","procedures":["[G0022] APT3: APT3 has been known to brute force password hashes to be able to leverage plain text credentials.","[S0056] Net Crawler: Net Crawler uses a list of known credentials gathered through credential dumping to guess passwords to accounts as it spreads throughout a network.","[G0035] Dragonfly: Dragonfly has dropped and executed tools used for password cracking, including Hydra and CrackMapExec.","[G1045] Salt Typhoon: Salt Typhoon has cracked passwords for accounts with weak encryption obtained from the configuration files of compromised network devices.","[G0037] FIN6: FIN6 has extracted password hashes from ntds.dit to crack offline.","[C0002] Night Dragon: During Night Dragon, threat actors used Cain & Abel to crack password hashes."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1110.003","technique_name":"Brute Force: Password Spraying","description":"Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following: * SSH (22/TCP) * Telnet (23/TCP) * FTP (21/TCP) * NetBIOS / SMB / Samba (139/TCP & 445/TCP) * LDAP (389/TCP) * Kerberos (88/TCP) * RDP / Terminal Services (3389/TCP) * HTTP/HTTP Management Services (80/TCP & 443/TCP) * MSSQL (1433/TCP) * Oracle (1521/TCP) * MySQL (3306/TCP) * VNC (5900/TCP) In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365. In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.","detection":"Monitor authentication logs for system and application login failures of Valid Accounts. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. Consider the following event IDs: * Domain Controllers: \"Audit Logon\" (Success & Failure) for event ID 4625. * Domain Controllers: \"Audit Kerberos Authentication Service\" (Success & Failure) for event ID 4771. * All systems: \"Audit Logon\" (Success & Failure) for event ID 4648.","procedures":["[G0125] HAFNIUM: HAFNIUM has gained initial access through password spray attacks.","[S0606] Bad Rabbit: Bad Rabbit’s infpub.dat file uses NTLM login credentials to brute force Windows machines.","[S0488] CrackMapExec: CrackMapExec can brute force credential authentication by using a supplied list of usernames and a single password.","[S0362] Linux Rabbit: Linux Rabbit brute forces SSH passwords in order to attempt to gain access and install its malware onto the server.","[C0051] APT28 Nearest Neighbor Campaign: During APT28 Nearest Neighbor Campaign, APT28 performed password-spray attacks against public facing services to validate credentials.","[G1030] Agrius: Agrius engaged in password spraying via SMB in victim environments.","[G1003] Ember Bear: Ember Bear has conducted password spraying against Outlook Web Access (OWA) infrastructure to identify valid user names and passwords.","[G0016] APT29: APT29 has conducted brute force password spray attacks.","[G1001] HEXANE: HEXANE has used password spraying attacks to obtain valid credentials.","[G0032] Lazarus Group: Lazarus Group malware attempts to connect to Windows shares for lateral movement by using a generated list of usernames, which center around permutations of the username Administrator, and weak passwords.","[G0064] APT33: APT33 has used password spraying to gain access to target systems.","[G0122] Silent Librarian: Silent Librarian has used collected lists of names and e-mail accounts to use in password spraying attacks against private sector targets.","[G0114] Chimera: Chimera has used multiple password spraying attacks against victim's remote services to obtain valid user and administrator accounts.","[S0413] MailSniper: MailSniper can be used for password spraying against Exchange and Office 365.","[G0077] Leafminer: Leafminer used a tool called Total SMB BruteForcer to perform internal password spraying.","[G0007] APT28: APT28 has used a brute-force/password-spray tooling that operated in two modes: in password-spraying mode it conducted approximately four authentication attempts per hour per targeted account over the course of several days or weeks. APT28 has also used a Kubernetes cluster to conduct distributed, large-scale password spray attacks."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1110.004","technique_name":"Brute Force: Credential Stuffing","description":"Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts. Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following: * SSH (22/TCP) * Telnet (23/TCP) * FTP (21/TCP) * NetBIOS / SMB / Samba (139/TCP & 445/TCP) * LDAP (389/TCP) * Kerberos (88/TCP) * RDP / Terminal Services (3389/TCP) * HTTP/HTTP Management Services (80/TCP & 443/TCP) * MSSQL (1433/TCP) * Oracle (1521/TCP) * MySQL (3306/TCP) * VNC (5900/TCP) In addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.","detection":"Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.","procedures":["[G0114] Chimera: Chimera has used credential stuffing against victim's remote services to obtain valid accounts.","[S0266] TrickBot: TrickBot uses brute-force attack against RDP with rdpscanDll module."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1111","technique_name":"Multi-Factor Authentication Interception","description":"Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users’ phones.","detection":"Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior. Similar to Input Capture, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.","procedures":["[S1104] SLOWPULSE: SLOWPULSE can log credentials on compromised Pulse Secure VPNs during the `DSAuth::AceAuthServer::checkUsernamePassword`ACE-2FA authentication procedure.","[S0018] Sykipot: Sykipot is known to contain functionality that enables targeting of smart card technologies to proxy authentication for connections to restricted network resources using detected hardware tokens.","[C0014] Operation Wocao: During Operation Wocao, threat actors used a custom collection method to intercept two-factor authentication soft tokens.","[G0094] Kimsuky: Kimsuky has used a proprietary tool to intercept one time passwords required for two-factor authentication.","[C0049] Leviathan Australian Intrusions: Leviathan abused compromised appliance access to collect multifactor authentication token values during Leviathan Australian Intrusions.","[G0114] Chimera: Chimera has registered alternate phone numbers for compromised users to intercept 2FA codes sent via SMS.","[G1044] APT42: APT42 has intercepted SMS-based one-time passwords and has set up two-factor authentication. Additionally, APT42 has used cloned or fake websites to capture MFA tokens.","[G1004] LAPSUS$: LAPSUS$ has replayed stolen session token and passwords to trigger simple-approval MFA prompts in hope of the legitimate user will grant necessary approval."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1187","technique_name":"Forced Authentication","description":"Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept. The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources. Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials. There are several different ways this can occur. Some specifics from in-the-wild use include: * A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. Template Injection). The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request. * A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\\\[remote address]\\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials.","detection":"Monitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems. If attempts are detected, then investigate endpoint data sources to find the root cause. For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located. Monitor creation and modification of .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered.","procedures":["[G0079] DarkHydrus: DarkHydrus used Template Injection to launch an authentication window for users to enter their credentials.","[G0035] Dragonfly: Dragonfly has gathered hashed user credentials over SMB using spearphishing attachments with external resource links and by modifying .LNK file icon resources to collect credentials from virtualized systems.","[S0634] EnvyScout: EnvyScout can use protocol handlers to coax the operating system to send NTLMv2 authentication responses to attacker-controlled infrastructure."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1212","technique_name":"Exploitation for Credential Access","description":"Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges. Such exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal. Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.","detection":"Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.","procedures":["[C0049] Leviathan Australian Intrusions: Leviathan exploited vulnerable network appliances during Leviathan Australian Intrusions, leading to the collection and exfiltration of valid credentials."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1528","technique_name":"Steal Application Access Token","description":"Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources. Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS). Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment. For example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container’s token and thereby gain access to Kubernetes API commands. Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges. In Azure, an adversary who compromises a resource with an attached Managed Identity, such as an Azure VM, can request short-lived tokens through the Azure Instance Metadata Service (IMDS). These tokens can then facilitate unauthorized actions or further access to other Azure services, bypassing typical credential-based authentication. Token theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token. Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.","detection":"Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a “High severity app permissions” policy that generates alerts if apps request high severity permissions or send permissions requests for too many users. Security analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app’s purpose, or apps with old “Last authorized” fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps. Administrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.","procedures":["[G0016] APT29: APT29 uses stolen tokens to access victim accounts, without needing a password.","[S0683] Peirates: Peirates gathers Kubernetes service account tokens using a variety of techniques.","[S0677] AADInternals: AADInternals can steal users’ access tokens via phishing emails containing malicious links.","[G0007] APT28: APT28 has used several malicious applications to steal user OAuth access tokens including applications masquerading as \"Google Defender\" \"Google Email Protection,\" and \"Google Scanner\" for Gmail users. They also targeted Yahoo users with applications masquerading as \"Delivery Service\" and \"McAfee Email Protection\".","[C0049] Leviathan Australian Intrusions: Leviathan abused access to compromised appliances to collect JSON Web Tokens (JWTs), used for creating virtual desktop sessions, during Leviathan Australian Intrusions."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1539","technique_name":"Steal Web Session Cookie","description":"An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website. Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols. There are several examples of malware targeting cookies from web browsers on the local system. Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on User Execution by tricking victims into running malicious JavaScript in their browser. There are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns. After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.","detection":"Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.","procedures":["[G1014] LuminousMoth: LuminousMoth has used an unnamed post-exploitation tool to steal cookies from the Chrome browser.","[G0094] Kimsuky: Kimsuky has used malware, such as TRANSLATEXT, to steal and exfiltrate browser cookies.","[G0034] Sandworm Team: Sandworm Team used information stealer malware to collect browser session cookies.","[S0531] Grandoreiro: Grandoreiro can steal the victim's cookies to use for duplicating the active session from another device.","[S1207] XLoader: XLoader can capture web session cookies and session information from victim browsers.","[G1015] Scattered Spider: Scattered Spider retrieves browser cookies via Raccoon Stealer.","[G0120] Evilnum: Evilnum can steal cookies and session information from browsers.","[S0492] CookieMiner: CookieMiner can steal Google Chrome and Apple Safari browser cookies from the victim’s machine.","[G1033] Star Blizzard: Star Blizzard has used EvilGinx to steal the session cookies of victims directed to phishing domains.","[G0030] Lotus Blossom: Lotus Blossom has used publicly-available tools to steal cookies from browsers such as Chrome.","[S1140] Spica: Spica has the ability to steal cookies from Chrome, Firefox, Opera, and Edge browsers.","[S0650] QakBot: QakBot has the ability to capture web session cookies.","[S0568] EVILNUM: EVILNUM can harvest cookies and upload them to the C2 server.","[S1201] TRANSLATEXT: TRANSLATEXT has exfiltrated updated cookies from Google, Naver, Kakao or Daum to the C2 server.","[S0631] Chaes: Chaes has used a script that extracts the web session cookie and sends it to the C2 server.","[S0657] BLUELIGHT: BLUELIGHT can harvest cookies from Internet Explorer, Edge, Chrome, and Naver Whale browsers.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 stole Chrome browser cookies by copying the Chrome profile directories of targeted users.","[S1146] MgBot: MgBot includes modules that can steal cookies from Firefox, Chrome, and Edge web browsers.","[S0658] XCSSET: XCSSET uses scp to access the ~/Library/Cookies/Cookies.binarycookies file.","[S0467] TajMahal: TajMahal has the ability to steal web session cookies from Internet Explorer, Netscape Navigator, FireFox and RealNetworks applications.","[S1111] DarkGate: DarkGate attempts to steal Opera cookies, if present, after terminating the related process.","[S1148] Raccoon Stealer: Raccoon Stealer attempts to steal cookies and related information in browser history.","[S1213] Lumma Stealer: Lumma Stealer has harvested cookies from various browsers.","[G1044] APT42: APT42 has used custom malware to steal login and cookie data from common browsers."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.001","technique_name":"Unsecured Credentials: Credentials In Files","description":"Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords. It is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.","detection":"While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.","procedures":["[S0117] XTunnel: XTunnel is capable of accessing locally stored passwords on victims.","[S0192] Pupy: Pupy can use Lazagne for harvesting credentials.","[S0367] Emotet: Emotet has been observed leveraging a module that retrieves passwords stored on a system for the current logged-on user.","[S0378] PoshC2: PoshC2 contains modules for searching for passwords in local and remote files.","[S0226] Smoke Loader: Smoke Loader searches for files named logins.json to parse for credentials.","[G0064] APT33: APT33 has used a variety of publicly available tools like LaZagne to gather credentials.","[S0331] Agent Tesla: Agent Tesla has the ability to extract credentials from configuration or support files.","[S0349] LaZagne: LaZagne can obtain credentials from chats, databases, mail, and WiFi.","[S0363] Empire: Empire can use various modules to search for files containing passwords.","[C0049] Leviathan Australian Intrusions: Leviathan gathered credentials stored in files related to Building Management System (BMS) operations during Leviathan Australian Intrusions.","[S0344] Azorult: Azorult can steal credentials in files belonging to common software such as Skype, Telegram, and Steam.","[S0583] Pysa: Pysa has extracted credentials from the password database before encrypting the files.","[G0117] Fox Kitten: Fox Kitten has accessed files to gain valid credentials.","[S0601] Hildegard: Hildegard has searched for SSH keys, Docker credentials, and Kubernetes service tokens.","[G0092] TA505: TA505 has used malware to gather credentials from FTP clients and Outlook.","[S0266] TrickBot: TrickBot can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP. Additionally, it searches for the \".vnc.lnk\" affix to steal VNC credentials.","[S0677] AADInternals: AADInternals can gather unsecured credentials for Azure AD services, such as Azure AD Connect, from a local machine.","[G1016] FIN13: FIN13 has obtained administrative credentials by browsing through local files on a compromised machine.","[G0119] Indrik Spider: Indrik Spider has searched files to obtain and exfiltrate credentials.","[G0022] APT3: APT3 has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.","[G0077] Leafminer: Leafminer used several tools for retrieving login and password information, including LaZagne.","[S0262] QuasarRAT: QuasarRAT can obtain passwords from FTP clients.","[S0067] pngdowner: If an initial connectivity check fails, pngdowner attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access.","[G0094] Kimsuky: Kimsuky has used tools that are capable of obtaining credentials from saved mail.","[S0089] BlackEnergy: BlackEnergy has used a plug-in to gather credentials stored in files on the host by various software programs, including The Bat! email client, Outlook, and Windows Credential Store.","[S0283] jRAT: jRAT can capture passwords from common chat applications such as MSN Messenger, AOL, Instant Messenger, and and Google Talk.","[G1039] RedCurl: RedCurl used LaZagne to obtain passwords in files.","[G0049] OilRig: OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.","[G1003] Ember Bear: Ember Bear has dumped configuration settings in accessed IP cameras including plaintext credentials.","[S1183] StrelaStealer: StrelaStealer searches for and if found collects the contents of files such as `logins.json` and `key4.db` in the `$APPDATA%\\Thunderbird\\Profiles\\` directory, associated with the Thunderbird email application.","[G0139] TeamTNT: TeamTNT has searched for unsecured AWS credentials and Docker API credentials.","[G0069] MuddyWater: MuddyWater has run a tool that steals passwords saved in victim email.","[G1015] Scattered Spider: Scattered Spider Spider searches for credential storage documentation on a compromised host."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.002","technique_name":"Unsecured Credentials: Credentials in Registry","description":"Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons. Example commands to find Registry keys related to password information: * Local Machine Hive: reg query HKLM /f password /t REG_SZ /s * Current User Hive: reg query HKCU /f password /t REG_SZ /s","detection":"Monitor processes for applications that can be used to query the Registry, such as Reg, and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.","procedures":["[S0075] Reg: Reg may be used to find credentials in the Windows Registry.","[S0194] PowerSploit: PowerSploit has several modules that search the Windows Registry for stored credentials: Get-UnattendedInstallFile, Get-Webconfig, Get-ApplicationHost, Get-SiteListPassword, Get-CachedGPPPassword, and Get-RegistryAutoLogon.","[G0050] APT32: APT32 used Outlook Credential Dumper to harvest credentials stored in Windows registry.","[S1022] IceApple: IceApple can harvest credentials from local and remote host registries.","[S1183] StrelaStealer: StrelaStealer enumerates the registry key `HKCU\\SOFTWARE\\Microsoft\\Office\\16.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676\\` to identify the values for \"IMAP User,\" \"IMAP Server,\" and \"IMAP Password\" associated with the Outlook email application.","[S0266] TrickBot: TrickBot has retrieved PuTTY credentials by querying the Software\\SimonTatham\\Putty\\Sessions registry key","[S0476] Valak: Valak can use the clientgrabber module to steal e-mail credentials from the Registry.","[G1039] RedCurl: RedCurl used LaZagne to obtain passwords in the Registry.","[S0331] Agent Tesla: Agent Tesla has the ability to extract credentials from the Registry."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.003","technique_name":"Unsecured Credentials: Bash History","description":"Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.","detection":"Monitoring when the user's .bash_history is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like cat ~/.bash_history.","procedures":["[S0599] Kinsing: Kinsing has searched bash_history for credentials."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.004","technique_name":"Unsecured Credentials: Private Keys","description":"Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:&#92;Users&#92;(username)&#92;.ssh&#92; on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates. When a device is registered to Entra ID, a device key and a transport key are generated and used to verify the device’s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device. On network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. Some private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.","detection":"Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.","procedures":["[S0409] Machete: Machete has scanned and looked for cryptographic keys and certificate file extensions.","[S0002] Mimikatz: Mimikatz's CRYPTO::Extract module can extract keys by interacting with Windows cryptographic application programming interface (API) functions.","[C0014] Operation Wocao: During Operation Wocao, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store.","[S0599] Kinsing: Kinsing has searched for private keys.","[S0601] Hildegard: Hildegard has searched for private keys in .ssh.","[S1060] Mafalda: Mafalda can collect a Chrome encryption key used to protect browser cookies.","[G1015] Scattered Spider: Scattered Spider enumerate and exfiltrate code-signing certificates from a compromised host.","[S1196] Troll Stealer: Troll Stealer collects all data in victim `.ssh` folders by creating a compressed copy that is subsequently exfiltrated to command and control infrastructure. Troll Stealer also collects key information associated with the Government Public Key Infrastructure (GPKI) service for South Korean government information systems.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 obtained PKI keys, certificate files, and the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates.","[S0661] FoggyWeb: FoggyWeb can retrieve token signing certificates and token decryption certificates from a compromised AD FS server.","[G0139] TeamTNT: TeamTNT has searched for unsecured SSH keys.","[S0363] Empire: Empire can use modules like Invoke-SessionGopher to extract private key and session information.","[S0677] AADInternals: AADInternals can gather encryption keys from Azure AD services such as ADSync and Active Directory Federated Services servers.","[G0106] Rocke: Rocke has used SSH private keys on the infected machine to spread its coinminer throughout a network.","[S0377] Ebury: Ebury has intercepted unencrypted private keys as well as private key pass-phrases.","[G1017] Volt Typhoon: Volt Typhoon has accessed a Local State file that contains the AES key used to encrypt passwords stored in the Chrome browser.","[S0283] jRAT: jRAT can steal keys for VPNs and cryptocurrency wallets."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.005","technique_name":"Unsecured Credentials: Cloud Instance Metadata API","description":"Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data. Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise. If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API. The de facto standard across cloud service providers is to host the Instance Metadata API at http[:]//169.254.169.254.","detection":"Monitor access to the Instance Metadata API and look for anomalous queries. It may be possible to detect adversary use of credentials they have obtained such as in Valid Accounts.","procedures":["[G0139] TeamTNT: TeamTNT has queried the AWS instance metadata service for credentials.","[S0683] Peirates: Peirates can query the query AWS and GCP metadata APIs for secrets.","[S0601] Hildegard: Hildegard has queried the Cloud Instance Metadata API for cloud credentials."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.006","technique_name":"Unsecured Credentials: Group Policy Preferences","description":"Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts. These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public). The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files: * Metasploit’s post exploitation module: post/windows/gather/credentials/gpp * Get-GPPPassword * gpprefdecrypt.py On the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: dir /s * .xml","detection":"Monitor for attempts to access SYSVOL that involve searching for XML files. Deploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors.","procedures":["[S0692] SILENTTRINITY: SILENTTRINITY has a module that can extract cached GPP passwords.","[S0194] PowerSploit: PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences.","[G0064] APT33: APT33 has used a variety of publicly available tools like Gpppassword to gather credentials.","[G0102] Wizard Spider: Wizard Spider has used PowerShell cmdlets `Get-GPPPassword` and `Find-GPOPassword` to find unsecured credentials in a compromised network group policy."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.007","technique_name":"Unsecured Credentials: Container API","description":"Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components. An adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment. An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.","detection":"Establish centralized logging for the activity of container and Kubernetes cluster components. Monitor logs for actions that could be taken to gather credentials to container and cloud infrastructure, including the use of discovery API calls by new or unexpected users and APIs that access Docker logs. It may be possible to detect adversary use of credentials they have obtained such as in Valid Accounts.","procedures":["[S0683] Peirates: Peirates can query the Kubernetes API for secrets."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.008","technique_name":"Unsecured Credentials: Chat Messages","description":"Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels. Rather than accessing the stored chat logs (i.e., Credentials In Files), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation .","detection":null,"procedures":["[G1004] LAPSUS$: LAPSUS$ has targeted various collaboration tools like Slack, Teams, JIRA, Confluence, and others to hunt for exposed credentials to support privilege escalation and lateral movement."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.001","technique_name":"Credentials from Password Stores: Keychain","description":"Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. Keychains can be viewed and edited through the Keychain Access application or using the command-line utility security. Keychain files are located in ~/Library/Keychains/, /Library/Keychains/, and /Network/Library/Keychains/. Adversaries may gather user credentials from Keychain storage/memory. For example, the command security dump-keychain –d will dump all Login Keychain credentials from ~/Library/Keychains/login.keychain-db. Adversaries may also directly read Login Keychain credentials from the ~/Library/Keychains/login.keychain file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.","detection":"Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.","procedures":["[S1185] LightSpy: LightSpy performs an in-memory keychain query via `SecItemCopyMatching()` then formats the retrieved data as a JSON blob for exfiltration.","[S0690] Green Lambert: Green Lambert can use Keychain Services API functions to find and collect passwords, such as `SecKeychainFindInternetPassword` and `SecKeychainItemCopyAttributesAndData`.","[S0279] Proton: Proton gathers credentials in files for keychains.","[S1016] MacMa: MacMa can dump credentials from the macOS keychain.","[S0349] LaZagne: LaZagne can obtain credentials from macOS Keychains.","[S0274] Calisto: Calisto collects Keychain storage data and copies those passwords/tokens to a file.","[S1153] Cuckoo Stealer: Cuckoo Stealer can capture files from a targeted user's keychain directory.","[S0278] iKitten: iKitten collects the keychains on the system."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.002","technique_name":"Credentials from Password Stores: Securityd Memory","description":"An adversary with root access may gather credentials by reading `securityd`’s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization. A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user’s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc. In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. Apple’s `securityd` utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.","detection":"Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.","procedures":["[S0276] Keydnap: Keydnap uses the keychaindump project to read securityd memory."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.003","technique_name":"Credentials from Password Stores: Credentials from Web Browsers","description":"Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers. For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim’s cached logon credentials as the decryption key. Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager. Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials. After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).","detection":"Identify web browser files that contain credentials such as Google Chrome’s Login Data database file: AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data. Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).","procedures":["[S0385] njRAT: njRAT has a module that steals passwords saved in victim web browsers.","[S0089] BlackEnergy: BlackEnergy has used a plug-in to gather credentials from web browsers including FireFox, Google Chrome, and Internet Explorer.","[S0132] H1N1: H1N1 dumps usernames and passwords from Firefox, Internet Explorer, and Outlook.","[S1122] Mispadu: Mispadu can steal credentials from Google Chrome.","[S0434] Imminent Monitor: Imminent Monitor has a PasswordRecoveryPacket module for recovering browser passwords.","[S0365] Olympic Destroyer: Olympic Destroyer contains a module that tries to obtain stored credentials from web browsers.","[S0528] Javali: Javali can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge.","[S0492] CookieMiner: CookieMiner can steal saved usernames and passwords in Chrome as well as credit card credentials.","[G0040] Patchwork: Patchwork dumped the login data database from \\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data.","[S1042] SUGARDUMP: SUGARDUMP variants have harvested credentials from browsers such as Firefox, Chrome, Opera, and Edge.","[S1213] Lumma Stealer: Lumma Stealer has gathered credential and other information from multiple browsers.","[G0096] APT41: APT41 used BrowserGhost, a tool designed to obtain credentials from browsers, to retrieve information from password stores.","[S0670] WarzoneRAT: WarzoneRAT has the capability to grab passwords from numerous web browsers as well as from Outlook and Thunderbird email clients.","[S1201] TRANSLATEXT: TRANSLATEXT has stolen credentials stored in Chrome.","[G0128] ZIRCONIUM: ZIRCONIUM has used a tool to steal credentials from installed web browsers including Microsoft Internet Explorer and Google Chrome.","[S0356] KONNI: KONNI can steal profiles (containing credential information) from Firefox, Chrome, and Opera.","[G1026] Malteiro: Malteiro has stolen credentials stored in the victim’s browsers via software tool NirSoft WebBrowserPassView.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 stole users' saved passwords from Chrome.","[S0240] ROKRAT: ROKRAT can steal credentials stored in Web browsers by querying the sqlite database.","[S0262] QuasarRAT: QuasarRAT can obtain passwords from common web browsers.","[G0022] APT3: APT3 has used tools to dump passwords from browsers.","[S0349] LaZagne: LaZagne can obtain credentials from web browsers such as Google Chrome, Internet Explorer, and Firefox.","[G0064] APT33: APT33 has used a variety of publicly available tools like LaZagne to gather credentials.","[S0153] RedLeaves: RedLeaves can gather browser usernames and passwords.","[G0038] Stealth Falcon: Stealth Falcon malware gathers passwords from multiple sources, including Internet Explorer, Firefox, and Chrome.","[S1146] MgBot: MgBot includes modules for stealing credentials from various browsers and applications, including Chrome, Opera, Firefox, Foxmail, QQBrowser, FileZilla, and WinSCP.","[S0436] TSCookie: TSCookie has the ability to steal saved passwords from the Internet Explorer, Edge, Firefox, and Chrome browsers.","[S0226] Smoke Loader: Smoke Loader searches for credentials stored from web browsers.","[S0331] Agent Tesla: Agent Tesla can gather credentials from a number of browsers.","[S0192] Pupy: Pupy can use Lazagne for harvesting credentials.","[S0409] Machete: Machete collects stored credentials from several web browsers.","[S0344] Azorult: Azorult can steal credentials from the victim's browser.","[S0113] Prikormka: A module in Prikormka gathers logins and passwords stored in applications on the victims, including Google Chrome, Mozilla Firefox, and several other browsers.","[S0094] Trojan.Karagany: Trojan.Karagany can steal data and credentials from browsers.","[S1156] Manjusaka: Manjusaka gathers credentials from Chromium-based browsers.","[S0526] KGH_SPY: KGH_SPY has the ability to steal data from the Chrome, Edge, Firefox, Thunderbird, and Opera browsers.","[G0077] Leafminer: Leafminer used several tools for retrieving login and password information, including LaZagne.","[G0067] APT37: APT37 has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.","[S0050] CosmicDuke: CosmicDuke collects user credentials, including passwords, for various programs including Web browsers.","[G0034] Sandworm Team: Sandworm Team's CredRaptor tool can collect saved passwords from various internet browsers.","[S0138] OLDBAIT: OLDBAIT collects credentials from Internet Explorer, Mozilla Firefox, and Eudora.","[S0629] RainyDay: RainyDay can use tools to collect credentials from web browsers.","[S0002] Mimikatz: Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DPAPI.","[S0367] Emotet: Emotet has been observed dropping browser password grabber modules.","[S1148] Raccoon Stealer: Raccoon Stealer collects passwords, cookies, and autocomplete information from various popular web browsers.","[G0069] MuddyWater: MuddyWater has run tools including Browser64 to steal passwords saved in victim web browsers.","[S0283] jRAT: jRAT can capture passwords from common web browsers such as Internet Explorer, Google Chrome, and Firefox.","[S0692] SILENTTRINITY: SILENTTRINITY can collect clear text web credentials for Internet Explorer/Edge.","[S0198] NETWIRE: NETWIRE has the ability to steal credentials from web browsers including Internet Explorer, Opera, Yandex, and Chrome.","[S0530] Melcoz: Melcoz has the ability to steal credentials from web browsers.","[S1207] XLoader: XLoader can gather credentials from several web browsers.","[G1004] LAPSUS$: LAPSUS$ has obtained passwords and session tokens with the use of the Redline password stealer.","[S0657] BLUELIGHT: BLUELIGHT can collect passwords stored in web browers, including Internet Explorer, Edge, Chrome, and Naver Whale.","[S0144] ChChes: ChChes steals credentials stored inside Internet Explorer.","[S0279] Proton: Proton gathers credentials for Google Chrome.","[G1001] HEXANE: HEXANE has used a Mimikatz-based tool and a PowerShell script to steal passwords from Google Chrome.","[G0092] TA505: TA505 has used malware to gather credentials from Internet Explorer.","[G0021] Molerats: Molerats used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims.","[S0130] Unknown Logger: Unknown Logger is capable of stealing usernames and passwords from browsers on the victim machine.","[G0130] Ajax Security Team: Ajax Security Team has used FireMalv custom-developed malware, which collected passwords from the Firefox browser storage.","[G0100] Inception: Inception used a browser plugin to steal passwords and sessions from Internet Explorer, Chrome, Opera, Firefox, Torch, and Yandex.","[S0093] Backdoor.Oldrea: Some Backdoor.Oldrea samples contain a publicly available Web browser password recovery tool.","[G1017] Volt Typhoon: Volt Typhoon has targeted network administrator browser data including browsing history and stored credentials.","[G0094] Kimsuky: Kimsuky has used browser extensions including Google Chrome to steal passwords and cookies from browsers. Kimsuky has also used Nirsoft's WebBrowserPassView tool to dump the passwords obtained from victims.","[S0363] Empire: Empire can use modules that extract passwords from common web browsers such as Firefox and Chrome.","[S0161] XAgentOSX: XAgentOSX contains the getFirefoxPassword function to attempt to locate Firefox passwords.","[S0681] Lizar: Lizar has a module to collect usernames and passwords stored in browsers.","[S0048] PinchDuke: PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, and Internet Explorer.","[G0049] OilRig: OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access. OilRig has also used tool named PICKPOCKET to dump passwords from web browsers.","[G1039] RedCurl: RedCurl used LaZagne to obtain passwords from web browsers.","[S0387] KeyBoy: KeyBoy attempts to collect passwords from browsers.","[S0531] Grandoreiro: Grandoreiro can steal cookie data and credentials from Google Chrome.","[S0650] QakBot: QakBot has collected usernames and passwords from Firefox and Chrome.","[S0115] Crimson: Crimson contains a module to steal credentials from Web browsers on the victim machine.","[G0037] FIN6: FIN6 has used the Stealer One credential stealer to target web browsers.","[S0266] TrickBot: TrickBot can obtain passwords stored in files from web browsers such as Chrome, Firefox, Internet Explorer, and Microsoft Edge, sometimes using esentutl.","[S0435] PLEAD: PLEAD can harvest saved credentials from browsers such as Google Chrome, Microsoft Internet Explorer, and Mozilla Firefox.","[S0428] PoetRAT: PoetRAT has used a Python tool named Browdec.exe to steal browser credentials.","[S0631] Chaes: Chaes can steal login credentials and stored financial information from the browser.","[S0484] Carberp: Carberp's passw.plug plugin can gather passwords saved in Opera, Internet Explorer, Safari, Firefox, and Chrome.","[G1044] APT42: APT42 has used custom malware to steal credentials.","[S0251] Zebrocy: Zebrocy has the capability to upload dumper tools that extract credentials from web browsers and store them in database files.","[C0044] Juicy Mix: During Juicy Mix, OilRig used the CDumper (Chrome browser) and EDumper (Edge browser) to collect credentials.","[S0447] Lokibot: Lokibot has demonstrated the ability to steal credentials from multiple applications and data sources including Safari and the Chromium and Mozilla Firefox-based web browsers."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.004","technique_name":"Credentials from Password Stores: Windows Credential Manager","description":"Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults). The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker. Credential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\`. The encryption key can be found in a file named Policy.vpol, typically located in the same folder as the credentials. Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms. vaultcmd.exe is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as CredEnumerateA, may also be absued to list credentials managed by the Credential Manager. Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running rundll32.exe keymgr.dll KRShowKeyMgr then selecting the “Back up...” button on the “Stored User Names and Passwords” GUI. Password recovery tools may also obtain plain text passwords from the Credential Manager.","detection":"Monitor process and command-line parameters of vaultcmd.exe for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., vaultcmd /listcreds:“Windows Credentials”). Consider monitoring API calls such as CredEnumerateA that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, %Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\, for suspicious activity.","procedures":["[G0049] OilRig: OilRig has used credential dumping tool named VALUEVAULT to steal credentials from the Windows Credential Manager.","[G0038] Stealth Falcon: Stealth Falcon malware gathers passwords from the Windows Credential Vault.","[S0476] Valak: Valak can use a .NET compiled module named exchgrabber to enumerate credentials from the Credential Manager.","[G0010] Turla: Turla has gathered credentials from the Windows Credential Manager tool.","[S0349] LaZagne: LaZagne can obtain credentials from Vault files.","[S0681] Lizar: Lizar has a plugin that can retrieve credentials from Internet Explorer and Microsoft Edge using `vaultcmd.exe` and another that can collect RDP access credentials using the `CredEnumerateW` function.","[S0240] ROKRAT: ROKRAT can steal credentials by leveraging the Windows Vault mechanism.","[S0629] RainyDay: RainyDay can use the QuarksPwDump tool to obtain local passwords and domain cached credentials.","[S0692] SILENTTRINITY: SILENTTRINITY can gather Windows Vault credentials.","[C0044] Juicy Mix: During Juicy Mix, OilRig used a Windows Credential Manager stealer for credential access.","[S0002] Mimikatz: Mimikatz contains functionality to acquire credentials from the Windows Credential Manager.","[S0526] KGH_SPY: KGH_SPY can collect credentials from the Windows Credential Manager.","[S0194] PowerSploit: PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Windows vault credential objects.","[G0102] Wizard Spider: Wizard Spider has used PowerShell cmdlet `Invoke-WCMDump` to enumerate Windows credentials in the Credential Manager in a compromised network."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.005","technique_name":"Credentials from Password Stores: Password Managers","description":"Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk. Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access. Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.","detection":"Consider monitoring API calls, file read events, and processes for suspicious activity that could indicate searching in process memory of password managers. Consider monitoring file reads surrounding known password manager applications.","procedures":["[C0014] Operation Wocao: During Operation Wocao, threat actors accessed and collected credentials from password managers.","[G0027] Threat Group-3390: Threat Group-3390 obtained a KeePass database from a compromised host.","[G0119] Indrik Spider: Indrik Spider has accessed and exported passwords from password managers.","[G0117] Fox Kitten: Fox Kitten has used scripts to access credential information from the KeePass database.","[S0652] MarkiRAT: MarkiRAT can gather information from the Keepass password manager.","[S0279] Proton: Proton gathers credentials in files for 1password.","[S0266] TrickBot: TrickBot can steal passwords from the KeePass open source password manager.","[G1004] LAPSUS$: LAPSUS$ has accessed local password managers and databases to obtain further credentials from a compromised network."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.006","technique_name":"Credentials from Password Stores: Cloud Secrets Management Stores","description":"Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault. Secrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables. If an adversary is able to gain sufficient privileges in a cloud environment – for example, by obtaining the credentials of high-privileged Cloud Accounts or compromising a service that has permission to retrieve secrets – they may be able to request secrets from the secrets manager. This can be accomplished via commands such as `get-secret-value` in AWS, `gcloud secrets describe` in GCP, and `az key vault secret show` in Azure. **Note:** this technique is distinct from Cloud Instance Metadata API in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.","detection":null,"procedures":["[G0125] HAFNIUM: HAFNIUM has moved laterally from on-premises environments to steal passwords from Azure key vaults.","[S1091] Pacu: Pacu can retrieve secrets from the AWS Secrets Manager via the enum_secrets module."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.001","technique_name":"Modify Authentication Process: Domain Controller Authentication","description":"Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.","detection":"Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access).","procedures":["[G0114] Chimera: Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential.","[S0007] Skeleton Key: Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.002","technique_name":"Modify Authentication Process: Password Filter DLL","description":"Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.","detection":"Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.","procedures":["[S0125] Remsec: Remsec harvests plain-text credentials as a password filter registered on domain controllers.","[G0049] OilRig: OilRig has registered a password filter DLL in order to drop malware.","[G0041] Strider: Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.003","technique_name":"Modify Authentication Process: Pluggable Authentication Modules","description":"Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow. Adversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials. Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.","detection":"Monitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).","procedures":["[S0377] Ebury: Ebury can deactivate PAM modules to tamper with the sshd configuration.","[S0468] Skidmap: Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.004","technique_name":"Modify Authentication Process: Network Device Authentication","description":"Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices. Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password. The modification includes a specific password which is implanted in the operating system image via the patch. Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.","detection":"Consider verifying the checksum of the operating system file and verifying the image of the operating system in memory. Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.","procedures":["[S1104] SLOWPULSE: SLOWPULSE can modify LDAP and two factor authentication flows by inspecting login credentials and forcing successful authentication if the provided password matches a chosen backdoor password.","[S0519] SYNful Knock: SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.005","technique_name":"Modify Authentication Process: Reversible Encryption","description":"An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it. If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components: 1. Encrypted password (G$RADIUSCHAP) from the Active Directory user-structure userParameters 2. 16 byte randomly-generated value (G$RADIUSCHAPKEY) also from userParameters 3. Global LSA secret (G$MSRADIUSCHAPKEY) 4. Static key hardcoded in the Remote Access Subauthentication DLL (RASSFM.DLL) With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value. An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to Set-ADUser -AllowReversiblePasswordEncryption $true.","detection":"Monitor property changes in Group Policy: Computer Configuration\\Windows Settings\\Security Settings\\Account Policies\\Password Policy\\Store passwords using reversible encryption. By default, the property should be set to Disabled. Monitor command-line usage for -AllowReversiblePasswordEncryption $true or other actions that could be related to malicious tampering of user settings (i.e. Group Policy Modification). Furthermore, consider monitoring and/or blocking suspicious execution of Active Directory PowerShell modules, such as Set-ADUser and Set-ADAccountControl, that change account configurations. Monitor Fine-Grained Password Policies and regularly audit user accounts and group settings.","procedures":null,"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.006","technique_name":"Modify Authentication Process: Multi-Factor Authentication","description":"Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts. Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality. For example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.","detection":null,"procedures":["[G1015] Scattered Spider: After compromising user accounts, Scattered Spider registers their own MFA tokens.","[S1104] SLOWPULSE: SLOWPULSE can insert malicious logic to bypass RADIUS and ACE two factor authentication (2FA) flows if a designated attacker-supplied password is provided.","[S0677] AADInternals: The AADInternals `Set-AADIntUserMFA` command can be used to disable MFA for a specified user."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.007","technique_name":"Modify Authentication Process: Hybrid Identity","description":"Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts. Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID: * Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloud * Pass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory * Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra ID AD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges. By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials. In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies. In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.","detection":null,"procedures":["[S0677] AADInternals: AADInternals can inject a malicious DLL (`PTASpy`) into the `AzureADConnectAuthenticationAgentService` to backdoor Azure AD Pass-Through Authentication.","[G0016] APT29: APT29 has edited the `Microsoft.IdentityServer.Servicehost.exe.config` file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.008","technique_name":"Modify Authentication Process: Network Provider DLL","description":"Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening. Adversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`. Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function. Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.","detection":null,"procedures":null,"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.009","technique_name":"Modify Authentication Process: Conditional Access Policies","description":"Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource. For example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication. In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested. These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. By modifying conditional access policies, such as adding additional trusted IP ranges, removing Multi-Factor Authentication requirements, or allowing additional Unused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.","detection":null,"procedures":["[G1015] Scattered Spider: Scattered Spider has added additional trusted locations to Azure AD conditional access policies."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1557.001","technique_name":"Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay","description":"By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv1/v2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response. Several tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder.","detection":"Monitor HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient for changes to the \"EnableMulticast\" DWORD value. A value of “0” indicates LLMNR is disabled. Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy. Deploy an LLMNR/NBT-NS spoofing detection tool. Monitoring of Windows event logs for event IDs 4697 and 7045 may help in detecting successful relay techniques.","procedures":["[S0357] Impacket: Impacket modules like ntlmrelayx and smbrelayx can be used in conjunction with Network Sniffing and LLMNR/NBT-NS Poisoning and SMB Relay to gather NetNTLM credentials for Brute Force or relay attacks that can gain code execution.","[S0363] Empire: Empire can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.","[S0378] PoshC2: PoshC2 can use Inveigh to conduct name service poisoning for credential theft and associated relay attacks.","[G0032] Lazarus Group: Lazarus Group executed Responder using the command [Responder file path] -i [IP address] -rPv on a compromised host to harvest credentials and move laterally.","[G0102] Wizard Spider: Wizard Spider has used the Invoke-Inveigh PowerShell cmdlets, likely for name service poisoning.","[S0192] Pupy: Pupy can sniff plaintext network credentials and use NBNS Spoofing to poison name services.","[S0174] Responder: Responder is used to poison name services to gather hashes and credentials from systems within a local network."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1557.002","technique_name":"Adversary-in-the-Middle: ARP Cache Poisoning","description":"Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address. Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache. An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment. The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache. Adversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.","detection":"Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. Consider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.","procedures":["[G0003] Cleaver: Cleaver has used custom tools to facilitate ARP cache poisoning.","[G1014] LuminousMoth: LuminousMoth has used ARP spoofing to redirect a compromised machine to an actor-controlled website."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1557.003","technique_name":"Adversary-in-the-Middle: DHCP Spoofing","description":"Adversaries may redirect network traffic to adversary-owned systems by spoofing Dynamic Host Configuration Protocol (DHCP) traffic and acting as a malicious DHCP server on the victim network. By achieving the adversary-in-the-middle (AiTM) position, adversaries may collect network communications, including passed credentials, especially those sent over insecure, unencrypted protocols. This may also enable follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. DHCP is based on a client-server model and has two functionalities: a protocol for providing network configuration settings from a DHCP server to a client and a mechanism for allocating network addresses to clients. The typical server-client interaction is as follows: 1. The client broadcasts a `DISCOVER` message. 2. The server responds with an `OFFER` message, which includes an available network address. 3. The client broadcasts a `REQUEST` message, which includes the network address offered. 4. The server acknowledges with an `ACK` message and the client receives the network configuration parameters. Adversaries may spoof as a rogue DHCP server on the victim network, from which legitimate hosts may receive malicious network configurations. For example, malware can act as a DHCP server and provide adversary-owned DNS servers to the victimized computers. Through the malicious network configurations, an adversary may achieve the AiTM position, route client traffic through adversary-controlled systems, and collect information from the client network. DHCPv6 clients can receive network configuration information without being assigned an IP address by sending a INFORMATION-REQUEST (code 11) message to the All_DHCP_Relay_Agents_and_Servers multicast address. Adversaries may use their rogue DHCP server to respond to this request message with malicious network configurations. Rather than establishing an AiTM position, adversaries may also abuse DHCP spoofing to perform a DHCP exhaustion attack (i.e, Service Exhaustion Flood) by generating many broadcast DISCOVER messages to exhaust a network’s DHCP allocation pool.","detection":"Monitor network traffic for suspicious/malicious behavior involving DHCP, such as changes in DNS and/or gateway parameters. Additionally, monitor Windows logs for Event IDs (EIDs) 1341, 1342, 1020 and 1063, which specify that the IP allocations are low or have run out; these EIDs may indicate a denial of service attack.","procedures":null,"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1557.004","technique_name":"Adversary-in-the-Middle: Evil Twin","description":"Adversaries may host seemingly genuine Wi-Fi access points to deceive users into connecting to malicious networks as a way of supporting follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or Input Capture. By using a Service Set Identifier (SSID) of a legitimate Wi-Fi network, fraudulent Wi-Fi access points may trick devices or users into connecting to malicious Wi-Fi networks. Adversaries may provide a stronger signal strength or block access to Wi-Fi access points to coerce or entice victim devices into connecting to malicious networks. A Wi-Fi Pineapple – a network security auditing and penetration testing tool – may be deployed in Evil Twin attacks for ease of use and broader range. Custom certificates may be used in an attempt to intercept HTTPS traffic. Similarly, adversaries may also listen for client devices sending probe requests for known or previously connected networks (Preferred Network Lists or PNLs). When a malicious access point receives a probe request, adversaries can respond with the same SSID to imitate the trusted, known network. Victim devices are led to believe the responding access point is from their PNL and initiate a connection to the fraudulent network. Upon logging into the malicious Wi-Fi access point, a user may be directed to a fake login page or captive portal webpage to capture the victim’s credentials. Once a user is logged into the fraudulent Wi-Fi network, the adversary may able to monitor network activity, manipulate data, or steal additional credentials. Locations with high concentrations of public Wi-Fi access, such as airports, coffee shops, or libraries, may be targets for adversaries to set up illegitimate Wi-Fi access points.","detection":null,"procedures":["[G0007] APT28: APT28 has used a Wi-Fi Pineapple to set up Evil Twin Wi-Fi Poisoning for the purposes of capturing victim credentials or planting espionage-oriented malware."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1558.001","technique_name":"Steal or Forge Kerberos Tickets: Golden Ticket","description":"Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket. Golden tickets enable adversaries to generate authentication material for any account in Active Directory. Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS. The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets. The KRBTGT password hash may be obtained using OS Credential Dumping and privileged access to a domain controller.","detection":"Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within TGTs, and TGS requests without preceding TGT requests. Monitor the lifetime of TGT tickets for values that differ from the default domain duration. Monitor for indications of Pass the Ticket being used to move laterally.","procedures":["[G0004] Ke3chang: Ke3chang has used Mimikatz to generate Kerberos golden tickets.","[S0363] Empire: Empire can leverage its implementation of Mimikatz to obtain and use golden tickets.","[S0002] Mimikatz: Mimikatz's kerberos module can create golden tickets.","[S0633] Sliver: Sliver incorporates the Rubeus framework to allow for Kerberos ticket manipulation, specifically for forging Kerberos Golden Tickets.","[S1071] Rubeus: Rubeus can forge a ticket-granting ticket."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1558.002","technique_name":"Steal or Forge Kerberos Tickets: Silver Ticket","description":"Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets. Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult. Password hashes for target services may be obtained using OS Credential Dumping or Kerberoasting.","detection":"Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4634, 4672). Monitor for unexpected processes interacting with lsass.exe. Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.","procedures":["[S1071] Rubeus: Rubeus can create silver tickets.","[S0677] AADInternals: AADInternals can be used to forge Kerberos tickets using the password hash of the AZUREADSSOACC account.","[S0002] Mimikatz: Mimikatz's kerberos module can create silver tickets.","[S0363] Empire: Empire can leverage its implementation of Mimikatz to obtain and use silver tickets."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1558.003","technique_name":"Steal or Forge Kerberos Tickets: Kerberoasting","description":"Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force. Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service). Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials. This same behavior could be executed using service tickets captured from network traffic. Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.","detection":"Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).","procedures":["[S1071] Rubeus: Rubeus can use the `KerberosRequestorSecurityToken.GetRequest` method to request kerberoastable service tickets.","[S0357] Impacket: Impacket modules like GetUserSPNs can be used to get Service Principal Names (SPNs) for user accounts. The output is formatted to be compatible with cracking tools like John the Ripper and Hashcat.","[S0363] Empire: Empire uses PowerSploit's Invoke-Kerberoast to request service tickets and return crackable ticket hashes.","[C0049] Leviathan Australian Intrusions: Leviathan used Kerberoasting techniques during Leviathan Australian Intrusions.","[G0102] Wizard Spider: Wizard Spider has used Rubeus, MimiKatz Kerberos module, and the Invoke-Kerberoast cmdlet to steal AES hashes.","[C0014] Operation Wocao: During Operation Wocao, threat actors used PowerSploit's `Invoke-Kerberoast` module to request encrypted service tickets and bruteforce the passwords of Windows service accounts offline.","[S0692] SILENTTRINITY: SILENTTRINITY contains a module to conduct Kerberoasting.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 obtained Ticket Granting Service (TGS) tickets for Active Directory Service Principle Names to crack offline.","[S0194] PowerSploit: PowerSploit's Invoke-Kerberoast module can request service tickets and return crackable ticket hashes.","[G0046] FIN7: FIN7 has used Kerberoasting PowerShell commands such as, `Invoke-Kerberoast` for credential access and to enable lateral movement.","[G0119] Indrik Spider: Indrik Spider has conducted Kerberoasting attacks using a module from GitHub.","[S1063] Brute Ratel C4: Brute Ratel C4 can decode Kerberos 5 tickets and convert it to hashcat format for subsequent cracking."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1558.004","technique_name":"Steal or Forge Kerberos Tickets: AS-REP Roasting","description":"Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by Password Cracking Kerberos messages. Preauthentication offers protection against offline Password Cracking. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user’s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user’s password. For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline Password Cracking attacks similarly to Kerberoasting and expose plaintext credentials. An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like PowerShell with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. Cracked hashes may enable Persistence, Privilege Escalation, and Lateral Movement via access to Valid Accounts.","detection":"Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4768 and 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17], pre-authentication not required [Type: 0x0]).","procedures":["[S1071] Rubeus: Rubeus can reveal the credentials of accounts that have Kerberos pre-authentication disabled through AS-REP roasting."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1558.005","technique_name":"Steal or Forge Kerberos Tickets: Ccache Files","description":"Adversaries may attempt to steal Kerberos tickets stored in credential cache files (or ccache). These files are used for short term storage of a user's active session credentials. The ccache file is created upon user authentication and allows for access to multiple services without the user having to re-enter credentials. The /etc/krb5.conf configuration file and the KRB5CCNAME environment variable are used to set the storage location for ccache entries. On Linux, credentials are typically stored in the `/tmp` directory with a naming format of `krb5cc_%UID%` or `krb5.ccache`. On macOS, ccache entries are stored by default in memory with an `API:{uuid}` naming scheme. Typically, users interact with ticket storage using kinit, which obtains a Ticket-Granting-Ticket (TGT) for the principal; klist, which lists obtained tickets currently held in the credentials cache; and other built-in binaries. Adversaries can collect tickets from ccache files stored on disk and authenticate as the current user without their password to perform Pass the Ticket attacks. Adversaries can also use these tickets to impersonate legitimate users with elevated privileges to perform Privilege Escalation. Tools like Kekeo can also be used by adversaries to convert ccache files to Windows format for further Lateral Movement. On macOS, adversaries may use open-source tools or the Kerberos framework to interact with ccache files and extract TGTs or Service Tickets via lower-level APIs.","detection":null,"procedures":["[S0357] Impacket: Impacket tools – such as getST.py or ticketer.py – can be used to steal or forge Kerberos tickets using ccache files given a password, hash, aesKey, or TGT."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1606.001","technique_name":"Forge Web Credentials: Web Cookies","description":"Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access. Adversaries may generate these cookies in order to gain access to web resources. This differs from Steal Web Session Cookie and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces. The generation of web cookies often requires secret values, such as passwords, Private Keys, or other cryptographic seed values. Once forged, adversaries may use these web cookies to access resources (Web Session Cookie), which may bypass multi-factor and other authentication protection mechanisms.","detection":"Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.","procedures":["[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 bypassed MFA set on OWA accounts by generating a cookie value from a previously stolen secret key."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1606.002","technique_name":"Forge Web Credentials: SAML Tokens","description":"An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate. The default lifetime of a SAML token is one hour, but the validity period can be specified in the NotOnOrAfter value of the conditions ... element in a token. This value can be changed using the AccessTokenLifetime in a LifetimeTokenPolicy. Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism. An adversary may utilize Private Keys to compromise an organization's token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate. This differs from Steal Application Access Token and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users. An adversary may gain administrative Entra ID privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to Use Alternate Authentication Material, which may bypass multi-factor and other authentication protection mechanisms.","detection":"This technique may be difficult to detect as SAML tokens are signed by a trusted certificate. The forging process may not be detectable since it is likely to happen outside of a defender's visibility, but subsequent usage of the forged token may be seen. Monitor for anomalous logins using SAML tokens created by a compromised or adversary generated token-signing certificate. These logins may occur on any on-premises resources as well as from any cloud environment that trusts the certificate. Search for logins to service providers using SAML SSO which do not have corresponding 4769, 1200, and 1202 events in the Domain. Consider modifying SAML responses to include custom elements for each service provider. Monitor these custom elements in service provider access logs to detect any anomalous requests.","procedures":["[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 created tokens using compromised SAML signing certificates.","[S0677] AADInternals: AADInternals can be used to create SAML tokens using the AD Federated Services token signing certificate."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1621","technique_name":"Multi-Factor Authentication Request Generation","description":"Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users. Adversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account. If adversaries lack credentials to victim accounts, they may also abuse automatic push notification generation when this option is configured for self-service password reset (SSPR). In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to “MFA fatigue.”","detection":"Monitor user account logs as well as 2FA/MFA application logs for suspicious events: unusual login attempt source location, mismatch in location of login attempt and smart device receiving 2FA/MFA request prompts, and high volume of repeated login attempts, all of which may indicate user's primary credentials have been compromised minus 2FA/MFA mechanism.","procedures":["[G0016] APT29: APT29 has used repeated MFA requests to gain access to victim accounts.","[C0027] C0027: During C0027, Scattered Spider attempted to gain access by continuously sending MFA messages to the victim until they accept the MFA push challenge.","[G1015] Scattered Spider: Scattered Spider has used multifactor authentication (MFA) fatigue by sending repeated MFA authentication requests to targets.","[G1004] LAPSUS$: LAPSUS$ has spammed target users with MFA prompts in the hope that the legitimate user will grant necessary approval."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1649","technique_name":"Steal or Forge Authentication Certificates","description":"Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Entra ID device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts. Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files), misplaced certificate files (i.e. Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs. With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate’s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate’s subject alternative name (SAN) values define the certificate owner’s alternate names. Abusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts. Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as “golden” certificates). Adversaries may also target certificates and related services in order to access other forms of credentials, such as Golden Ticket ticket-granting tickets (TGT) or NTLM plaintext.","detection":null,"procedures":["[S0677] AADInternals: AADInternals can create and export various authentication certificates, including those associated with Azure AD joined/registered devices.","[G0016] APT29: APT29 has abused misconfigured AD CS certificate templates to impersonate admin users and create additional authentication certificates.","[S0002] Mimikatz: Mimikatz's `CRYPTO` module can create and export various types of authentication certificates."],"tactics":"TA0006 - Credential Access"}