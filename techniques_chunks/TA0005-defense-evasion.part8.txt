{"technique_id":"T1562.012","technique_name":"Impair Defenses: Disable or Modify Linux Audit System","description":"Adversaries may disable or modify the Linux audit system to hide malicious activity and avoid detection. Linux admins use the Linux Audit system to track security-relevant information on a system. The Linux Audit system operates at the kernel-level and maintains event logs on application and system activity such as process, network, file, and login events based on pre-configured rules. Often referred to as `auditd`, this is the name of the daemon used to write events to disk and is governed by the parameters set in the `audit.conf` configuration file. Two primary ways to configure the log generation rules are through the command line `auditctl` utility and the file `/etc/audit/audit.rules`, containing a sequence of `auditctl` commands loaded at boot time. With root privileges, adversaries may be able to ensure their activity is not logged through disabling the Audit system service, editing the configuration/rule files, or by hooking the Audit system library functions. Using the command line, adversaries can disable the Audit system service through killing processes associated with `auditd` daemon or use `systemctl` to stop the Audit service. Adversaries can also hook Audit system functions to disable logging or modify the rules contained in the `/etc/audit/audit.rules` or `audit.conf` files to ignore malicious activity.","detection":null,"procedures":["[S0377] Ebury: Ebury disables OpenSSH, system (`systemd`), and audit logs (`/sbin/auditd`) when the backdoor is active."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.001","technique_name":"Hide Artifacts: Hidden Files and Directories","description":"Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS). On Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name . Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable. Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app . On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys. Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.","detection":"Monitor the file system and shell commands for files being created with a leading \".\" and the Windows command-line use of attrib.exe to add the hidden attribute.","procedures":["[S0650] QakBot: QakBot has placed its payload in hidden subdirectories.","[S0658] XCSSET: XCSSET uses a hidden folder named .xcassets and .git to embed itself in Xcode.","[G0007] APT28: APT28 has saved files with hidden file attributes.","[G1039] RedCurl: RedCurl added the “hidden” file attribute to original files, manipulating victims to click on malicious LNK files.","[S1153] Cuckoo Stealer: Cuckoo Stealer has copied its binary and the victim's scraped password into a hidden folder in the `/Users` directory.","[S0660] Clambling: Clambling has the ability to set its file attributes to hidden.","[G1014] LuminousMoth: LuminousMoth has used malware to store malicious binaries in hidden directories on victim's USB drives.","[S0612] WastedLocker: WastedLocker has copied a random file from the Windows System32 folder to the %APPDATA% location under a different hidden filename.","[S0013] PlugX: PlugX can modify the characteristics of folders to hide them from the compromised user.","[G0032] Lazarus Group: Lazarus Group has used a VBA Macro to set its file attributes to System and Hidden and has named files with a dot prefix to hide them from the Finder application.","[S0369] CoinTicker: CoinTicker downloads the following hidden files to evade detection and maintain persistence: /private/tmp/.info.enc, /private/tmp/.info.py, /private/tmp/.server.sh, ~/Library/LaunchAgents/.espl.plist, ~/Library/Containers/.[random string]/[random string].","[G0129] Mustang Panda: Mustang Panda's PlugX variant has created a hidden folder on USB drives named RECYCLE.BIN to store malicious executables and collected data.","[S0428] PoetRAT: PoetRAT has the ability to hide and unhide files.","[S0584] AppleJeus: AppleJeus has added a leading . to plist filenames, unlisting them from the Finder app and default Terminal directory listings.","[S0402] OSX/Shlayer: OSX/Shlayer has executed a .command script from a hidden directory in a mounted DMG.","[G0081] Tropic Trooper: Tropic Trooper has created a hidden directory under C:\\ProgramData\\Apple\\Updates\\ and C:\\Users\\Public\\Documents\\Flash\\.","[S0595] ThiefQuest: ThiefQuest hides a copy of itself in the user's ~/Library directory by using a . at the beginning of the file name followed by 9 random characters.","[G0106] Rocke: Rocke downloaded a file \"libprocesshider\", which could hide files on the target system.","[S0451] LoudMiner: LoudMiner has set the attributes of the VirtualBox directory and VBoxVmService parent directory to \"hidden\".","[S0262] QuasarRAT: QuasarRAT has the ability to set file attributes to \"hidden\" to hide files from the compromised user's view in Windows File Explorer.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D sets the main loader file’s attributes to hidden.","[S0260] InvisiMole: InvisiMole can create hidden system directories.","[G1016] FIN13: FIN13 has created hidden files and folders within a compromised Linux system `/tmp` directory. FIN13 also has used `attrib.exe` to hide gathered local host information.","[S0634] EnvyScout: EnvyScout can use hidden directories and files to hide malicious executables.","[S0434] Imminent Monitor: Imminent Monitor has a dynamic debugging feature to set the file attribute to hidden.","[S1043] ccf32: ccf32 has created a hidden directory on targeted systems, naming it after the current local time (year, month, and day).","[S0015] Ixeshe: Ixeshe sets its own executable file's attributes to hidden.","[S0282] MacSpy: MacSpy stores itself in ~/Library/.DS_Stores/","[G0134] Transparent Tribe: Transparent Tribe can hide legitimate directories and replace them with malicious copies of the same name.","[S0439] Okrum: Before exfiltration, Okrum's backdoor has used hidden files to store logs and outputs from backdoor commands.","[S0331] Agent Tesla: Agent Tesla has created hidden folders.","[S0484] Carberp: Carberp has created a hidden file in the Startup folder of the current user.","[S0366] WannaCry: WannaCry uses attrib +h to make some of its files hidden.","[S0198] NETWIRE: NETWIRE can copy itself to and launch itself from hidden folders.","[G0125] HAFNIUM: HAFNIUM has hidden files on a compromised host.","[S0447] Lokibot: Lokibot has the ability to copy itself to a hidden file and directory.","[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda stored encrypted payloads associated with PlugX installation in hidden directories during RedDelta Modified PlugX Infection Chain Operations.","[S0278] iKitten: iKitten saves itself with a leading \".\" so that it's hidden from users by default.","[S0663] SysUpdate: SysUpdate has the ability to set file attributes to hidden.","[S0277] FruitFly: FruitFly saves itself with a leading \".\" to make it a hidden file.","[S0475] BackConfig: BackConfig has the ability to set folders or files to be hidden from the Windows Explorer default view.","[S0438] Attor: Attor can set attributes of log files and directories to HIDDEN, SYSTEM, ARCHIVE, or a combination of those.","[G0050] APT32: APT32's macOS backdoor hides the clientID file via a chflags function.","[S1176] attrib: attrib can be used to make files or directories hidden.","[S1105] COATHANGER: COATHANGER creates and installs itself to a hidden installation directory.","[S1111] DarkGate: DarkGate initial installation involves dropping several files to a hidden directory named after the victim machine name. Additionally, DarkGate uses attrib to hide a directory in the following command: ` C:\\Windows\\system32\\attrib.exe” +h C:/rjtu/`.","[S0274] Calisto: Calisto uses a hidden directory named .calisto to store data from the victim’s machine before exfiltration.","[S0569] Explosive: Explosive has commonly set file and path attributes to hidden.","[S0339] Micropsia: Micropsia creates a new hidden directory to store all components' outputs in a dedicated sub-folder for each.","[S0497] Dacls: Dacls has had its payload named with a dot prefix to make it hidden from view in the Finder application.","[S0448] Rising Sun: Rising Sun can modify file attributes to hide files.","[S0162] Komplex: The Komplex payload is stored in a hidden directory at /Users/Shared/.local/kextd.","[S0533] SLOTHFULMEDIA: SLOTHFULMEDIA has been created with a hidden attribute to insure it's not visible to the victim.","[S0409] Machete: Machete has the capability to exfiltrate stolen data to a hidden folder on a removable drive."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.002","technique_name":"Hide Artifacts: Hidden Users","description":"Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under 500 and set the key value Hide500Users to TRUE in the /Library/Preferences/com.apple.loginwindow plist file. Every user has a userID associated with it. When the Hide500Users key value is set to TRUE, users with a userID under 500 do not appear on the login screen and in System Preferences. Using the command line, adversaries can use the dscl utility to create hidden user accounts by setting the IsHidden attribute to 1. Adversaries can also hide a user’s home folder by changing the chflags to hidden. Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen. On Linux systems, adversaries may hide user accounts from the login screen, also referred to as the greeter. The method an adversary may use depends on which Display Manager the distribution is currently using. For example, on an Ubuntu system using the GNOME Display Manger (GDM), accounts may be hidden from the greeter using the gsettings command (ex: sudo -u gdm gsettings set org.gnome.login-screen disable-user-list true). Display Managers are not anchored to specific distributions and may be changed by a user or adversary.","detection":"Monitor for users that may be hidden from the login screen but still present in additional artifacts of usage such as directories and authentication logs. Monitor processes and command-line events for actions that could be taken to add a new user and subsequently hide it from login screens. Monitor Registry events for modifications to the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList key. In macOS, monitor for commands, processes, and file activity in combination with a user that has a userID under 500. Monitor for modifications to set the Hide500Users key value to TRUE in the /Library/Preferences/com.apple.loginwindow plist file. Monitor the command line for usage of the dscl . create command with the IsHidden attribute set to 1.","procedures":["[G0035] Dragonfly: Dragonfly has modified the Registry to hide created user accounts.","[S0649] SMOKEDHAM: SMOKEDHAM has modified the Registry to hide created user accounts from the Windows logon screen.","[G0094] Kimsuky: Kimsuky has run reg add ‘HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList’ /v to hide a newly created user."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.003","technique_name":"Hide Artifacts: Hidden Window","description":"Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system. On macOS, the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be apple.awt.UIElement, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. Similarly, on Windows there are a variety of features in scripting languages, such as PowerShell, Jscript, and Visual Basic to make windows hidden. One example of this is powershell.exe -WindowStyle Hidden. The Windows Registry can also be edited to hide application windows from the current user. For example, by setting the `WindowPosition` subkey in the `HKEY_CURRENT_USER\\Console\\%SystemRoot%_System32_WindowsPowerShell_v1.0_PowerShell.exe` Registry key to a maximum value, PowerShell windows will open off screen and be hidden. In addition, Windows supports the `CreateDesktop()` API that can create a hidden desktop window with its own corresponding explorer.exe process. All applications running on the hidden desktop window, such as a hidden VNC (hVNC) session, will be invisible to other desktops windows.","detection":"Monitor processes and command-line arguments for actions indicative of hidden windows. In Windows, enable and configure event logging and PowerShell logging to check for the hidden window style. In MacOS, plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the apple.awt.UIElement or any other suspicious plist tag in plist files and flag them.","procedures":["[S0373] Astaroth: Astaroth loads its module with the XSL script parameter vShow set to zero, which opens the application with a hidden window.","[S0686] QuietSieve: QuietSieve has the ability to execute payloads in a hidden window.","[S0491] StrongPity: StrongPity has the ability to hide the console window for its document search module from the user.","[S1199] LockBit 2.0: LockBit 2.0 can execute command line arguments in a hidden window.","[S1020] Kevin: Kevin can hide the current window from the targeted user via the `ShowWindow` API function.","[G0022] APT3: APT3 has been known to use -WindowStyle Hidden to conceal PowerShell windows.","[G0007] APT28: APT28 has used the WindowStyle parameter to conceal PowerShell windows.","[G0073] APT19: APT19 used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden.","[S0250] Koadic: Koadic has used the command Powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden to hide its window.","[S0037] HAMMERTOSS: HAMMERTOSS has used -WindowStyle hidden to conceal PowerShell windows.","[S0692] SILENTTRINITY: SILENTTRINITY has the ability to set its window state to hidden.","[S0262] QuasarRAT: QuasarRAT can hide process windows and make web requests invisible to the compromised user. Requests marked as invisible have been sent with user-agent string `Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A` though QuasarRAT can only be run on Windows systems.","[S0387] KeyBoy: KeyBoy uses -w Hidden to conceal a PowerShell window that downloads a payload.","[S1089] SharpDisco: SharpDisco can hide windows using `ProcessWindowStyle.Hidden`.","[S0500] MCMD: MCMD can modify processes to prevent them from being visible on the desktop.","[S0669] KOCTOPUS: KOCTOPUS has used -WindowsStyle Hidden to hide the command window.","[S0360] BONDUPDATER: BONDUPDATER uses -windowstyle hidden to conceal a PowerShell window that downloads a payload.","[S1172] OilBooster: OilBooster can hide its console window upon execution through the `ShowWindow` API.","[G0009] Deep Panda: Deep Panda has used -w hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden.","[S0331] Agent Tesla: Agent Tesla has used ProcessWindowStyle.Hidden to hide windows.","[S1087] AsyncRAT: AsyncRAT can hide the execution of scheduled tasks using `ProcessWindowStyle.Hidden`.","[S0437] Kivars: Kivars has the ability to conceal its activity through hiding active windows.","[G0078] Gorgon Group: Gorgon Group has used -W Hidden to conceal PowerShell windows by setting the WindowStyle parameter to hidden.","[G0052] CopyKittens: CopyKittens has used -w hidden and -windowstyle hidden to conceal PowerShell windows.","[S1076] QUIETCANARY: QUIETCANARY can execute processes in a hidden window.","[G0126] Higaisa: Higaisa used a payload that creates a hidden window.","[G0047] Gamaredon Group: Gamaredon Group has used hidcon to run batch files in a hidden console window.","[G0079] DarkHydrus: DarkHydrus has used -WindowStyle Hidden to conceal PowerShell windows.","[S0670] WarzoneRAT: WarzoneRAT has the ability of performing remote desktop access via a hVNC window for decreased visibility.","[S1053] AvosLocker: AvosLocker has hidden its console window by using the `ShowWindow` API function.","[S1152] IMAPLoader: IMAPLoader hides the Windows Console window created by its execution by directly importing the `kernel32.dll` and `user32.dll` libraries `GetConsoleWindow` and `ShowWindow` APIs.","[G1022] ToddyCat: ToddyCat has hidden malicious scripts using `powershell.exe -windowstyle hidden`.","[S0688] Meteor: Meteor can hide its console window upon execution to decrease its visibility to a victim.","[G0133] Nomadic Octopus: Nomadic Octopus executed PowerShell in a hidden window.","[S0260] InvisiMole: InvisiMole has executed legitimate tools in hidden windows.","[G0094] Kimsuky: Kimsuky has used an information gathering module that will hide an AV software window from the victim.","[G0050] APT32: APT32 has used the WindowStyle parameter to conceal PowerShell windows.","[S0441] PowerShower: PowerShower has added a registry key so future powershell.exe instances are spawned with coordinates for a window position off-screen by default.","[G0059] Magic Hound: Magic Hound malware has a function to determine whether the C2 server wishes to execute the newly dropped file in a hidden window.","[S0266] TrickBot: TrickBot has used a hidden VNC (hVNC) window to monitor the victim and collect information stealthily.","[S1086] Snip3: Snip3 can execute PowerShell scripts in a hidden window.","[S0466] WindTail: WindTail can instruct the OS to execute an application without a dock icon or menu.","[S1213] Lumma Stealer: Lumma Stealer has utilized the .NET `ProcessStartInfo` class features to prevent the process from creating a visible window through setting the `CreateNoWindow` setting to “True,” which allows the executed command or script to run without displaying a command prompt window.","[S0455] Metamorfo: Metamorfo has hidden its GUI using the ShowWindow() WINAPI call.","[S0625] Cuba: Cuba has executed hidden PowerShell windows.","[S0431] HotCroissant: HotCroissant has the ability to hide the window for operations performed on a given file.","[S0386] Ursnif: Ursnif droppers have used COM properties to execute malware in hidden windows."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.004","technique_name":"Hide Artifacts: NTFS File Attributes","description":"Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.","detection":"Forensic techniques exist to identify information stored in NTFS EA. Monitor calls to the ZwSetEaFile and ZwQueryEaFile Windows API functions as well as binaries used to interact with EA, and consider regularly scanning for the presence of modified information. There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: file.ext:ads[.ext]) is commonly associated with ADSs. For a more exhaustive list of utilities that can be used to execute and create ADSs, see The Streams tool of Sysinternals can be used to uncover files with ADSs. The dir /r command can also be used to display ADSs. Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a -stream parameter to interact with ADSs.","procedures":["[S0019] Regin: The Regin malware platform uses Extended Attributes to store encrypted executables.","[G0050] APT32: APT32 used NTFS alternate data streams to hide their payloads.","[S0476] Valak: Valak has the ability save and execute files as alternate data streams (ADS).","[S0397] LoJax: LoJax has loaded an embedded NTFS DXE driver to be able to access and write to NTFS partitions.","[S0404] esentutl: esentutl can be used to read and write alternate data streams.","[S0361] Expand: Expand can be used to download or copy a file into an alternate data stream.","[S0139] PowerDuke: PowerDuke hides many of its backdoor payloads in an alternate data stream (ADS).","[S1052] DEADEYE: The DEADEYE.EMBED variant of DEADEYE can embed its payload in an alternate data stream of a local file.","[S0145] POWERSOURCE: If the victim is using PowerShell 3.0 or later, POWERSOURCE writes its decoded payload to an alternate data stream (ADS) named kernel32.dll that is saved in %PROGRAMDATA%\\Windows\\.","[S1160] Latrodectus: Latrodectus can delete itself while its process is still running through the use of an alternate data stream.","[S0612] WastedLocker: WastedLocker has the ability to save and execute files as an alternate data stream (ADS).","[S0570] BitPaymer: BitPaymer has copied itself to the :bin alternate data stream of a newly created file.","[S0373] Astaroth: Astaroth can abuse alternate data streams (ADS) to store content for malicious payloads.","[S0168] Gazer: Gazer stores configuration items in alternate data streams (ADSs) if the Registry is not accessible.","[S0027] Zeroaccess: Some variants of the Zeroaccess Trojan have been known to store data in Extended Attributes.","[S0504] Anchor: Anchor has used NTFS to hide files."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.005","technique_name":"Hide Artifacts: Hidden File System","description":"Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS. Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions. Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system. Adversaries may also fragment files across the existing file system structure in non-standard ways.","detection":"Detecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting Bootkit activity.","procedures":["[G0020] Equation: Equation has used an encrypted virtual file system stored in the Windows Registry.","[S0126] ComRAT: ComRAT has used a portable FAT16 partition image placed in %TEMP% as a hidden file system.","[S0019] Regin: Regin has used a hidden file system to store some of its components.","[S0114] BOOTRASH: BOOTRASH has used unallocated disk space between partitions for a hidden file system that stores components of the Nemesis bootkit.","[S0022] Uroburos: Uroburos can use concealed storage mechanisms including an NTFS or FAT-16 filesystem encrypted with CAST-128 in CBC mode.","[G0041] Strider: Strider has used a hidden file system that is stored as a file on disk."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.006","technique_name":"Hide Artifacts: Run Virtual Instance","description":"Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values. Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system. In VMWare environments, adversaries may leverage the vCenter console to create new virtual machines. However, they may also create virtual machines directly on ESXi servers by running a valid `.vmx` file with the `/bin/vmx` utility. Adding this command to `/etc/rc.local.d/local.sh` (i.e., RC Scripts) will cause the VM to persistently restart. Creating a VM this way prevents it from appearing in the vCenter console or in the output to the `vim-cmd vmsvc/getallvms` command on the ESXi server, thereby hiding it from typical administrative activities.","detection":"Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines. Network adapter information may also be helpful in detecting the use of virtual instances. Consider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. -silent, -ignore-reboot), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. VBoxManage startvm $VM --type headless). Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. VBoxManage.exe setextradata global GUI/SuppressMessages \"all\"). Monitor for commands which enable hypervisors such as Hyper-V. If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for Windows Service, with respect to virtualization software. Benign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.","procedures":["[S0449] Maze: Maze operators have used VirtualBox and a Windows 7 virtual machine to run the ransomware; the virtual machine's configuration file mapped the shared network drives of the target company, presumably so Maze can encrypt files on the shared drives as well as the local machine.","[S0481] Ragnar Locker: Ragnar Locker has used VirtualBox and a stripped Windows XP virtual machine to run itself. The use of a shared folder specified in the configuration enables Ragnar Locker to encrypt files on the host operating system, including files on any mapped drives.","[S0451] LoudMiner: LoudMiner has used QEMU and VirtualBox to run a Tiny Core Linux virtual machine, which runs XMRig and makes connections to the C2 server for updates."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.007","technique_name":"Hide Artifacts: VBA Stomping","description":"Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data. MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application. An adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.","detection":"Detection efforts should be placed finding differences between VBA source code and p-code. VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code. If the document is opened with a Graphical User Interface (GUI) the malicious p-code is decompiled and may be viewed. However, if the PROJECT stream, which specifies the project properties, is modified in a specific way the decompiled VBA code will not be displayed. For example, adding a module name that is undefined to the PROJECT stream will inhibit attempts of reading the VBA source code through the GUI.","procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.008","technique_name":"Hide Artifacts: Email Hiding Rules","description":"Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule PowerShell cmdlets on Windows systems. Adversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to Internal Spearphishing emails sent from the compromised account. Any user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as malware, suspicious, phish, and hack) found in message bodies and subject lines. In some environments, administrators may be able to enable email rules that operate organization-wide rather than on individual inboxes. For example, Microsoft Exchange supports transport rules that evaluate all mail an organization receives against user-specified conditions, then performs a user-specified action on mail that adheres to those conditions. Adversaries that abuse such features may be able to automatically modify or delete all emails related to specific topics (such as internal security incident notifications).","detection":"Monitor email clients and applications for suspicious activity, such as missing messages or abnormal configuration and/or log entries. On Windows systems, monitor for creation of suspicious inbox rules through the use of the New-InboxRule and Set-InboxRule PowerShell cmdlets. On MacOS systems, monitor for modifications to the RulesActiveState.plist, SyncedRules.plist, UnsyncedRules.plist, and MessageRules.plist files.","procedures":["[G1015] Scattered Spider: Scattered Spider creates inbound rules on the compromised email accounts of security personnel to automatically delete emails from vendor security products.","[G0085] FIN4: FIN4 has created rules in victims' Microsoft Outlook accounts to automatically delete emails containing words such as “hacked,\" \"phish,\" and “malware\" in a likely attempt to prevent organizations from communicating about their activities."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.009","technique_name":"Hide Artifacts: Resource Forking","description":"Adversaries may abuse resource forks to hide malicious code or executables to evade detection and bypass security applications. A resource fork provides applications a structured way to store resources such as thumbnail images, menu definitions, icons, dialog boxes, and code. Usage of a resource fork is identifiable when displaying a file’s extended attributes, using ls -l@ or xattr -l commands. Resource forks have been deprecated and replaced with the application bundle structure. Non-localized resources are placed at the top level directory of an application bundle, while localized resources are placed in the /Resources folder. Adversaries can use resource forks to hide malicious data that may otherwise be stored directly in files. Adversaries can execute content with an attached resource fork, at a specified offset, that is moved to an executable location then invoked. Resource fork content may also be obfuscated/encrypted until execution.","detection":"Identify files with the com.apple.ResourceFork extended attribute and large data amounts stored in resource forks. Monitor command-line activity leveraging the use of resource forks, especially those immediately followed by potentially malicious activity such as creating network connections.","procedures":["[S0276] Keydnap: Keydnap uses a resource fork to present a macOS JPEG or text file icon rather than the executable's icon assigned by the operating system.","[S0402] OSX/Shlayer: OSX/Shlayer has used a resource fork to hide a compressed binary file of itself from the terminal, Finder, and potentially evade traditional scanners."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.010","technique_name":"Hide Artifacts: Process Argument Spoofing","description":"Adversaries may attempt to hide process command-line arguments by overwriting process memory. Process command-line arguments are stored in the process environment block (PEB), a data structure used by Windows to store various information about/used by a process. The PEB includes the process command-line arguments that are referenced when executing the process. When a process is created, defensive tools/sensors that monitor process creations may retrieve the process arguments from the PEB. Adversaries may manipulate a process PEB to evade defenses. For example, Process Hollowing can be abused to spawn a process in a suspended state with benign arguments. After the process is spawned and the PEB is initialized (and process information is potentially logged by tools/sensors), adversaries may override the PEB to modify the command-line arguments (ex: using the Native API WriteProcessMemory() function) then resume process execution with malicious arguments. Adversaries may also execute a process with malicious command-line arguments then patch the memory with benign arguments that may bypass subsequent process memory analysis. This behavior may also be combined with other tricks (such as Parent PID Spoofing) to manipulate or further evade process-based detections.","detection":"Detection of process argument spoofing may be difficult as adversaries may momentarily modify stored arguments used for malicious execution. These changes may bypass process creation detection and/or later process memory analysis. Consider monitoring for Process Hollowing, which includes monitoring for process creation (especially those in a suspended state) as well as access and/or modifications of these processes (especially by the parent process) via Windows API calls. Analyze process behavior to determine if a process is performing actions it usually does not and/or do no align with its logged command-line arguments.","procedures":["[S0154] Cobalt Strike: Cobalt Strike can use spoof arguments in spawned processes that execute beacon commands.","[S0615] SombRAT: SombRAT has the ability to modify its process memory to hide process command-line arguments."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.011","technique_name":"Hide Artifacts: Ignore Process Interrupts","description":"Adversaries may evade defensive mechanisms by executing commands that hide from process interrupt signals. Many operating systems use signals to deliver messages to control process behavior. Command interpreters often include specific commands/flags that ignore errors and other hangups, such as when the user of the active session logs off. These interrupt signals may also be used by defensive tools and/or analysts to pause or terminate specified running processes. Adversaries may invoke processes using `nohup`, PowerShell `-ErrorAction SilentlyContinue`, or similar commands that may be immune to hangups. This may enable malicious commands and malware to continue execution through system events that would otherwise terminate its execution, such as users logging off or the termination of its C2 network connection. Hiding from process interrupt signals may allow malware to continue execution, but unlike Trap this does not establish Persistence since the process will not be re-invoked once actually terminated.","detection":null,"procedures":["[S0588] GoldMax: The GoldMax Linux variant has been executed with the `nohup` command to ignore hangup signals and continue to run if the terminal session was terminated.","[S1184] BOLDMOVE: BOLDMOVE calls the signal function to ignore the signals SIGCHLD, SIGHIP, and SIGPIPE prior to starting primary logic.","[G1041] Sea Turtle: Sea Turtle executed SnappyTCP using the tool NoHup, which keeps the malware running on a system after exiting the shell or terminal.","[S0402] OSX/Shlayer: OSX/Shlayer has used the `nohup` command to instruct executed payloads to ignore hangup signals.","[S1161] BPFDoor: BPFDoor set's it's process to ignore the following signals; `SIGHUP`, `SIGINT`, `SIGQUIT`, `SIGPIPE`, `SIGCHLD`, `SIGTTIN`, and `SIGTTOU`."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.012","technique_name":"Hide Artifacts: File/Path Exclusions","description":"Adversaries may attempt to hide their file-based artifacts by writing them to specific folders or file names excluded from antivirus (AV) scanning and other defensive capabilities. AV and other file-based scanners often include exclusions to optimize performance as well as ease installation and legitimate use of applications. These exclusions may be contextual (e.g., scans are only initiated in response to specific triggering events/alerts), but are also often hardcoded strings referencing specific folders and/or files assumed to be trusted and legitimate. Adversaries may abuse these exclusions to hide their file-based artifacts. For example, rather than tampering with tool settings to add a new exclusion (i.e., Disable or Modify Tools), adversaries may drop their file-based payloads in default or otherwise well-known exclusions. Adversaries may also use Security Software Discovery and other Discovery/Reconnaissance activities to both discover and verify existing exclusions in a victim environment.","detection":null,"procedures":["[G0010] Turla: Turla has placed LunarWeb install files into directories that are excluded from scanning."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.013","technique_name":"Hide Artifacts: Bind Mounts","description":"Adversaries may abuse bind mounts on file structures to hide their activity and artifacts from native utilities. A bind mount maps a directory or file from one location on the filesystem to another, similar to a shortcut on Windows. It’s commonly used to provide access to specific files or directories across different environments, such as inside containers or chroot environments, and requires sudo access. Adversaries may use bind mounts to map either an empty directory or a benign `/proc` directory to a malicious process’s `/proc` directory. Using the commands `mount –o bind /proc/benign-process /proc/malicious-process` (or `mount –B`), the malicious process's `/proc` directory is overlayed with the contents of a benign process's `/proc` directory. When system utilities query process activity, such as `ps` and `top`, the kernel follows the bind mount and presents the benign directory’s contents instead of the malicious process's actual `/proc` directory. As a result, these utilities display information that appears to come from the benign process, effectively hiding the malicious process's metadata, executable, or other artifacts from detection.","detection":null,"procedures":["[C0035] KV Botnet Activity: KV Botnet Activity leveraged a bind mount to bind itself to the `/proc/` file path before deleting its files from the `/tmp/` directory."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1564.014","technique_name":"Hide Artifacts: Extended Attributes","description":"Adversaries may abuse extended attributes (xattrs) on macOS and Linux to hide their malicious data in order to evade detection. Extended attributes are key-value pairs of file and directory metadata used by both macOS and Linux. They are not visible through standard tools like `Finder`, `ls`, or `cat` and require utilities such as `xattr` (macOS) or `getfattr` (Linux) for inspection. Operating systems and applications use xattrs for tagging, integrity checks, and access control. On Linux, xattrs are organized into namespaces such as `user.` (user permissions), `trusted.` (root permissions), `security.`, and `system.`, each with specific permissions. On macOS, xattrs are flat strings without namespace prefixes, commonly prefixed with `com.apple.*` (e.g., `com.apple.quarantine`, `com.apple.metadata:_kMDItemUserTags`) and used by system features like Gatekeeper and Spotlight. An adversary may leverage xattrs by embedding a second-stage payload into the extended attribute of a legitimate file. On macOS, a payload can be embedded into a custom attribute using the `xattr` command. A separate loader can retrieve the attribute with `xattr -p`, decode the content, and execute it using a scripting interpreter. On Linux, an adversary may use `setfattr` to write a payload into the `user.` namespace of a legitimate file. A loader script can later extract the payload with `getfattr --only-values`, decode it, and execute it using bash or another interpreter. In both cases, because the primary file content remains unchanged, security tools and integrity checks that do not inspect extended attributes will observe the original file hash, allowing the malicious payload to evade detection.","detection":null,"procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1574.001","technique_name":"Hijack Execution Flow: DLL","description":"Adversaries may abuse dynamic-link library files (DLLs) in order to achieve persistence, escalate privileges, and evade defenses. DLLs are libraries that contain code and data that can be simultaneously utilized by multiple programs. While DLLs are not malicious by nature, they can be abused through mechanisms such as side-loading, hijacking search order, and phantom DLL hijacking. Specific ways DLLs are abused by adversaries include: ### DLL Sideloading Adversaries may execute their own malicious payloads by side-loading DLLs. Side-loading involves hijacking which DLL a program loads by planting and then invoking a legitimate application that executes their payload(s). Side-loading positions both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process. Adversaries may also side-load other packages, such as BPLs (Borland Package Library). ### DLL Search Order Hijacking Adversaries may execute their own malicious payloads by hijacking the search order that Windows uses to load DLLs. This search order is a sequence of special and standard search locations that a program checks when loading a DLL. An adversary can plant a trojan DLL in a directory that will be prioritized by the DLL search order over the location of a legitimate library. This will cause Windows to load the malicious DLL when it is called for by the victim program. ### DLL Redirection Adversaries may directly modify the search order via DLL redirection, which after being enabled (in the Registry or via the creation of a redirection file) may cause a program to load a DLL from a different location. ### Phantom DLL Hijacking Adversaries may leverage phantom DLL hijacking by targeting references to non-existent DLL files. They may be able to load their own malicious DLL by planting it with the correct name in the location of the missing module. ### DLL Substitution Adversaries may target existing, valid DLL files and substitute them with their own malicious DLLs, planting them with the same name and in the same location as the valid DLL file. Programs that fall victim to DLL hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace, evading defenses. Remote DLL hijacking can occur when a program sets its current directory to a remote location, such as a Web share, before loading a DLL. If a valid DLL is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation.","detection":"Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of `.manifest` and `.local` redirection files that do not correlate with software updates are suspicious.","procedures":["[G0114] Chimera: Chimera has used side loading to place malicious DLLs in memory.","[G1021] Cinnamon Tempest: Cinnamon Tempest has used search order hijacking to launch Cobalt Strike Beacons. Cinnamon Tempest has also abused legitimate executables to side-load weaponized DLLs.","[S1041] Chinoxy: Chinoxy can use a digitally signed binary (\"Logitech Bluetooth Wizard Host Process\") to load its dll into memory.","[G0069] MuddyWater: MuddyWater maintains persistence on victim networks through side-loading dlls to trick legitimate programs into running malware.","[S0384] Dridex: Dridex can abuse legitimate Windows executables to side-load malicious DLL files.","[G1047] Velvet Ant: Velvet Ant has used malicious DLLs executed via legitimate EXE files through DLL search order hijacking to launch follow-on payloads such as PlugX.","[S0664] Pandora: Pandora can use DLL side-loading to execute malicious payloads.","[G0048] RTM: RTM has used search order hijacking to force TeamViewer to load a malicious DLL.","[G0131] Tonto Team: Tonto Team abuses a legitimate and signed Microsoft executable to launch a malicious DLL.","[G0040] Patchwork: A Patchwork .dll that contains BADNEWS is loaded and executed using DLL side-loading.","[S0070] HTTPBrowser: HTTPBrowser abuses the Windows DLL load order by using a legitimate Symantec anti-virus binary, VPDN_LU.exe, to load a malicious DLL that mimics a legitimate Symantec DLL, navlu.dll. HTTPBrowser has also used DLL side-loading.","[S0109] WEBC2: Variants of WEBC2 achieve persistence by using DLL search order hijacking, usually by copying the DLL file to %SYSTEMROOT% (C:\\WINDOWS\\ntshrui.dll).","[S0009] Hikit: Hikit has used DLL to load oci.dll as a persistence mechanism.","[S0176] Wingbird: Wingbird side loads a malicious file, sspisrv.dll, in part of a spoofed lssas.exe service.","[S0528] Javali: Javali can use DLL side-loading to load malicious DLLs into legitimate executables.","[S0128] BADNEWS: BADNEWS typically loads its DLL file into a legitimate signed Java or VMware executable.","[G0107] Whitefly: Whitefly has used search order hijacking to run the loader Vcrodat.","[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda used DLL search order hijacking on vulnerable applications to install PlugX payloads during RedDelta Modified PlugX Infection Chain Operations.","[S0182] FinFisher: FinFisher uses DLL side-loading to load malicious programs. A FinFisher variant also uses DLL search order hijacking.","[G0143] Aquatic Panda: Aquatic Panda has used DLL search-order hijacking to load `exe`, `dll`, and `dat` files into memory. Aquatic Panda loaded a malicious DLL into the legitimate Windows Security Health Service executable (SecurityHealthService.exe) to execute malicious code on victim systems.","[S0398] HyperBro: HyperBro has used a legitimate application to sideload a DLL to decrypt, decompress, and run a payload.","[G0093] GALLIUM: GALLIUM used DLL side-loading to covertly load PoisonIvy into memory on the victim machine.","[S0153] RedLeaves: RedLeaves is launched through use of DLL search order hijacking to load a malicious dll.","[G0126] Higaisa: Higaisa’s JavaScript file used a legitimate Microsoft Office 2007 package to side-load the OINFO12.OCX dynamic link library.","[S0455] Metamorfo: Metamorfo has side-loaded its malicious DLL file.","[S0579] Waterbear: Waterbear has used DLL side loading to import and load a malicious DLL loader.","[S0230] ZeroT: ZeroT has used DLL side-loading to load malicious payloads.","[G0050] APT32: APT32 ran legitimately-signed executables from Symantec and McAfee which load a malicious DLL. The group also side-loads its backdoor by dropping a library and a legitimate, signed executable (AcroTranscoder).","[S0013] PlugX: PlugX has the ability to use DLL search order hijacking for installation on targeted systems. PlugX has also used DLL side-loading to evade anti-virus.","[S0458] Ramsay: Ramsay can hijack outdated Windows application dependencies with malicious versions of its own DLL payload.","[G1046] Storm-1811: Storm-1811 has deployed a malicious DLL (7z.DLL) that is sideloaded by a modified, legitimate installer (7zG.exe) when that installer is executed with an additional command line parameter of `b` at runtime to load a Cobalt Strike beacon payload.","[S0074] Sakula: Sakula uses DLL side-loading, typically using a digitally signed sample of Kaspersky Anti-Virus (AV) 6.0 for Windows Workstations or McAfee's Outlook Scan About Box to load malicious DLL files.","[S1213] Lumma Stealer: Lumma Stealer has leveraged legitimate applications to then side-load malicious DLLs during execution.","[S0098] T9000: During the T9000 installation process, it drops a copy of the legitimate Microsoft binary igfxtray.exe. The executable contains a side-loading weakness which is used to load a portion of the malware.","[G0120] Evilnum: Evilnum has used the malware variant, TerraTV, to load a malicious DLL placed in the TeamViewer directory, instead of the original Windows DLL located in a system folder.","[S0032] gh0st RAT: A gh0st RAT variant has used DLL side-loading.","[S0127] BBSRAT: DLL side-loading has been used to execute BBSRAT through a legitimate Citrix executable, ssonsvr.exe. The Citrix executable was dropped along with BBSRAT by the dropper.","[S1100] Ninja: Ninja loaders can be side-loaded with legitimate and signed executables including the VLC.exe media player.","[S0113] Prikormka: Prikormka uses DLL search order hijacking for persistence by saving itself as ntshrui.dll to the Windows directory so it will load before the legitimate ntshrui.dll saved in the System32 subdirectory.","[S0373] Astaroth: Astaroth can launch itself via DLL Search Order Hijacking.","[S0650] QakBot: QakBot has the ability to use DLL side-loading for execution.","[S1130] Raspberry Robin: Raspberry Robin can use legitimate, signed EXE files paired with malicious DLL files to load and run malicious payloads while bypassing defenses.","[G0081] Tropic Trooper: Tropic Trooper has been known to side-load DLLs using a valid version of a Windows Address Book and Windows Defender executable with one of their tools.","[G1006] Earth Lusca: Earth Lusca has placed a malicious payload in `%WINDIR%\\SYSTEM32\\oci.dll` so it would be sideloaded by the MSDTC service.","[S0585] Kerrdown: Kerrdown can use DLL side-loading to load malicious DLLs.","[G1014] LuminousMoth: LuminousMoth has used legitimate executables such as `winword.exe` and `igfxem.exe` to side-load their malware.","[S0530] Melcoz: Melcoz can use DLL hijacking to bypass security controls.","[S1101] LoFiSe: LoFiSe has been executed as a file named DsNcDiag.dll through side-loading.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used legitimate applications to side-load malicious DLLs.","[S0280] MirageFox: MirageFox is likely loaded via DLL hijacking into a legitimate McAfee binary.","[S1183] StrelaStealer: StrelaStealer has sideloaded a DLL payload using a renamed, legitimate `msinfo32.exe` executable.","[G0022] APT3: APT3 has been known to side load DLLs with a valid version of Chrome with one of their tools.","[S0194] PowerSploit: PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit DLL hijacking opportunities in services and processes.","[G0098] BlackTech: BlackTech has used DLL side loading by giving DLLs hardcoded names and placing them in searched directories.","[S0661] FoggyWeb: FoggyWeb's loader has used DLL Search Order Hijacking to load malicious code instead of the legitimate `version.dll` during the `Microsoft.IdentityServer.ServiceHost.exe` execution process.","[S0554] Egregor: Egregor has used DLL side-loading to execute its payload.","[G1016] FIN13: FIN13 has used IISCrack.dll as a side-loading technique to load a malicious version of httpodbc.dll on old IIS Servers (CVE-2001-0507).","[G0129] Mustang Panda: Mustang Panda has used a legitimately signed executable to execute a malicious payload within a DLL file.","[S0612] WastedLocker: WastedLocker has performed DLL hijacking before execution.","[S0538] Crutch: Crutch can persist via DLL search order hijacking on Google Chrome, Mozilla Firefox, or Microsoft OneDrive.","[S0630] Nebulae: Nebulae can use DLL side-loading to gain execution.","[G1008] SideCopy: SideCopy has used a malicious loader DLL file to execute the `credwiz.exe` process and side-load the malicious payload `Duser.dll`.","[S0631] Chaes: Chaes has used search order hijacking to load a malicious DLL.","[S1046] PowGoop: PowGoop can side-load `Goopdate.dll` into `GoogleUpdate.exe`.","[S1059] metaMain: metaMain can support an HKCMD sideloading start method.","[S1111] DarkGate: DarkGate includes one infection vector that leverages a malicious \"KeyScramblerE.DLL\" library that will load during the execution of the legitimate KeyScrambler application.","[C0040] APT41 DUST: APT41 DUST involved the use of DLL search order hijacking to execute DUSTTRAP. APT41 DUST used also DLL side-loading to execute DUSTTRAP via an AhnLab uninstaller.","[G1034] Daggerfly: Daggerfly has used legitimate software to side-load PlugX loaders onto victim systems. Daggerfly is also linked to multiple other instances of side-loading for initial loading activity.","[S1097] HUI Loader: HUI Loader can be deployed to targeted systems via legitimate programs that are vulnerable to DLL search order hijacking.","[S0663] SysUpdate: SysUpdate can load DLLs through vulnerable legitimate executables.","[S0477] Goopy: Goopy has the ability to side-load malicious DLLs with legitimate applications from Kaspersky, Microsoft, and Google.","[S0624] Ecipekac: Ecipekac can abuse the legitimate application policytool.exe to load a malicious DLL.","[S1102] Pcexter: Pcexter has been distributed and executed as a DLL file named Vspmsg.dll via DLL side-loading.","[G0019] Naikon: Naikon has used DLL side-loading to load malicious DLL's into legitimate executables.","[G0032] Lazarus Group: Lazarus Group has replaced `win_fw.dll`, an internal component that is executed during IDA Pro installation, with a malicious DLL to download and execute a payload. Lazarus Group utilized DLL side-loading to execute malicious payloads through abuse of the legitimate processes `wsmprovhost.exe` and `dfrgui.exe`.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used the legitimate Windows services `IKEEXT` and `PrintNotify` to side-load malicious DLLs.","[S0260] InvisiMole: InvisiMole can be launched by using DLL search order hijacking in which the wrapper DLL is placed in the same folder as explorer.exe and loaded during startup into the Windows Explorer process instead of the legitimate library.","[S0354] Denis: Denis exploits a security vulnerability to load a fake DLL and execute its code.","[G0027] Threat Group-3390: Threat Group-3390 has performed DLL search order hijacking to execute their payload. Threat Group-3390 has also used DLL side-loading, including by using legitimate Kaspersky antivirus variants as well as `rc.exe`, a legitimate Microsoft Resource Compiler.","[G0135] BackdoorDiplomacy: BackdoorDiplomacy has executed DLL search order hijacking.","[S0629] RainyDay: RainyDay can use side-loading to run malicious executables.","[S0415] BOOSTWRITE: BOOSTWRITE has exploited the loading of the legitimate Dwrite.dll file by actually loading the gdi library, which then loads the gdiplus library and ultimately loads the local Dwrite dll.","[S0660] Clambling: Clambling can store a file named `mpsvc.dll`, which opens a malicious `mpsvc.mui` file, in the same folder as the legitimate Microsoft executable `MsMpEng.exe` to gain execution.","[S0662] RCSession: RCSession can be installed via DLL side-loading.","[S0363] Empire: Empire contains modules that can discover and exploit various DLL hijacking opportunities.","[S1063] Brute Ratel C4: Brute Ratel C4 has used search order hijacking to load a malicious payload DLL as a dependency to a benign application packaged in the same ISO. Brute Ratel C4 has loaded a malicious DLL by spoofing the name of the legitimate Version.DLL and placing it in the same folder as the digitally-signed Microsoft binary OneDriveUpdater.exe.","[G0073] APT19: APT19 launched an HTTP malware variant and a Port 22 malware variant using a legitimate executable that loaded the malicious DLL.","[S0134] Downdelph: Downdelph uses search order hijacking of the Windows executable sysprep.exe to escalate privileges.","[S0582] LookBack: LookBack side loads its communications module as a DLL into the libcurl.dll loader.","[G0121] Sidewinder: Sidewinder has used DLL side-loading to drop and execute malicious payloads including the hijacking of the legitimate Windows application file rekeywiz.exe.","[G0096] APT41: APT41 has used search order hijacking to execute malicious payloads, such as Winnti for Windows. APT41 has also used legitimate executables to perform DLL side-loading of their malware.","[G0045] menuPass: menuPass has used DLL side-loading to launch versions of Mimikatz and PwDump6 as well as UPPERCUT. menuPass has also used DLL search order hijacking."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1574.004","technique_name":"Hijack Execution Flow: Dylib Hijacking","description":"Adversaries may execute their own payloads by placing a malicious dynamic library (dylib) with an expected name in a path a victim application searches at runtime. The dynamic loader will try to find the dylibs based on the sequential order of the search paths. Paths to dylibs may be prefixed with @rpath, which allows developers to use relative paths to specify an array of search paths used at runtime based on the location of the executable. Additionally, if weak linking is used, such as the LC_LOAD_WEAK_DYLIB function, an application will still execute even if an expected dylib is not present. Weak linking enables developers to run an application on multiple macOS versions as new APIs are added. Adversaries may gain execution by inserting malicious dylibs with the name of the missing dylib in the identified path. Dylibs are loaded into an application's address space allowing the malicious dylib to inherit the application's privilege level and resources. Based on the application, this could result in privilege escalation and uninhibited network access. This method may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process. Run path dependent libraries can include LC_LOAD_DYLIB, LC_LOAD_WEAK_DYLIB, and LC_RPATH. Other special keywords are recognized by the macOS loader are @rpath, @loader_path, and @executable_path. These loader instructions can be examined for individual binaries or frameworks using the otool -l command. Objective-See's Dylib Hijacking Scanner can be used to identify applications vulnerable to dylib hijacking.","procedures":["[S0363] Empire: Empire has a dylib hijacker module that generates a malicious dylib given the path to a legitimate dylib of a vulnerable application."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1574.005","technique_name":"Hijack Execution Flow: Executable Installer File Permissions Weakness","description":"Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM. Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the %TEMP% directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL search order hijacking. Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.","detection":"Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data. Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.","procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1574.006","technique_name":"Hijack Execution Flow: Dynamic Linker Hijacking","description":"Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from various environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name. Each platform's linker uses an extensive list of environment variables at different points in execution. These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions in the original library. Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. On Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. For example, adversaries have used `LD_PRELOAD` to inject a malicious library into every descendant process of the `sshd` daemon, resulting in execution under a legitimate process. When the executing sub-process calls the `execve` function, for example, the malicious library’s `execve` function is executed rather than the system function `execve` contained in the system library on disk. This allows adversaries to Hide Artifacts from detection, as hooking system functions such as `execve` and `readdir` enables malware to scrub its own artifacts from the results of commands such as `ls`, `ldd`, `iptables`, and `dmesg`. Hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges.","detection":"Monitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD and DYLD_INSERT_LIBRARIES, as well as the commands to implement these changes. Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.","procedures":["[G0143] Aquatic Panda: Aquatic Panda modified the ld.so preload file in Linux environments to enable persistence for Winnti malware.","[G0106] Rocke: Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.","[S0601] Hildegard: Hildegard has modified /etc/ld.so.preload to intercept shared library import functions.","[S0394] HiddenWasp: HiddenWasp adds itself as a shared object to the LD_PRELOAD environment variable.","[S0658] XCSSET: XCSSET adds malicious file paths to the DYLD_FRAMEWORK_PATH and DYLD_LIBRARY_PATH environment variables to execute malicious code.","[G0096] APT41: APT41 has configured payloads to load via LD_PRELOAD.","[S1105] COATHANGER: COATHANGER copies the malicious file /data2/.bd.key/preload.so to /lib/preload.so, then launches a child process that executes the malicious file /data2/.bd.key/authd as /bin/authd with the arguments /lib/preload.so reboot newreboot 1. This injects the malicious preload.so file into the process with PID 1, and replaces its reboot function with the malicious newreboot function for persistence.","[S0377] Ebury: When Ebury is running as an OpenSSH server, it uses LD_PRELOAD to inject its malicious shared module in to programs launched by SSH sessions. Ebury hooks the following functions from `libc` to inject into subprocesses; `system`, `popen`, `execve`, `execvpe`, `execv`, `execvp`, and `execl`."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1574.007","technique_name":"Hijack Execution Flow: Path Interception by PATH Environment Variable","description":"Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. The PATH environment variable contains a list of directories (User and System) that the OS searches sequentially through in search of the binary that was called from a script or the command line. Adversaries can place a malicious program in an earlier entry in the list of directories stored in the PATH environment variable, resulting in the operating system executing the malicious binary rather than the legitimate binary when it searches sequentially through that PATH listing. For example, on Windows if an adversary places a malicious program named \"net.exe\" in `C:\\example path`, which by default precedes `C:\\Windows\\system32\\net.exe` in the PATH environment variable, when \"net\" is executed from the command-line the `C:\\example path` will be called instead of the system's legitimate executable at `C:\\Windows\\system32\\net.exe`. Some methods of executing a program rely on the PATH environment variable to determine the locations that are searched when the path for the program is not given, such as executing programs from a Command and Scripting Interpreter. Adversaries may also directly modify the $PATH variable specifying the directories to be searched. An adversary can modify the `$PATH` variable to point to a directory they have write access. When a program using the $PATH variable is called, the OS searches the specified directory and executes the malicious binary. On macOS, this can also be performed through modifying the $HOME variable. These variables can be modified using the command-line, launchctl, Unix Shell Configuration Modification, or modifying the `/etc/paths.d` folder contents.","detection":"Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[S0194] PowerSploit: PowerSploit contains a collection of Privesc-PowerUp modules that can discover and exploit path interception opportunities in the PATH environment variable.","[S0363] Empire: Empire contains modules that can discover and exploit path interception opportunities in the PATH environment variable.","[S1111] DarkGate: DarkGate overrides the %windir% environment variable by setting a Registry key, HKEY_CURRENT_User\\Environment\\windir, to an alternate command to execute a malicious AutoIt script. This allows DarkGate to run every time the scheduled task DiskCleanup is executed as this uses the path value %windir%\\system32\\cleanmgr.exe for execution."],"tactics":"TA0005 - Defense Evasion"}