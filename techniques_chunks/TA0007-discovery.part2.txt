{"technique_id":"T1120","technique_name":"Peripheral Device Discovery","description":"Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.","detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.","procedures":["[S1139] INC Ransomware: INC Ransomware can identify external USB and hard drives for encryption and printers to print ransom notes.","[G0020] Equation: Equation has used tools with the functionality to search for specific information about the attached hard drive that could be used to identify and overwrite the firmware.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used the `fsutil fsinfo drives` command as part of their advanced reconnaissance.","[G0067] APT37: APT37 has a Bluetooth device harvester, which uses Windows Bluetooth APIs to find information on connected Bluetooth devices.","[S0283] jRAT: jRAT can map UPnP ports.","[S0538] Crutch: Crutch can monitor for removable drives being plugged into the compromised machine.","[S1044] FunnyDream: The FunnyDream FilepakMonitor component can detect removable drive insertion.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can monitor for removable drives.","[S0385] njRAT: njRAT will attempt to detect if the victim system has a camera during the initial infection. njRAT can also detect any removable drives connected to the system.","[S1026] Mongall: Mongall can identify removable media attached to compromised hosts.","[S0113] Prikormka: A module in Prikormka collects information on available printers and disk drives.","[S0366] WannaCry: WannaCry contains a thread that will attempt to scan for new attached drives every few seconds. If one is identified, it will encrypt the files on the attached device.","[S0251] Zebrocy: Zebrocy enumerates information about connected storage devices.","[S0148] RTM: RTM can obtain a list of smart card readers attached to the victim.","[S0644] ObliqueRAT: ObliqueRAT can discover pluggable/removable drives to extract files from.","[S0234] Bandook: Bandook can detect USB devices.","[S1167] AcidPour: AcidPour includes functionality to identify MMC and SD cards connected to the victim device.","[S0458] Ramsay: Ramsay can scan for removable media which may contain documents for collection.","[G0007] APT28: APT28 uses a module to receive a notification every time a USB mass storage device is inserted into a victim.","[S0452] USBferry: USBferry can check for connected USB devices.","[S0149] MoonWind: MoonWind obtains the number of removable drives from the victim.","[S0062] DustySky: DustySky can detect connected USB devices.","[S0438] Attor: Attor has a plugin that collects information about inserted storage devices, modems, and phone devices.","[S1064] SVCReady: SVCReady can check for the number of devices plugged into an infected host.","[S0679] Ferocious: Ferocious can run GET.WORKSPACE in Microsoft Excel to check if a mouse is present.","[S1199] LockBit 2.0: LockBit 2.0 has the ability to identify mounted external storage devices.","[S0089] BlackEnergy: BlackEnergy can gather very specific information about attached USB devices, to include device instance ID and drive geometry.","[G0010] Turla: Turla has used fsutil fsinfo drives to list connected drives.","[G0049] OilRig: OilRig has used tools to identify if a mouse is connected to a targeted system.","[S0115] Crimson: Crimson has the ability to discover pluggable/removable drives to extract files from.","[S0603] Stuxnet: Stuxnet enumerates removable drives for infection.","[S0381] FlawedAmmyy: FlawedAmmyy will attempt to detect if a usable smart card is current inserted into a card reader.","[S0045] ADVSTORESHELL: ADVSTORESHELL can list connected devices.","[S0612] WastedLocker: WastedLocker can enumerate removable drives prior to the encryption process.","[S0686] QuietSieve: QuietSieve can identify and search removable drives for specific file name extensions.","[S0650] QakBot: QakBot can identify peripheral devices on targeted systems.","[C0014] Operation Wocao: During Operation Wocao, threat actors discovered removable disks attached to a system.","[S0409] Machete: Machete detects the insertion of new devices by listening for the WM_DEVICECHANGE window message.","[S1150] ROADSWEEP: ROADSWEEP can identify removable drives attached to the victim's machine.","[G0139] TeamTNT: TeamTNT has searched for attached VGA devices using lspci.","[G1017] Volt Typhoon: Volt Typhoon has obtained victim's screen dimension and display device information.","[S1090] NightClub: NightClub has the ability to monitor removable drives.","[G0047] Gamaredon Group: Gamaredon Group tools have contained an application to check performance of USB flash drives. Gamaredon Group has also used malware to scan for removable drives.","[S1202] LockBit 3.0: LockBit 3.0 has the ability to discover external storage devices.","[G0135] BackdoorDiplomacy: BackdoorDiplomacy has used an executable to detect removable media, such as USB flash drives.","[S1027] Heyoka Backdoor: Heyoka Backdoor can identify removable media attached to victim's machines.","[S0454] Cadelspy: Cadelspy has the ability to steal information about printers and the documents sent to printers.","[S0481] Ragnar Locker: Ragnar Locker may attempt to connect to removable drives and mapped network drives.","[S0098] T9000: T9000 searches through connected drives for removable storage devices.","[S0467] TajMahal: TajMahal has the ability to identify connected Apple devices.","[S1089] SharpDisco: SharpDisco has dropped a plugin to monitor external drives to `C:\\Users\\Public\\It3.exe`.","[S0647] Turian: Turian can scan for removable media to collect data.","[S0136] USBStealer: USBStealer monitors victims for insertion of removable drives. When dropped onto a second victim, it also enumerates drives connected to the system.","[S0128] BADNEWS: BADNEWS checks for new hard drives on the victim, such as USB devices, by listening for the WM_DEVICECHANGE window message.","[S0673] DarkWatchman: DarkWatchman can list signed PnP drivers for smartcard readers."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1124","technique_name":"System Time Discovery","description":"An adversary may gather the system time and/or time zone settings from a local or remote system. The system time is set and stored by services, such as the Windows Time Service on Windows or systemsetup on macOS. These time settings may also be synchronized between systems and services in an enterprise network, typically accomplished with a network time server within a domain. System time information may be gathered in a number of ways, such as with Net on Windows by performing net time \\\\hostname to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using w32tm /tz. In addition, adversaries can discover device uptime through functions such as GetTickCount() to determine how long it has been since the system booted up. On network devices, Network Device CLI commands such as `show clock detail` can be used to see the current time configuration. On ESXi servers, `esxcli system clock get` can be used for the same purpose. In addition, system calls – such as time() – have been used to collect the current time on Linux devices. On macOS systems, adversaries may use commands such as systemsetup -gettimezone or timeIntervalSinceNow to gather current time zone information or current date and time. This information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.","detection":"Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software. For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.","procedures":["[S0140] Shamoon: Shamoon obtains the system time and will only activate if it is greater than a preset date.","[S1178] ShrinkLocker: ShrinkLocker retrieves a system timestamp that is used in generating an encryption key.","[S0373] Astaroth: Astaroth collects the timestamp from the infected machine.","[S0251] Zebrocy: Zebrocy gathers the current time zone and date information from the system.","[S0596] ShadowPad: ShadowPad has collected the current date and time of the victim system.","[S0011] Taidoor: Taidoor can use GetLocalTime and GetSystemTime to collect system time.","[S0396] EvilBunny: EvilBunny has used the API calls NtQuerySystemTime, GetSystemTimeAsFileTime, and GetTickCount to gather time metrics as part of its checks to see if the malware is running in a sandbox.","[S0098] T9000: T9000 gathers and beacons the system time during installation.","[S1051] KEYPLUG: KEYPLUG can obtain the current tick count of an infected computer.","[G0121] Sidewinder: Sidewinder has used tools to obtain the current system time.","[S0039] Net: The net time command can be used in Net to determine the local or remote system time.","[S0615] SombRAT: SombRAT can execute getinfo to discover the current time on a compromised host.","[S0091] Epic: Epic uses the net time command to get the system time from the machine and collect the current date and time zone information.","[S0678] Torisma: Torisma can collect the current time on a victim machine.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used the `net time` command as part of their advanced reconnaissance.","[S0275] UPPERCUT: UPPERCUT has the capability to obtain the time zone information and current timestamp of the victim’s machine.","[S0588] GoldMax: GoldMax can check the current date-time value of the compromised system, comparing it to the hardcoded execution trigger and can send the current timestamp to the C2 server.","[S0608] Conficker: Conficker uses the current UTC victim system date for domain generation and connects to time servers to determine the current date.","[C0014] Operation Wocao: During Operation Wocao, threat actors used the `time` command to retrieve the current time of a compromised system.","[S0237] GravityRAT: GravityRAT can obtain the date and time of a system.","[S0331] Agent Tesla: Agent Tesla can collect the timestamp from the victim’s machine.","[S1043] ccf32: ccf32 can determine the local time on targeted machines.","[S1081] BADHATCH: BADHATCH can obtain the `DATETIME` and `UPTIME` from a compromised machine.","[S0417] GRIFFON: GRIFFON has used a reconnaissance module that can be used to retrieve the date and time of the system.","[G1017] Volt Typhoon: Volt Typhoon has obtained the victim's system timezone.","[S0650] QakBot: QakBot can identify the system time on a targeted host.","[S0335] Carbon: Carbon uses the command net time \\\\127.0.0.1 to get information the system’s time.","[G0126] Higaisa: Higaisa used a function to gather the current time.","[S0554] Egregor: Egregor contains functionality to query the local/system time.","[S0115] Crimson: Crimson has the ability to determine the date and time on a compromised host.","[S0455] Metamorfo: Metamorfo uses JavaScript to get the system time.","[S0148] RTM: RTM can obtain the victim time zone.","[S0353] NOKKI: NOKKI can collect the current timestamp of the victim's machine.","[S0531] Grandoreiro: Grandoreiro can determine the time on the victim machine via IPinfo.","[S0673] DarkWatchman: DarkWatchman can collect time zone information and system `UPTIME`.","[S0694] DRATzarus: DRATzarus can use the `GetTickCount` and `GetSystemTimeAsFileTime` API calls to inspect system time.","[S0380] StoneDrill: StoneDrill can obtain the current date and time of the victim machine.","[S0559] SUNBURST: SUNBURST collected device `UPTIME`.","[S0471] build_downer: build_downer has the ability to determine the local time to ensure malware installation only happens during the hours that the infected system is active.","[G0128] ZIRCONIUM: ZIRCONIUM has used a tool to capture the time on a compromised host in order to register it with C2.","[S1148] Raccoon Stealer: Raccoon Stealer gathers victim machine timezone information.","[S0467] TajMahal: TajMahal has the ability to determine local time on a compromised host.","[S1033] DCSrv: DCSrv can compare the current time on an infected host with a configuration value to determine when to start the encryption process.","[S0692] SILENTTRINITY: SILENTTRINITY can collect start time information from a compromised host.","[S0139] PowerDuke: PowerDuke has commands to get the time the machine was built, the time, and the time zone.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used net time to check the local time on a target system.","[S0534] Bazar: Bazar can collect the time on the compromised host.","[S0149] MoonWind: MoonWind obtains the victim's current time.","[S0017] BISCUIT: BISCUIT has a command to collect the system `UPTIME`.","[G1012] CURIUM: CURIUM deployed mechanisms to check system time information following strategic website compromise attacks.","[S1044] FunnyDream: FunnyDream can check system time to help determine when changes were made to specified files.","[G0010] Turla: Turla surveys a system upon check-in to discover the system time by using the net time command.","[S0267] FELIXROOT: FELIXROOT gathers the time zone information from the victim’s machine.","[S1034] StrifeWater: StrifeWater can collect the time zone from the victim's machine.","[S1147] Nightdoor: Nightdoor can identify the system local time information.","[G0012] Darkhotel: Darkhotel malware can obtain system time from a compromised host.","[S1064] SVCReady: SVCReady can collect time zone information.","[S0330] Zeus Panda: Zeus Panda collects the current system time (UTC) and sends it back to the C2 server.","[S0501] PipeMon: PipeMon can send time zone information from a compromised host to C2.","[G0114] Chimera: Chimera has used time /t and net time \\\\ip/hostname for system time discovery.","[S0344] Azorult: Azorult can collect the time zone information from the system.","[S0351] Cannon: Cannon can collect the current time zone information from the victim’s machine.","[S1111] DarkGate: DarkGate creates a log file for capturing keylogging, clipboard, and related data using the victim host's current date for the filename. DarkGate queries victim system epoch time during execution. DarkGate captures system time information as part of automated profiling on initial installation.","[S1134] DEADWOOD: DEADWOOD will set a timestamp value to determine when wiping functionality starts. When the timestamp is met on the system, a trigger file is created on the operating system allowing for execution to proceed. If the timestamp is in the past, the wiper will execute immediately.","[S0660] Clambling: Clambling can determine the current time.","[S1159] DUSTTRAP: DUSTTRAP reads the infected system's current time and writes it to a log file during execution.","[S0586] TAINTEDSCRIBE: TAINTEDSCRIBE can execute GetLocalTime for time discovery.","[C0015] C0015: During C0015, the threat actors used the command `net view /all time` to gather the local time of a compromised network.","[S0126] ComRAT: ComRAT has checked the victim system's date and time to perform tasks during business hours (9 to 5, Monday to Friday).","[S0574] BendyBear: BendyBear has the ability to determine local time on a compromised host.","[S0603] Stuxnet: Stuxnet collects the time and date of a system when it is infected.","[G0032] Lazarus Group: A Destover-like implant used by Lazarus Group can obtain the current system time and send it to the C2 server.","[S0376] HOPLIGHT: HOPLIGHT has been observed collecting system time from victim machines.","[S0657] BLUELIGHT: BLUELIGHT can collect the local time on a compromised host.","[S0238] Proxysvc: As part of the data reconnaissance phase, Proxysvc grabs the system time to send back to the control server.","[S0264] OopsIE: OopsIE checks to see if the system is configured with \"Daylight\" time and checks for a specific region to be set for the timezone.","[S0260] InvisiMole: InvisiMole gathers the local system time from the victim’s machine.","[S0450] SHARPSTATS: SHARPSTATS has the ability to identify the current date and time on the compromised host.","[S0690] Green Lambert: Green Lambert can collect the date and time from a compromised host.","[S0439] Okrum: Okrum can obtain the date and time of the compromised system.","[S0268] Bisonal: Bisonal can check the system time set on the infected host.","[S0622] AppleSeed: AppleSeed can pull a timestamp from the victim's machine.","[S1053] AvosLocker: AvosLocker has checked the system time before and after encryption.","[G0089] The White Company: The White Company has checked the current date on the victim system.","[S0466] WindTail: WindTail has the ability to generate the current date and time."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1135","technique_name":"Network Share Discovery","description":"Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. File sharing over a Windows network occurs over the SMB protocol. Net can be used to query a remote system for available shared drives using the net view \\\\\\\\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.","detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained. Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.","procedures":["[S1081] BADHATCH: BADHATCH can check a user's access to the C$ share on a compromised machine.","[S1180] BlackByte Ransomware: BlackByte Ransomware can identify network shares connected to the victim machine.","[S0458] Ramsay: Ramsay can scan for network drives which may contain documents for collection.","[C0015] C0015: During C0015, the threat actors executed the PowerView ShareFinder module to identify open shares.","[S0575] Conti: Conti can enumerate remote open SMB network shares using NetShareEnum().","[G0131] Tonto Team: Tonto Team has used tools such as NBTscan to enumerate network shares.","[S0192] Pupy: Pupy can list local and remote shared drives and folders over SMB.","[S0534] Bazar: Bazar can enumerate shared drives on the domain.","[S1160] Latrodectus: Latrodectus can run `C:\\Windows\\System32\\cmd.exe /c net view /all` to discover network shares.","[S0625] Cuba: Cuba can discover shared resources using the NetShareEnum API call.","[S0236] Kwampirs: Kwampirs collects a list of network shares with the command net share.","[S0650] QakBot: QakBot can use net share to identify network shares for use in lateral movement.","[G0087] APT39: APT39 has used the post exploitation tool CrackMapExec to enumerate network shares.","[S0692] SILENTTRINITY: SILENTTRINITY can enumerate shares on a compromised host.","[S0659] Diavol: Diavol has a `ENMDSKS` command to enumerates available network shares.","[G0105] DarkVishnya: DarkVishnya scanned the network for public shared folders.","[S0039] Net: The net view \\\\remotesystem and net share commands in Net can be used to find shared drives and directories on remote and local systems respectively.","[S1141] LunarWeb: LunarWeb can identify shared resources in compromised environments.","[G0050] APT32: APT32 used the net view command to show all shares available, including the administrative shares such as C$ and ADMIN$.","[S0618] FIVEHANDS: FIVEHANDS can enumerate network shares and mounted drives on a network.","[S0367] Emotet: Emotet has enumerated non-hidden network shares using `WNetEnumResourceW`.","[G0096] APT41: APT41 used the net share command as part of network reconnaissance.","[S1085] Sardonic: Sardonic has the ability to execute the `net view` command.","[S0013] PlugX: PlugX has a module to enumerate network shares.","[S0488] CrackMapExec: CrackMapExec can enumerate the shared folders and associated permissions for a targeted network.","[S0570] BitPaymer: BitPaymer can search for network shares on the domain or workgroup using net view .","[S1139] INC Ransomware: INC Ransomware has the ability to check for shared network drives to encrypt.","[S0363] Empire: Empire can find shared drives on the local system.","[G0114] Chimera: Chimera has used net share and net view to identify network shares of interest.","[S0606] Bad Rabbit: Bad Rabbit enumerates open SMB shares on internal victim networks.","[S1181] BlackByte 2.0 Ransomware: BlackByte 2.0 Ransomware can identify network shares connected to the victim machine.","[S0266] TrickBot: TrickBot module shareDll/mshareDll discovers network shares via the WNetOpenEnumA API.","[C0014] Operation Wocao: During Operation Wocao, threat actors discovered network disks mounted to the system using netstat.","[S1075] KOPILUWAK: KOPILUWAK can use netstat and Net to discover network shares.","[S1129] Akira: Akira can identify remote file shares for encryption.","[S1199] LockBit 2.0: LockBit 2.0 can discover remote shares.","[G0082] APT38: APT38 has enumerated network shares on a compromised host.","[S1073] Royal: Royal can enumerate the shared resources of a given IP addresses using the API call `NetShareEnum`.","[S0689] WhisperGate: WhisperGate can enumerate connected remote logical drives.","[S0617] HELLOKITTY: HELLOKITTY has the ability to enumerate network resources.","[S0660] Clambling: Clambling has the ability to enumerate network shares.","[S1202] LockBit 3.0: LockBit 3.0 can identify network shares on compromised systems.","[S1068] BlackCat: BlackCat has the ability to discover network shares on compromised networks.","[C0049] Leviathan Australian Intrusions: Leviathan scanned and enumerated remote network shares in victim environments during Leviathan Australian Intrusions.","[S0154] Cobalt Strike: Cobalt Strike can query shared drives on the local system.","[S0640] Avaddon: Avaddon has enumerated shared folders and mapped volumes.","[G1043] BlackByte: BlackByte enumerated network shares on victim devices.","[S0696] Flagpro: Flagpro has been used to execute `net view` to discover mapped network shares.","[S0611] Clop: Clop can enumerate network shares.","[S0483] IcedID: IcedID has used the `net view /all` command to show available shares.","[S0638] Babuk: Babuk has the ability to enumerate network shares.","[G1016] FIN13: FIN13 has executed net view commands for enumeration of open shares on compromised machines.","[G0081] Tropic Trooper: Tropic Trooper used netview to scan target systems for shared resources.","[S1212] RansomHub: RansomHub has the ability to target specific network shares for encryption.","[S0612] WastedLocker: WastedLocker can identify network adjacent and accessible drives.","[S0365] Olympic Destroyer: Olympic Destroyer will attempt to enumerate mapped network shares to later attempt to wipe all files on those shares.","[G1032] INC Ransom: INC Ransom has used Internet Explorer to view folders on other systems.","[G0054] Sowbug: Sowbug listed remote shared drives that were accessible from a victim.","[S0233] MURKYTOP: MURKYTOP has the capability to retrieve information about shares on remote hosts.","[S0165] OSInfo: OSInfo discovers shares on the network","[S0603] Stuxnet: Stuxnet enumerates the directories of a network resource.","[S0444] ShimRat: ShimRat can enumerate connected drives for infected host machines.","[G0035] Dragonfly: Dragonfly has identified and browsed file servers in the victim network, sometimes , viewing files pertaining to ICS or Supervisory Control and Data Acquisition (SCADA) systems.","[S1053] AvosLocker: AvosLocker has enumerated shared drives on a compromised network.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used the `net share` command as part of their advanced reconnaissance.","[G0006] APT1: APT1 listed connected network shares.","[S0260] InvisiMole: InvisiMole can gather network share information.","[S0251] Zebrocy: Zebrocy identifies network drives when they are added to victim systems.","[G0102] Wizard Spider: Wizard Spider has used the “net view” command to locate mapped network shares.","[S0250] Koadic: Koadic can scan local network for open SMB.","[S0616] DEATHRANSOM: DEATHRANSOM has the ability to use loop operations to enumerate network resources.","[S0686] QuietSieve: QuietSieve can identify and search networked drives for specific file name extensions.","[S1159] DUSTTRAP: DUSTTRAP can identify and enumerate victim system network shares."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1201","technique_name":"Password Policy Discovery","description":"Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts). Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l , cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies . Adversaries may also leverage a Network Device CLI on network devices to discover password policy information (e.g. show aaa, show aaa common-criteria policy all). Password policies can be discovered in cloud environments using available APIs such as GetAccountPasswordPolicy in AWS .","detection":"Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.","procedures":["[S0039] Net: The net accounts and net accounts /domain commands with Net can be used to obtain password policy information.","[S0488] CrackMapExec: CrackMapExec can discover the password policies applied to the target system.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used the `net accounts` command as part of their advanced reconnaissance.","[G0049] OilRig: OilRig has used net.exe in a script with net accounts /domain to find the password policy of a domain.","[G0114] Chimera: Chimera has used the NtdsAudit utility to collect information related to accounts and passwords.","[S0236] Kwampirs: Kwampirs collects password policy information with the command net accounts.","[G0010] Turla: Turla has used net accounts and net accounts /domain to acquire password policy information.","[S0378] PoshC2: PoshC2 can use Get-PassPol to enumerate the domain password policy."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1217","technique_name":"Browser Information Discovery","description":"Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure. Browser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser. Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., `%APPDATA%/Google/Chrome`).","detection":"Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as Windows Management Instrumentation and PowerShell. System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.","procedures":["[S0274] Calisto: Calisto collects information on bookmarks from Google Chrome.","[S0681] Lizar: Lizar can retrieve browser history and database files.","[C0044] Juicy Mix: During Juicy Mix, OilRig used the CDumper (Chrome browser) and EDumper (Edge browser) data stealers to collect cookies, browsing history, and credentials.","[S0409] Machete: Machete retrieves the user profile data (e.g., browsers) from Chrome and Firefox browsers.","[C0042] Outer Space: During Outer Space, OilRig used a Chrome data dumper named MKG.","[S1122] Mispadu: Mispadu can monitor browser activity for online banking actions and display full-screen overlay images to block user access to the intended site or present additional data fields.","[S1012] PowerLess: PowerLess has a browser info stealer module that can read Chrome and Edge browser database files.","[S0567] Dtrack: Dtrack can retrieve browser history.","[G0117] Fox Kitten: Fox Kitten has used Google Chrome bookmarks to identify internal resources and assets.","[G1017] Volt Typhoon: Volt Typhoon has targeted the browsing history of network administrators.","[G0082] APT38: APT38 has collected browser bookmark information to learn more about compromised hosts, obtain personal information about users, and acquire details about internal network resources.","[S0673] DarkWatchman: DarkWatchman can retrieve browser history.","[S1060] Mafalda: Mafalda can collect the contents of the `%USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data\\LocalState` file.","[S0363] Empire: Empire has the ability to gather browser data such as bookmarks and visited sites.","[S1185] LightSpy: To collect data on the host's Wi-Fi connection history, LightSpy reads the `/Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist` file. It also utilizes Apple's `CWWiFiClient` API to scan for nearby Wi-Fi networks and obtain data on the SSID, security type, and RSSI (signal strength) values.","[S1042] SUGARDUMP: SUGARDUMP has collected browser bookmark and history information.","[S1196] Troll Stealer: Troll Stealer collects information from Chromium-based browsers and Firefox such as cookies, history, downloads, and extensions.","[G1015] Scattered Spider: Scattered Spider retrieves browser histories via infostealer malware such as Raccoon Stealer.","[S0079] MobileOrder: MobileOrder has a command to upload to its C2 server victim browser bookmarks.","[S1213] Lumma Stealer: Lumma Stealer has identified and gathered information from two-factor authentication extensions for multiple browsers.","[G1036] Moonstone Sleet: Moonstone Sleet deployed malware such as YouieLoader capable of capturing victim system browser information.","[G0114] Chimera: Chimera has used type \\\\\\c$\\Users\\\\Favorites\\Links\\Bookmarks bar\\Imported From IE\\*citrix* for bookmark discovery.","[S1153] Cuckoo Stealer: Cuckoo Stealer can collect bookmarks, cookies, and history from Safari."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1482","technique_name":"Domain Trust Discovery","description":"Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts.","detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information, such as `nltest /domain_trusts`. Remote access tools with built-in features may interact directly with the Windows API to gather information. Look for the `DSEnumerateDomainTrusts()` Win32 API call to spot activity associated with Domain Trust Discovery. Information may also be acquired through Windows system management tools such as PowerShell. The .NET method `GetAllTrustRelationships()` can be an indicator of Domain Trust Discovery.","procedures":["[S0363] Empire: Empire has modules for enumerating domain trusts.","[G1043] BlackByte: BlackByte enumerated Active Directory information and trust relationships during operations.","[S0534] Bazar: Bazar can use Nltest tools to obtain information about the domain.","[S0483] IcedID: IcedID used Nltest during initial discovery.","[S1145] Pikabot: Pikabot will gather information concerning the Windows Domain the victim machine is a member of during execution.","[S0552] AdFind: AdFind can gather information about organizational units (OUs) and domain trusts from Active Directory.","[S1071] Rubeus: Rubeus can gather information about domain trusts.","[G1024] Akira: Akira uses the built-in Nltest utility or tools such as AdFind to enumerate Active Directory trusts in victim environments.","[G0114] Chimera: Chimera has nltest /domain_trusts to identify domain trust relationships.","[S1124] SocGholish: SocGholish can profile compromised systems to identify domain trust relationships.","[C0049] Leviathan Australian Intrusions: Leviathan performed Active Directory enumeration of victim environments during Leviathan Australian Intrusions.","[G0030] Lotus Blossom: Lotus Blossom has used tools such as AdFind to make Active Directory queries.","[S1146] MgBot: MgBot includes modules for collecting information on local domain users and permissions.","[S0359] Nltest: Nltest may be used to enumerate trusted domains by using commands such as nltest /domain_trusts.","[S0650] QakBot: QakBot can run nltest /domain_trusts /all_trusts for domain trust discovery.","[G1006] Earth Lusca: Earth Lusca has used Nltest to obtain information about domain controllers.","[S1063] Brute Ratel C4: Brute Ratel C4 can use LDAP queries and `nltest /domain_trusts` for domain trust discovery.","[S0521] BloodHound: BloodHound has the ability to map domain trusts and identify misconfigurations for potential abuse.","[S1160] Latrodectus: Latrodectus can run `C:\\Windows\\System32\\cmd.exe /c nltest /domain_trusts` to discover domain trusts.","[S1081] BADHATCH: BADHATCH can use `nltest.exe /domain_trusts` to discover domain trust relationships on a compromised machine.","[S1159] DUSTTRAP: DUSTTRAP can identify Active Directory information and related items.","[S0378] PoshC2: PoshC2 has modules for enumerating domain trusts.","[G1046] Storm-1811: Storm-1811 has enumerated domain accounts and access during intrusions.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used the `Get-AcceptedDomain` PowerShell cmdlet to enumerate accepted domains through an Exchange Management Shell. They also used AdFind to enumerate domains and to discover trust between federated domains.","[G0059] Magic Hound: Magic Hound has used a web shell to execute `nltest /trusted_domains` to identify trust relationships.","[S0105] dsquery: dsquery can be used to gather information on domain trusts with dsquery * -filter \"(objectClass=trustedDomain)\" -attr *.","[S0194] PowerSploit: PowerSploit has modules such as Get-NetDomainTrust and Get-NetForestTrust to enumerate domain and forest trusts.","[S0266] TrickBot: TrickBot can gather information about domain trusts by utilizing Nltest.","[G0061] FIN8: FIN8 has retrieved a list of trusted domains by using nltest.exe /domain_trusts.","[C0015] C0015: During C0015, the threat actors used the command `nltest /domain_trusts /all_trusts` to enumerate domain trusts."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1497.001","technique_name":"Virtualization/Sandbox Evasion: System Checks","description":"Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks into one script and then have the program exit if it determines the system to be a virtual environment. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`. Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.","detection":"Virtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","procedures":["[S0650] QakBot: QakBot can check the compromised host for the presence of multiple executables associated with analysis tools and halt execution if any are found.","[S0354] Denis: Denis ran multiple system checks, looking for processor and register characteristics, to evade emulation and analysis.","[S0627] SodaMaster: SodaMaster can check for the presence of the Registry key HKEY_CLASSES_ROOT\\\\Applications\\\\VMwareHostOpen.exe before proceeding to its main functionality.","[S0439] Okrum: Okrum's loader can check the amount of physical memory and terminates itself if the host has less than 1.5 Gigabytes of physical memory in total.","[S0260] InvisiMole: InvisiMole can check for artifacts of VirtualBox, Virtual PC and VMware environment, and terminate itself if they are detected.","[G0120] Evilnum: Evilnum has used a component called TerraLoader to check certain hardware and file information to detect sandboxed environments.","[S0024] Dyre: Dyre can detect sandbox analysis environments by inspecting the process list and Registry.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services.","[S0438] Attor: Attor can detect whether it is executed in some virtualized or emulated environment by searching for specific artifacts, such as communication with I/O ports and using VM-specific instructions.","[S1039] Bumblebee: Bumblebee has the ability to search for designated file paths and Registry keys that indicate a virtualized environment from multiple products.","[S0182] FinFisher: FinFisher obtains the hardware device list and checks if the MD5 of the vendor ID is equal to a predefined list in order to check for sandbox/virtualized environments.","[S0373] Astaroth: Astaroth can check for Windows product ID's used by sandboxes and usernames and disk serial numbers associated with analyst environments.","[S0242] SynAck: SynAck checks its directory location in an attempt to avoid launching in a sandbox.","[S0576] MegaCortex: MegaCortex has checked the number of CPUs in the system to avoid being run in a sandbox or emulator.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D checks a number of system parameters to see if it is being run on real hardware or in a virtual machine environment, such as `sysctl hw.model` and the kernel boot time.","[S1048] macOS.OSAMiner: macOS.OSAMiner can parse the output of the native `system_profiler` tool to determine if the machine is running with 4 cores.","[S0226] Smoke Loader: Smoke Loader scans processes to perform anti-VM checks.","[S0561] GuLoader: GuLoader has the ability to perform anti-VM and anti-sandbox checks using string hashing, the API call EnumWindows, and checking for Qemu guest agent.","[S0396] EvilBunny: EvilBunny's dropper has checked the number of processes and the length and strings of its own file name to identify if the malware is in a sandbox environment.","[S0248] yty: yty has some basic anti-sandbox detection that tries to detect Virtual PC, Sandboxie, and VMware.","[S0532] Lucifer: Lucifer can check for specific usernames, computer names, device drivers, DLL's, and virtual devices associated with sandboxed environments and can enter an infinite loop and stop itself if any are detected.","[G1017] Volt Typhoon: Volt Typhoon has run system checks to determine if they were operating in a virtualized environment.","[S0237] GravityRAT: GravityRAT uses WMI to check the BIOS and manufacturer information for strings like \"VMWare\", \"Virtual\", and \"XEN\" and another WMI request to get the current temperature of the hardware to determine if it's a virtual machine environment.","[S1213] Lumma Stealer: Lumma Stealer has queried system resources on the victim device to identify if it is executing in a sandbox or virtualized environments, checking usernames, conducting WMI queries for system details, checking for files commonly found in virtualized environments, searching system services, and inspecting process names. Lumma Stealer has checked system GPU configurations for sandbox detection.","[S0337] BadPatch: BadPatch attempts to detect if it is being run in a Virtual Machine (VM) using a WMI query for disk drive name, BIOS, and motherboard information.","[S0428] PoetRAT: PoetRAT checked the size of the hard drive to determine if it was being run in a sandbox environment. In the event of sandbox detection, it would delete itself by overwriting the malware scripts with the contents of \"License.txt\" and exiting.","[S0612] WastedLocker: WastedLocker checked if UCOMIEnumConnections and IActiveScriptParseProcedure32 Registry keys were detected as part of its anti-analysis technique.","[S0264] OopsIE: OopsIE performs several anti-VM and sandbox checks on the victim's machine. One technique the group has used was to perform a WMI query SELECT * FROM MSAcpi_ThermalZoneTemperature to check the temperature to see if it’s running in a virtual environment.","[S1066] DarkTortilla: DarkTortilla can search a compromised system's running processes and services to detect Hyper-V, QEMU, Virtual PC, Virtual Box, and VMware, as well as Sandboxie.","[S0333] UBoatRAT: UBoatRAT checks for virtualization software such as VMWare, VirtualBox, or QEmu on the compromised machine.","[S0689] WhisperGate: WhisperGate can stop its execution when it recognizes the presence of certain monitoring tools.","[S1087] AsyncRAT: AsyncRAT can identify strings such as Virtual, vmware, or VirtualBox to detect virtualized environments.","[S1018] Saint Bot: Saint Bot has run several virtual machine and sandbox checks, including checking if `Sbiedll.dll` is present in a list of loaded modules, comparing the machine name to `HAL9TH` and the user name to `JohnDoe`, and checking the BIOS version for known virtual machine identifiers.","[G0012] Darkhotel: Darkhotel malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with .Md5.exe, and if the program is executed from the root of the C:\\ drive, as well as checks for sandbox-related libraries.","[S0013] PlugX: PlugX checks if VMware tools is running in the background by searching for any process named \"vmtoolsd\".","[S1019] Shark: Shark can stop execution if the screen width of the targeted machine is not over 600 pixels.","[S0192] Pupy: Pupy has a module that checks a number of indicators on the system to determine if its running on a virtual machine.","[S0626] P8RAT: P8RAT can check the compromised host for processes associated with VMware or VirtualBox environments.","[S0531] Grandoreiro: Grandoreiro can detect VMWare via its I/O port and Virtual PC via the vpcext instruction.","[S0240] ROKRAT: ROKRAT can check for VMware-related files and DLLs related to sandboxes.","[S0332] Remcos: Remcos searches for Sandboxie and VMware on the system.","[S1147] Nightdoor: Nightdoor embeds code from the public `al-khaser` project, a repository that works to detect virtual machines, sandboxes, and malware analysis environments.","[S1070] Black Basta: Black Basta can check system flags and libraries, process timing, and API's to detect code emulation or sandboxing.","[C0001] Frankenstein: During Frankenstein, the threat actors used a script that ran WMI queries to check if a VM or sandbox was running, including VMWare and Virtualbox. The script would also call WMI to determine the number of cores allocated to the system; if less than two the script would stop execution.","[S0270] RogueRobin: RogueRobin uses WMI to check BIOS version for VBOX, bochs, qemu, virtualbox, and vm to check for evidence that the script might be executing within an analysis environment.","[S0644] ObliqueRAT: ObliqueRAT can halt execution if it identifies processes belonging to virtual machine software or analysis tools.","[S0637] NativeZone: NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host.","[S0094] Trojan.Karagany: Trojan.Karagany can detect commonly used and generic virtualization platforms based primarily on drivers and file paths.","[S0657] BLUELIGHT: BLUELIGHT can check to see if the infected machine has VM tools running.","[S1122] Mispadu: Mispadu can run checks to verify if it is running within a virtualized environments including Hyper-V, VirtualBox or VMWare and will terminate execution if the computer name is “JOHN-PC.”","[S1207] XLoader: XLoader performs timing checks using the Read-Time Stamp Counter (RDTSC) instruction on the victim CPU.","[S1064] SVCReady: SVCReady has the ability to determine if its runtime environment is virtualized.","[S0679] Ferocious: Ferocious can run anti-sandbox checks using the Microsoft Excel 4.0 function GET.WORKSPACE to determine the OS version, if there is a mouse present, and if the host is capable of playing sounds.","[S0559] SUNBURST: SUNBURST checked the domain name of the compromised host to verify it was running in a real environment.","[S1086] Snip3: Snip3 has the ability to detect Windows Sandbox, VMWare, or VirtualBox by querying `Win32_ComputerSystem` to extract the `Manufacturer` string.","[S1130] Raspberry Robin: Raspberry Robin performs a variety of system environment checks to determine if it is running in a virtualized or sandboxed environment, such as querying CPU temperature information and network card MAC address information.","[S0588] GoldMax: GoldMax will check if it is being run in a virtualized environment by comparing the collected MAC address to c8:27:cc:c2:37:5a.","[S1160] Latrodectus: Latrodectus can determine if it is running in a virtualized environment by checking the OS version, checking the number of running processes, ensuring a 64-bit application is running on a 64-bit host, and checking if the host has a valid MAC address.","[S0527] CSPY Downloader: CSPY Downloader can search loaded modules, PEB structure, file paths, Registry keys, and memory to determine if it is being debugged or running in a virtual environment.","[S1111] DarkGate: DarkGate queries system resources on an infected machine to identify if it is executing in a sandbox or virtualized environment.","[G0049] OilRig: OilRig has used macros to verify if a mouse is connected to a compromised machine.","[S1179] Exbyte: Exbyte performs various checks to determine if it is running in a sandboxed environment to prevent analysis.","[S1145] Pikabot: Pikabot performs a variety of system checks to determine if it is running in an analysis environment or sandbox, such as checking the number of processors (must be greater than two), and the amount of RAM (must be greater than 2GB).","[S1180] BlackByte Ransomware: BlackByte Ransomware checks for files related to known sandboxes.","[S1159] DUSTTRAP: DUSTTRAP decryption relies on the infected machine's `HKLM\\SOFTWARE\\Microsoft\\Cryptography\\MachineGUID` value."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1497.002","technique_name":"Virtualization/Sandbox Evasion: User Activity Based Checks","description":"Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro or waiting for a user to double click on an embedded image to activate.","detection":"User activity-based checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","procedures":["[G0012] Darkhotel: Darkhotel has used malware that repeatedly checks the mouse cursor position to determine if a real user is on the system.","[S0439] Okrum: Okrum loader only executes the payload after the left mouse button has been pressed at least three times, in order to avoid being executed within virtualized or emulated environments.","[G0046] FIN7: FIN7 used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes.","[S0543] Spark: Spark has used a splash screen to check whether an user actively clicks on the screen before running malicious code."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1497.003","technique_name":"Virtualization/Sandbox Evasion: Time Based Evasion","description":"Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time. Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny. Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data). Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.","detection":"Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","procedures":["[S0565] Raindrop: After initial installation, Raindrop runs a computation to delay execution.","[S0626] P8RAT: P8RAT has the ability to \"sleep\" for a specified time to evade detection.","[S0559] SUNBURST: SUNBURST remained dormant after initial access for a period of up to two weeks.","[S0574] BendyBear: BendyBear can check for analysis environments and signs of debugging using the Windows API kernel32!GetTickCountKernel32 call.","[S0554] Egregor: Egregor can perform a long sleep (greater than or equal to 3 minutes) to evade detection.","[S0611] Clop: Clop has used the sleep command to avoid sandbox detection.","[S0627] SodaMaster: SodaMaster has the ability to put itself to \"sleep\" for a specified time.","[S0660] Clambling: Clambling can wait 30 minutes before initiating contact with C2.","[S0386] Ursnif: Ursnif has used a 30 minute delay after execution to evade sandbox monitoring tools.","[S0439] Okrum: Okrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated.","[S0512] FatDuke: FatDuke can turn itself on or off at random intervals.","[S1066] DarkTortilla: DarkTortilla can implement the `kernel32.dll` Sleep function to delay execution for up to 300 seconds before implementing persistence or processing an addon package.","[S1141] LunarWeb: LunarWeb can pause for a number of hours before entering its C2 communication loop.","[S1039] Bumblebee: Bumblebee has the ability to set a hardcoded and randomized sleep interval.","[S0115] Crimson: Crimson can determine when it has been installed on a host for at least 15 days before downloading the final payload.","[S1138] Gootloader: Gootloader can designate a sleep period of more than 22 seconds between stages of infection.","[S1018] Saint Bot: Saint Bot has used the command `timeout 20` to pause the execution of its initial loader.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used tools that collected `GetTickCount` and `GetSystemTimeAsFileTime` data to detect sandbox or VMware services.","[S0671] Tomiris: Tomiris has the ability to sleep for at least nine minutes to evade sandbox-based analysis systems.","[S0697] HermeticWiper: HermeticWiper has the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host.","[S0447] Lokibot: Lokibot has performed a time-based anti-debug check before downloading its third stage.","[S1086] Snip3: Snip3 can execute `WScript.Sleep` to delay execution of its second stage.","[S1212] RansomHub: RansomHub can sleep for a set number of minutes before beginning execution.","[S0268] Bisonal: Bisonal has checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing.","[S1034] StrifeWater: StrifeWater can modify its sleep time responses from the default of 20-22 seconds.","[S0453] Pony: Pony has delayed execution using a built-in function to avoid detection and analysis.","[S1132] IPsec Helper: IPsec Helper will sleep for a random number of seconds, iterating 200 times over sleeps between one to three seconds, before continuing execution flow.","[S0266] TrickBot: TrickBot has used printf and file I/O loops to delay process execution as part of API hammering.","[S1059] metaMain: metaMain has delayed execution for five to six minutes during its persistence establishment process.","[S0650] QakBot: The QakBot dropper can delay dropping the payload to evade detection.","[S0513] LiteDuke: LiteDuke can wait 30 seconds before executing additional code if security software is detected.","[S0632] GrimAgent: GrimAgent can sleep for 195 - 205 seconds after payload execution and before deleting its task.","[S0534] Bazar: Bazar can use a timer to delay execution of core functionality.","[S0396] EvilBunny: EvilBunny has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox.","[S0642] BADFLICK: BADFLICK has delayed communication to the actor-controlled IP address by 5 minutes.","[S0493] GoldenSpy: GoldenSpy's installer has delayed installation of GoldenSpy for two hours after it reaches a victim system.","[S0689] WhisperGate: WhisperGate can pause for 20 seconds to bypass antivirus solutions.","[S0694] DRATzarus: DRATzarus can use the `GetTickCount` and `GetSystemTimeAsFileTime` API calls to measure function timing. DRATzarus can also remotely shut down into sleep mode under specific conditions to evade detection.","[S0588] GoldMax: GoldMax has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value.","[S0561] GuLoader: GuLoader has the ability to perform anti-debugging based on time checks, API calls, and CPUID.","[S1064] SVCReady: SVCReady can enter a sleep stage for 30 minutes to evade detection.","[S1063] Brute Ratel C4: Brute Ratel C4 can call `NtDelayExecution` to pause execution.","[S0658] XCSSET: Using the machine's local time, XCSSET waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, .report. After the elapsed time, XCSSET executes additional modules.","[S0595] ThiefQuest: ThiefQuest invokes time call to check the system's time, executes a sleep command, invokes a second time call, and then compares the time difference between the two time calls and the amount of time the system slept to identify the sandbox.","[S0584] AppleJeus: AppleJeus has waited a specified time before downloading a second stage payload."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1518.001","technique_name":"Software Discovery: Security Software Discovery","description":"Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as cloud monitoring agents and anti-virus. Adversaries may use the information from Security Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Example commands that can be used to obtain security software information are netsh, reg query with Reg, dir with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software. Adversaries may also utilize the Cloud API to discover cloud-native security software installed on compute infrastructure, such as the AWS CloudWatch agent, Azure VM Agent, and Google Cloud Monitor agent. These agents may collect metrics and logs from the VM, which may be centrally aggregated in a cloud-based monitoring platform.","detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell. In cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.","procedures":["[G0012] Darkhotel: Darkhotel has searched for anti-malware strings and anti-virus processes running on the system.","[S1130] Raspberry Robin: Raspberry Robin attempts to identify security software running on the victim machine, such as BitDefender, Avast, and Kaspersky.","[S0611] Clop: Clop can search for processes with antivirus and antimalware product names.","[S0469] ABK: ABK has the ability to identify the installed anti-virus product on the compromised host.","[C0014] Operation Wocao: During Operation Wocao, threat actors used scripts to detect security software.","[G0121] Sidewinder: Sidewinder has used the Windows service winmgmts:\\\\.\\root\\SecurityCenter2 to check installed antivirus products.","[S0455] Metamorfo: Metamorfo collects a list of installed antivirus software from the victim’s system.","[S0650] QakBot: QakBot can identify the installed antivirus product on a targeted system.","[S0339] Micropsia: Micropsia searches for anti-virus software and firewall products installed on the victim’s machine using WMI.","[G1008] SideCopy: SideCopy uses a loader DLL file to collect AV product names from an infected host.","[S0115] Crimson: Crimson contains a command to collect information about anti-virus software on the victim.","[S0330] Zeus Panda: Zeus Panda checks to see if anti-virus, anti-spyware, or firewall products are installed in the victim’s environment.","[G0112] Windshift: Windshift has used malware to identify installed AV and commonly used forensic and malware analysis tools.","[G0082] APT38: APT38 has identified security software, configurations, defensive tools, and sensors installed on a compromised system.","[G0061] FIN8: FIN8 has used Registry keys to detect and avoid executing in potential sandboxes.","[G1044] APT42: APT42 has used Windows Management Instrumentation (WMI) to check for anti-virus products.","[S1025] Amadey: Amadey has checked for a variety of antivirus products.","[G1018] TA2541: TA2541 has used tools to search victim systems for security products such as antivirus and firewall software.","[S0244] Comnie: Comnie attempts to detect several anti-virus products.","[G0089] The White Company: The White Company has checked for specific antivirus products on the target’s computer, including Kaspersky, Quick Heal, AVG, BitDefender, Avira, Sophos, Avast!, and ESET.","[G0019] Naikon: Naikon uses commands such as netsh advfirewall firewall to discover local firewall settings.","[S0534] Bazar: Bazar can identify the installed antivirus engine.","[G0080] Cobalt Group: Cobalt Group used a JavaScript backdoor that is capable of collecting a list of the security solutions installed on the victim's machine.","[S0046] CozyCar: The main CozyCar dropper checks whether the victim has an anti-virus product installed. If the installed product is on a predetermined list, the dropper will exit.","[S1213] Lumma Stealer: Lumma Stealer has detected antivirus processes using commands such as “tasklist” and “findstr.”","[S1013] ZxxZ: ZxxZ can search a compromised host to determine if it is running Windows Defender or Kasperky antivirus.","[S0196] PUNCHBUGGY: PUNCHBUGGY can gather AVs registered in the system.","[S1066] DarkTortilla: DarkTortilla can check for the Kaspersky Anti-Virus suite.","[S0223] POWERSTATS: POWERSTATS has detected security tools.","[S0267] FELIXROOT: FELIXROOT checks for installed security software like antivirus and firewall.","[S0467] TajMahal: TajMahal has the ability to identify which anti-virus products, firewalls, and anti-spyware products are in use.","[S0256] Mosquito: Mosquito's installer searches the Registry and system to see if specific antivirus tools are installed on the system.","[S0257] VERMIN: VERMIN uses WMI to check for anti-virus software installed on the system.","[S0476] Valak: Valak can determine if a compromised host has security products installed.","[S0468] Skidmap: Skidmap has the ability to check if /usr/sbin/setenforce exists. This file controls what mode SELinux is in.","[S0143] Flame: Flame identifies security software such as antivirus through the Security module.","[S0373] Astaroth: Astaroth checks for the presence of Avast antivirus in the C:\\Program\\Files\\ folder.","[S1039] Bumblebee: Bumblebee can identify specific analytical tools based on running processes.","[S0473] Avenger: Avenger has the ability to identify installed anti-virus products on a compromised host.","[S0184] POWRUNER: POWRUNER may collect information on the victim's anti-virus software.","[C0001] Frankenstein: During Frankenstein, the threat actors used WMI queries to determine if analysis tools were running on a compromised system.","[S0657] BLUELIGHT: BLUELIGHT can collect a list of anti-virus products installed on a machine.","[S1065] Woody RAT: Woody RAT can detect Avast Software, Doctor Web, Kaspersky, AVG, ESET, and Sophos antivirus programs.","[S0368] NotPetya: NotPetya determines if specific antivirus programs are running on an infected host machine.","[S0388] YAHOYAH: YAHOYAH checks for antimalware solution processes on the system.","[G0102] Wizard Spider: Wizard Spider has used WMI to identify anti-virus products installed on a victim's machine.","[S1159] DUSTTRAP: DUSTTRAP can identify security software.","[S0457] Netwalker: Netwalker can detect and terminate active security software-related processes on infected systems.","[G0040] Patchwork: Patchwork scanned the “Program Files” directories for a directory with the string “Total Security” (the installation path of the “360 Total Security” antivirus tool).","[S0652] MarkiRAT: MarkiRAT can check for running processes on the victim’s machine to look for Kaspersky and Bitdefender antivirus products.","[G0069] MuddyWater: MuddyWater has used malware to check running processes against a hard-coded list of security tools often used by malware researchers.","[S0679] Ferocious: Ferocious has checked for AV software as part of its persistence process.","[S0531] Grandoreiro: Grandoreiro can list installed security products including the Trusteer and Diebold Warsaw GAS Tecnologia online banking protections.","[S0098] T9000: T9000 performs checks for various antivirus and security products during installation.","[S0023] CHOPSTICK: CHOPSTICK checks for antivirus and forensics software.","[S0472] down_new: down_new has the ability to detect anti-virus products and processes on a compromised host.","[S0471] build_downer: build_downer has the ability to detect if the infected host is running an anti-virus process.","[S0381] FlawedAmmyy: FlawedAmmyy will attempt to detect anti-virus products during the initial infection.","[S0689] WhisperGate: WhisperGate can recognize the presence of monitoring tools on a target system.","[S0491] StrongPity: StrongPity can identify if ESET or BitDefender antivirus are installed before dropping its payload.","[S0380] StoneDrill: StoneDrill can check for antivirus and antimalware programs.","[S0483] IcedID: IcedID can identify AV products on an infected host using the following command: ` WMIC.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get * /Format:List`.","[S0057] Tasklist: Tasklist can be used to enumerate security software currently running on a system by process name of known products.","[S0484] Carberp: Carberp has queried the infected system's registry searching for specific registry keys associated with antivirus products.","[S1063] Brute Ratel C4: Brute Ratel C4 can detect EDR userland hooks.","[S1179] Exbyte: Exbyte checks for the presence of various security software products during execution.","[G0143] Aquatic Panda: Aquatic Panda has attempted to discover third party endpoint detection and response (EDR) tools on compromised systems.","[S0653] xCaon: xCaon has checked for the existence of Kaspersky antivirus software on the system.","[S0171] Felismus: Felismus checks for processes associated with anti-virus vendors.","[G0094] Kimsuky: Kimsuky has checked for the presence of antivirus software with powershell Get-CimInstance -Namespace root/securityCenter2 – classname antivirusproduct.","[S0666] Gelsemium: Gelsemium can check for the presence of specific security products.","[G0139] TeamTNT: TeamTNT has searched for security products on infected machines.","[S0283] jRAT: jRAT can list security software, such as by using WMIC to identify anti-virus products installed on the victim’s machine and to obtain firewall details.","[G1026] Malteiro: Malteiro collects the installed antivirus on the victim machine.","[S0088] Kasidet: Kasidet has the ability to identify any anti-virus installed on the infected system.","[S0113] Prikormka: A module in Prikormka collects information from the victim about installed anti-virus software.","[S0270] RogueRobin: RogueRobin enumerates running processes to search for Wireshark and Windows Sysinternals suite.","[S0579] Waterbear: Waterbear can find the presence of a specific security software.","[S0603] Stuxnet: Stuxnet enumerates the currently running processes related to a variety of security products.","[S1122] Mispadu: Mispadu can list installed security products in the victim’s environment.","[S0201] JPIN: JPIN checks for the presence of certain security-related processes and deletes its installer/uninstaller component if it identifies any of them.","[S0062] DustySky: DustySky checks for the existence of anti-virus.","[G0010] Turla: Turla has obtained information on security software, including security logging information that may indicate whether their malware has been detected.","[S1160] Latrodectus: Latrodectus has the ability to identify installed antivirus products.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP is capable of checking whether a compromised device is running DeepFreeze by Faronics.","[S0176] Wingbird: Wingbird checks for the presence of Bitdefender security software.","[G1022] ToddyCat: ToddyCat can determine is Kaspersky software is running on an endpoint by running `cmd /c wmic process where name=\"avp.exe\"`.","[S1111] DarkGate: DarkGate looks for various security products by process name using hard-coded values in the malware. DarkGate will not execute its keylogging thread if a process name associated with Trend Micro anti-virus is identified, or if runtime checks identify the presence of Kaspersky anti-virus. DarkGate will initiate a new thread if certain security products are identified on the victim, and recreate any malicious files associated with it if it determines they were removed by security software in a new system location.","[S0681] Lizar: Lizar can search for processes associated with an anti-virus product from list.","[S0658] XCSSET: XCSSET searches firewall configuration files located in /Library/Preferences/ and uses csrutil status to determine if System Integrity Protection is enabled.","[S0284] More_eggs: More_eggs can obtain information on installed anti-malware programs.","[S0363] Empire: Empire can enumerate antivirus software on the target.","[S0492] CookieMiner: CookieMiner has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found.","[S0513] LiteDuke: LiteDuke has the ability to check for the presence of Kaspersky security software.","[S0337] BadPatch: BadPatch uses WMI to enumerate installed security products in the victim’s environment.","[G1040] Play: Play has used the information-stealing tool Grixba to scan for anti-virus software.","[S1060] Mafalda: Mafalda can search for a variety of security software programs, EDR systems, and malware analysis tools.","[G0081] Tropic Trooper: Tropic Trooper can search for anti-virus software running on the system.","[S0568] EVILNUM: EVILNUM can search for anti-virus products on the system.","[S0559] SUNBURST: SUNBURST checked for a variety of antivirus/endpoint detection agents prior to execution.","[S1193] TAMECAT: TAMECAT has used Windows Management Instrumentation (WMI) to check for anti-virus products.","[S0595] ThiefQuest: ThiefQuest uses the kill_unwanted function to get a list of running processes, compares each process with an encrypted list of “unwanted” security related programs, and kills the processes for security related programs.","[S0091] Epic: Epic searches for anti-malware services running on the victim’s machine and terminates itself if it finds them.","[S0148] RTM: RTM can obtain information about security software on the victim.","[S0673] DarkWatchman: DarkWatchman can search for anti-virus products on the system.","[S0182] FinFisher: FinFisher probes the system to check for antimalware processes.","[S0260] InvisiMole: InvisiMole can check for the presence of network sniffers, AV, and BitDefender firewall.","[S0249] Gold Dragon: Gold Dragon checks for anti-malware products and processes.","[S0142] StreamEx: StreamEx has the ability to scan for security tools such as firewalls and antivirus tools.","[S1029] AuTo Stealer: AuTo Stealer has the ability to collect information about installed AV products from an infected host.","[S0688] Meteor: Meteor has the ability to search for Kaspersky Antivirus on a victim's machine.","[G1043] BlackByte: BlackByte enumerated installed security products during operations.","[S1028] Action RAT: Action RAT can identify AV products on an infected host using the following command: `cmd.exe WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List`.","[S0396] EvilBunny: EvilBunny has been observed querying installed antivirus software.","[S0646] SpicyOmelette: SpicyOmelette can check for the presence of 29 different antivirus tools.","[S0125] Remsec: Remsec has a plugin detect security products via active drivers.","[S1091] Pacu: Pacu can enumerate AWS security services, including WAF rules and GuardDuty detectors.","[S1044] FunnyDream: FunnyDream can identify the processes for Bkav antivirus.","[S0553] MoleNet: MoleNet can use WMI commands to check the system for firewall and antivirus software.","[S0108] netsh: netsh can be used to discover system firewall settings.","[S1180] BlackByte Ransomware: BlackByte Ransomware looks for security software products prior to full execution.","[S0692] SILENTTRINITY: SILENTTRINITY can determine if an anti-virus product is installed through the resolution of the service's virtual SID.","[S0501] PipeMon: PipeMon can check for the presence of ESET and Kaspersky security software.","[S0680] LitePower: LitePower can identify installed AV software.","[C0035] KV Botnet Activity: KV Botnet Activity involved removal of security tools, as well as other identified IOT malware, from compromised devices.","[G0106] Rocke: Rocke used scripts which detected and uninstalled antivirus software.","[S1141] LunarWeb: LunarWeb has run shell commands to obtain a list of installed security products."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1526","technique_name":"Cloud Service Discovery","description":"An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Entra ID, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs. Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Microsoft Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity. For example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services. Adversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs.","detection":"Cloud service discovery techniques will likely occur throughout an operation where an adversary is targeting cloud-based systems and services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Normal, benign system and network events that look like cloud service discovery may be uncommon, depending on the environment and how they are used. Monitor cloud service usage for anomalous behavior that may indicate adversarial presence within the environment.","procedures":["[S0677] AADInternals: AADInternals can enumerate information about a variety of cloud services, such as Office 365 and Sharepoint instances or OpenID Configurations.","[S0684] ROADTools: ROADTools can enumerate Azure AD applications and service principals.","[S1091] Pacu: Pacu can enumerate AWS services, such as CloudTrail and CloudWatch."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1538","technique_name":"Cloud Service Dashboard","description":"An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, review findings of potential security risks, and run additional queries, such as finding public IP addresses and open ports. Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This also allows the adversary to gain information without manually making any API requests.","detection":"Monitor account activity logs to see actions performed and activity associated with the cloud service management console. Some cloud providers, such as AWS, provide distinct log events for login attempts to the management console.","procedures":["[G1015] Scattered Spider: Scattered Spider abused AWS Systems Manager Inventory to identify targets on the compromised network prior to lateral movement."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1580","technique_name":"Cloud Infrastructure Discovery","description":"An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services. Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a DescribeInstances API within the Amazon EC2 API that can return information about one or more instances within an account, the ListBuckets API that returns a list of all buckets owned by the authenticated sender of the request, the HeadBucket API to determine a bucket’s existence along with access permissions of the request sender, or the GetPublicAccessBlock API to retrieve access block configuration for a bucket. Similarly, GCP's Cloud SDK CLI provides the gcloud compute instances list command to list all Google Compute Engine instances in a project , and Azure's CLI command az vm list lists details of virtual machines. In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning. An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as DescribeDBInstances to determine size, owner, permissions, and network ACLs of database resources. Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves.","detection":"Establish centralized logging for the activity of cloud infrastructure components. Monitor logs for actions that could be taken to gather information about cloud infrastructure, including the use of discovery API calls by new or unexpected users and enumerations from unknown or malicious IP addresses. To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.","procedures":["[G1015] Scattered Spider: Scattered Spider enumerates cloud environments to identify server and backup management infrastructure, resource access, databases and storage containers.","[S1091] Pacu: Pacu can enumerate AWS infrastructure, such as EC2 instances."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1613","technique_name":"Container and Resource Discovery","description":"Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster. These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment’s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary’s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution.","detection":"Establish centralized logging for the activity of container and Kubernetes cluster components. This can be done by deploying logging agents on Kubernetes nodes and retrieving logs from sidecar proxies for application pods to detect malicious activity at the cluster level. Monitor logs for actions that could be taken to gather information about container infrastructure, including the use of discovery API calls by new or unexpected users. Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.","procedures":["[S0683] Peirates: Peirates can enumerate Kubernetes pods in a given namespace.","[G0139] TeamTNT: TeamTNT has checked for running containers with docker ps and for specific container names with docker inspect. TeamTNT has also searched for Kubernetes pods running in a local network.","[S0601] Hildegard: Hildegard has used masscan to search for kubelets and the kubelet API for additional running containers."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1614.001","technique_name":"System Location Discovery: System Language Discovery","description":"Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities. There are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Query Registry and calls to Native API functions. For example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID. On a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.","detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor processes and command-line arguments for actions that could be taken to gather system language information. This may include calls to various API functions and interaction with system configuration settings such as the Windows Registry.","procedures":["[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group deployed malware designed not to run on computers set to Korean, Japanese, or Chinese in Windows language preferences.","[S1153] Cuckoo Stealer: Cuckoo Stealer can check the systems `LANG` environmental variable to prevent infecting devices from Armenia (`hy_AM`), Belarus (`be_BY`), Kazakhstan (`kk_KZ`), Russia (`ru_RU`), and Ukraine (`uk_UA`).","[S0652] MarkiRAT: MarkiRAT can use the GetKeyboardLayout API to check if a compromised host's keyboard is set to Persian.","[S0658] XCSSET: XCSSET uses AppleScript to check the host's language and location with the command user locale of (get system info).","[S0625] Cuba: Cuba can check if Russian language is installed on the infected machine by using the function GetKeyboardLayoutList.","[G0004] Ke3chang: Ke3chang has used implants to collect the system language ID of a compromised machine.","[S0696] Flagpro: Flagpro can check whether the target system is using Japanese, Taiwanese, or English through detection of specific Windows Security and Internet Explorer dialog.","[S0483] IcedID: IcedID used the following command to check the country/language of the active console: ` cmd.exe /c chcp >&2`.","[S0640] Avaddon: Avaddon checks for specific keyboard layouts and OS languages to avoid targeting Commonwealth of Independent States (CIS) entities.","[S0449] Maze: Maze has checked the language of the machine with function GetUserDefaultUILanguage and terminated execution if the language matches with an entry in the predefined list.","[S1122] Mispadu: Mispadu checks and will terminate execution if the compromised system’s language ID is not Spanish or Portuguese.","[S0543] Spark: Spark has checked the results of the GetKeyboardLayoutList and the language name returned by GetLocaleInfoA to make sure they contain the word “Arabic” before executing.","[G1043] BlackByte: BlackByte identified system language settings to determine follow-on execution.","[S0446] Ryuk: Ryuk has been observed to query the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language and the value InstallLanguage. If the machine has the value 0x419 (Russian), 0x422 (Ukrainian), or 0x423 (Belarusian), it stops execution.","[S1138] Gootloader: Gootloader can determine if a victim's computer is running an operating system with specific language preferences.","[S0085] S-Type: S-Type has attempted to determine if a compromised system was using a Japanese keyboard via the `GetKeyboardType` API call.","[S0534] Bazar: Bazar can perform a check to ensure that the operating system's keyboard and language settings are not set to Russian.","[S0616] DEATHRANSOM: Some versions of DEATHRANSOM have performed language ID and keyboard layout checks; if either of these matched Russian, Kazakh, Belarusian, Ukrainian or Tatar DEATHRANSOM would exit.","[S0691] Neoichor: Neoichor can identify the system language on a compromised host.","[S0611] Clop: Clop has checked the keyboard language using the GetKeyboardLayout() function to avoid installation on Russian-language or other Commonwealth of Independent States-language machines; it will also check the GetTextCharset function.","[S0330] Zeus Panda: Zeus Panda queries the system's keyboard mapping to determine the language used on the system. It will terminate execution if it detects LANG_RUSSIAN, LANG_BELARUSIAN, LANG_KAZAK, or LANG_UKRAINIAN.","[S0632] GrimAgent: GrimAgent has used Accept-Language to identify hosts in the United Kingdom, United States, France, and Spain.","[S0547] DropBook: DropBook has checked for the presence of Arabic language in the infected machine's settings.","[S1199] LockBit 2.0: LockBit 2.0 can check if a targeted machine is using a set of Eastern European languages and exit without infection if so.","[S0496] REvil: REvil can check the system language using GetUserDefaultUILanguage and GetSystemDefaultUILanguage. If the language is found in the list, the process terminates.","[S1183] StrelaStealer: StrelaStealer variants check system language settings via keyboard layout or similar mechanisms.","[S1200] StealBit: StealBit can determine system location based on the default language setting and will not execute on systems located in former Soviet countries.","[S1202] LockBit 3.0: LockBit 3.0 will not affect machines with language settings matching a defined exlusion list of mainly Eastern European languages.","[S0242] SynAck: SynAck lists all the keyboard layouts installed on the victim’s system using GetKeyboardLayoutList API and checks against a hardcoded language code list. If a match if found, SynAck sleeps for 300 seconds and then exits without encrypting files.","[S0083] Misdat: Misdat has attempted to detect if a compromised host had a Japanese keyboard via the Windows API call `GetKeyboardType`.","[S0546] SharpStage: SharpStage has been used to target Arabic-speaking users and used code that checks if the compromised machine has the Arabic language installed.","[S1180] BlackByte Ransomware: BlackByte Ransomware identifies the language on the victim system.","[G1026] Malteiro: Malteiro will terminate Mispadu's infection process if the language of the victim machine is not Spanish or Portuguese."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1615","technique_name":"Group Policy Discovery","description":"Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\\\SYSVOL\\\\Policies\\`. Adversaries may use commands such as gpresult or various publicly available PowerShell functions, such as Get-DomainGPO and Get-DomainGPOLocalGroup, to gather information on Group Policy settings. Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain or Tenant Policy Modification) for their benefit.","detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained. Monitor for suspicious use of gpresult. Monitor for the use of PowerShell functions such as Get-DomainGPO and Get-DomainGPOLocalGroup and processes spawning with command-line arguments containing GPOLocalGroup. Monitor for abnormal LDAP queries with filters for groupPolicyContainer and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed.","procedures":["[S1141] LunarWeb: LunarWeb can capture information on group policy settings","[C0049] Leviathan Australian Intrusions: Leviathan performed extensive Active Directory enumeration of victim environments during Leviathan Australian Intrusions.","[S1159] DUSTTRAP: DUSTTRAP can identify victim environment Group Policy information.","[S0521] BloodHound: BloodHound has the ability to collect local admin information via GPO.","[G0010] Turla: Turla surveys a system upon check-in to discover Group Policy details using the gpresult command.","[S0363] Empire: Empire includes various modules for enumerating Group Policy.","[S0082] Emissary: Emissary has the capability to execute gpresult."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1619","technique_name":"Cloud Storage Object Discovery","description":"Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage. Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure. Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS and List Blobs in Azure .","detection":"System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained. Monitor cloud logs for API calls used for file or object enumeration for unusual activity.","procedures":["[S1091] Pacu: Pacu can enumerate AWS storage services, such as S3 buckets and Elastic Block Store volumes.","[S0683] Peirates: Peirates can list AWS S3 buckets."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1622","technique_name":"Debugger Evasion","description":"Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads. Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads. Specific checks will vary based on the target and/or adversary. On Windows, this may involve Native API function calls such as IsDebuggerPresent() and NtQueryInformationProcess(), or manually checking the BeingDebugged flag of the Process Environment Block (PEB). On Linux, this may involve querying `/proc/self/status` for the `TracerPID` field, which indicates whether or not the process is being traced by dynamic analysis tools. Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would “swallow” or handle the potential error). Malware may also leverage Structured Exception Handling (SEH) to detect debuggers by throwing an exception and detecting whether the process is suspended. SEH handles both hardware and software expectations, providing control over the exceptions including support for debugging. If a debugger is present, the program’s control will be transferred to the debugger, and the execution of the code will be suspended. If the debugger is not present, control will be transferred to the SEH handler, which will automatically handle the exception and allow the program’s execution to continue. Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as OutputDebugStringW().","detection":"Debugger related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious Native API function calls as well as processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. Monitor debugger logs for signs of abnormal and potentially malicious activity.","procedures":["[S1213] Lumma Stealer: Lumma Stealer has checked for debugger strings by invoking `GetForegroundWindow` and looks for strings containing “x32dbg”, “x64dbg”, “windbg”, “ollydbg”, “dnspy”, “immunity debugger”, “hyperdbg”, “debug”, “debugger”, “cheat engine”, “cheatengine” and “ida”.","[S1087] AsyncRAT: AsyncRAT can use the `CheckRemoteDebuggerPresent` function to detect the presence of a debugger.","[S1200] StealBit: StealBit can detect it is being run in the context of a debugger.","[S1183] StrelaStealer: StrelaStealer variants include functionality to identify and evade debuggers.","[S1111] DarkGate: DarkGate checks the BeingDebugged flag in the PEB structure during execution to identify if the malware is being debugged.","[S1145] Pikabot: Pikabot features several methods to evade debugging by analysts, including checks for active debuggers, the use of breakpoints during execution, and checking various system information items such as system memory and the number of processors.","[S0240] ROKRAT: ROKRAT can check for debugging tools.","[S0694] DRATzarus: DRATzarus can use `IsDebuggerPresent` to detect whether a debugger is present on a victim.","[S1070] Black Basta: The Black Basta dropper can check system flags, CPU registers, CPU instructions, process timing, system libraries, and APIs to determine if a debugger is present.","[S1018] Saint Bot: Saint Bot has used `is_debugger_present` as part of its environmental checks.","[S1207] XLoader: XLoader uses anti-debugging mechanisms such as calling `NtQueryInformationProcess` with `InfoClass=7`, referencing `ProcessDebugPort`, to determine if it is being analyzed.","[S1130] Raspberry Robin: Raspberry Robin leverages anti-debugging mechanisms through the use of ThreadHideFromDebugger.","[S1202] LockBit 3.0: LockBit 3.0 can check heap memory parameters for indications of a debugger and stop the flow of events to the attached debugger in order to hinder dynamic analysis.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used tools that used the `IsDebuggerPresent` call to detect debuggers.","[S1066] DarkTortilla: DarkTortilla can detect debuggers by using functions such as `DebuggerIsAttached` and `DebuggerIsLogging`. DarkTortilla can also detect profilers by verifying the `COR_ENABLE_PROFILING` environment variable is present and active.","[S1060] Mafalda: Mafalda can search for debugging tools on a compromised host.","[S0595] ThiefQuest: ThiefQuest uses a function named is_debugging to perform anti-debugging logic. The function invokes sysctl checking the returned value of P_TRACED. ThiefQuest also calls ptrace with the PTRACE_DENY_ATTACH flag to prevent debugging.","[S1160] Latrodectus: Latrodectus has the ability to check for the presence of debuggers.","[S1039] Bumblebee: Bumblebee can search for tools used in static analysis."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1652","technique_name":"Device Driver Discovery","description":"Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation). Many OS utilities may provide information about local device drivers, such as `driverquery.exe` and the `EnumDeviceDrivers()` API function on Windows. Information about device drivers (as well as associated services, i.e., System Service Discovery) may also be available in the Registry. On Linux/macOS, device drivers (in the form of kernel modules) may be visible within `/dev` or using utilities such as `lsmod` and `modinfo`.","detection":null,"procedures":["[S0376] HOPLIGHT: HOPLIGHT can enumerate device drivers located in the registry at `HKLM\\Software\\WBEM\\WDM`.","[S1139] INC Ransomware: INC Ransomware can verify the presence of specific drivers on compromised hosts including Microsoft Print to PDF and Microsoft XPS Document Writer.","[S0125] Remsec: Remsec has a plugin to detect active drivers of some security products."],"tactics":"TA0007 - Discovery"}
{"technique_id":"T1654","technique_name":"Log Enumeration","description":"Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery). Host binaries may be leveraged to collect system logs. Examples include using `wevtutil.exe` or PowerShell on Windows to access and/or export security event information. In cloud environments, adversaries may leverage utilities such as the Azure VM Agent’s `CollectGuestLogs.exe` to collect security logs from cloud hosted infrastructure. Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis. In addition to gaining a better understanding of the environment, adversaries may also monitor logs in real time to track incident response procedures. This may allow them to adjust their techniques in order to maintain persistence or evade defenses.","detection":null,"procedures":["[G1023] APT5: APT5 has used the BLOODMINE utility to parse and extract information from Pulse Secure Connect logs.","[G1003] Ember Bear: Ember Bear has enumerated SECURITY and SYSTEM log files during intrusions.","[G1017] Volt Typhoon: Volt Typhoon has used `wevtutil.exe` and the PowerShell command `Get-EventLog security` to enumerate Windows logs to search for successful logons.","[G0143] Aquatic Panda: Aquatic Panda enumerated logs related to authentication in Linux environments prior to deleting selective entries for defense evasion purposes.","[S1091] Pacu: Pacu can collect CloudTrail event histories and CloudWatch logs.","[S1191] Megazord: Megazord has the ability to print the trace, debug, error, info, and warning logs.","[S1194] Akira _v2: Akira _v2 can enumerate the trace, debug, error, info, and warning logs on targeted systems.","[S1159] DUSTTRAP: DUSTTRAP can identify infected system log information."],"tactics":"TA0007 - Discovery"}