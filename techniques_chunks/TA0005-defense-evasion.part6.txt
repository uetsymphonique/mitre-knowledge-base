{"technique_id":"T1542.001","technique_name":"Pre-OS Boot: System Firmware","description":"Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.","detection":"System firmware manipulation may be detected. Dump and inspect BIOS images on vulnerable systems and compare against known good images. Analyze differences to determine if malicious changes have occurred. Log attempts to read/write to BIOS and compare against known patching behavior. Likewise, EFI modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed.","procedures":["[S0397] LoJax: LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.","[S0001] Trojan.Mebromi: Trojan.Mebromi performs BIOS modification and can download and execute a file as well as protect itself from removal.","[S0047] Hacking Team UEFI Rootkit: Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1542.002","technique_name":"Pre-OS Boot: Component Firmware","description":"Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components/devices that may not have the same capability or level of integrity checking. Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.","detection":"Data and telemetry from use of device drivers (i.e. processes and API calls) and/or provided by SMART (Self-Monitoring, Analysis and Reporting Technology) disk monitoring may reveal malicious manipulations of components. Otherwise, this technique may be difficult to detect since malicious activity is taking place on system components possibly outside the purview of OS security and integrity mechanisms. Disk check and forensic utilities may reveal indicators of malicious firmware such as strings, unexpected disk partition table entries, or blocks of otherwise unusual memory that warrant deeper investigation. Also consider comparing components, including hashes of component firmware and behavior, against known good images.","procedures":["[G0020] Equation: Equation is known to have the capability to overwrite the firmware on hard drives from some manufacturers.","[S0687] Cyclops Blink: Cyclops Blink has maintained persistence by patching legitimate device firmware when it is downloaded, including that of WatchGuard devices."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1542.003","technique_name":"Pre-OS Boot: Bootkit","description":"Adversaries may use bootkits to persist on systems. A bootkit is a malware variant that modifies the boot sectors of a hard drive, allowing malicious code to execute before a computer's operating system has loaded. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly. In BIOS systems, a bootkit may modify the Master Boot Record (MBR) and/or Volume Boot Record (VBR). The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code. In UEFI (Unified Extensible Firmware Interface) systems, a bootkit may instead create or modify files in the EFI system partition (ESP). The ESP is a partition on data storage used by devices containing UEFI that allows the system to boot the OS and other utilities used by the system. An adversary can use the newly created or patched files in the ESP to run malicious kernel code.","detection":"Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.","procedures":["[S0484] Carberp: Carberp has installed a bootkit on the system to maintain persistence.","[S0689] WhisperGate: WhisperGate overwrites the MBR with a bootloader component that performs destructive wiping operations on hard drives and displays a fake ransom note when the host boots.","[S0266] TrickBot: TrickBot can implant malicious code into a compromised device's firmware.","[S0112] ROCKBOOT: ROCKBOOT is a Master Boot Record (MBR) bootkit that uses the MBR to establish persistence.","[G0096] APT41: APT41 deployed Master Boot Record bootkits on Windows systems to hide their malware and maintain persistence on victim systems.","[S0114] BOOTRASH: BOOTRASH is a Volume Boot Record (VBR) bootkit that uses the VBR to maintain persistence.","[S0182] FinFisher: Some FinFisher variants incorporate an MBR rootkit.","[G0032] Lazarus Group: Lazarus Group malware WhiskeyAlfa-Three modifies sector 0 of the Master Boot Record (MBR) to ensure that the malware will persist even if a victim machine shuts down.","[G0007] APT28: APT28 has deployed a bootkit along with Downdelph to ensure its persistence on the victim. The bootkit shares code with some variants of BlackEnergy."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1542.004","technique_name":"Pre-OS Boot: ROMMONkit","description":"Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to TFTP Boot, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.","detection":"There are no documented means for defenders to validate the operation of the ROMMON outside of vendor support. If a network device is suspected of being compromised, contact the vendor to assist in further investigation.","procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1542.005","technique_name":"Pre-OS Boot: TFTP Boot","description":"Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images. Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with Modify System Image to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to ROMMONkit and may result in the network device running a modified image.","detection":"Consider comparing a copy of the network device configuration and system image against a known-good version to discover unauthorized changes to system boot, startup configuration, or the running OS. The same process can be accomplished through a comparison of the run-time memory, though this is non-trivial and may require assistance from the vendor. Review command history in either the console or as part of the running memory to determine if unauthorized or suspicious commands were used to modify device configuration. Check boot information including system uptime, image booted, and startup configuration to determine if results are consistent with expected behavior in the environment. Monitor unusual connections or connection attempts to the device that may specifically target TFTP or other file-sharing protocols.","procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1548.001","technique_name":"Abuse Elevation Control Mechanism: Setuid and Setgid","description":"An adversary may abuse configurations where an application has the setuid or setgid bits set in order to get code running in a different (and possibly more privileged) user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application binary, the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them may not have the specific required privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications (i.e. Linux and Mac File and Directory Permissions Modification). The chmod command can set these bits with bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file]. This will enable the setuid bit. To enable the setgid bit, chmod 2775 and chmod g+s can be used. Adversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future. This abuse is often part of a \"shell escape\" or other actions to bypass an execution environment with restricted permissions. Alternatively, adversaries may choose to find and target vulnerable binaries with the setuid or setgid bits already enabled (i.e. File and Directory Discovery). The setuid and setguid bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via ls -l. The find command can also be used to search for such files. For example, find / -perm +4000 2>/dev/null can be used to find files with setuid set and find / -perm +2000 2>/dev/null may be used for setgid. Binaries that have these bits set may then be abused by adversaries.","detection":"Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.","procedures":["[S0276] Keydnap: Keydnap adds the setuid flag to a binary so it can easily elevate in the future.","[S0401] Exaramel for Linux: Exaramel for Linux can execute commands with high privileges via a specific binary with setuid functionality."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1548.002","technique_name":"Abuse Elevation Control Mechanism: Bypass User Account Control","description":"Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated Component Object Model objects without prompting the user through the UAC notification box. An example of this is use of Rundll32 to load a specifically crafted DLL which loads an auto-elevated Component Object Model object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as: * eventvwr.exe can auto-elevate and execute a specified binary or script. Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.","detection":"There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL, which indicate attempts to gain access to higher privileged processes. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. For example: * The eventvwr.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Classes\\mscfile\\shell\\open\\command Registry key. * The sdclt.exe bypass uses the [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\control.exe and [HKEY_CURRENT_USER]\\Software\\Classes\\exefile\\shell\\runas\\command\\isolatedCommand Registry keys. Analysts should monitor these Registry settings for unauthorized changes.","procedures":["[S0089] BlackEnergy: BlackEnergy attempts to bypass default User Access Control (UAC) settings by exploiting a backward-compatibility setting found in Windows 7 and later.","[S0148] RTM: RTM can attempt to run the program as admin, then show a fake error message and a legitimate UAC bypass prompt to the user in an attempt to socially engineer the user into escalating privileges.","[S1202] LockBit 3.0: LockBit 3.0 can bypass UAC to execute code with elevated privileges through an elevated Component Object Model (COM) interface.","[S0154] Cobalt Strike: Cobalt Strike can use a number of known techniques to bypass Windows UAC.","[S0666] Gelsemium: Gelsemium can bypass UAC to elevate process privileges on a compromised host.","[S0230] ZeroT: Many ZeroT samples can perform UAC bypass by using eventvwr.exe to execute a malicious file.","[S1018] Saint Bot: Saint Bot has attempted to bypass UAC using `fodhelper.exe` to escalate privileges.","[S1111] DarkGate: DarkGate uses two distinct User Account Control (UAC) bypass techniques to escalate privileges.","[G0082] APT38: APT38 has used the legitimate application `ieinstal.exe` to bypass UAC.","[S0670] WarzoneRAT: WarzoneRAT can use `sdclt.exe` to bypass UAC in Windows 10 to escalate privileges; for older Windows versions WarzoneRAT can use the IFileOperation exploit to bypass the UAC module.","[S0192] Pupy: Pupy can bypass Windows UAC through either DLL hijacking, eventvwr, or appPaths.","[S0378] PoshC2: PoshC2 can utilize multiple methods to bypass UAC.","[S0356] KONNI: KONNI has bypassed UAC by performing token impersonation as well as an RPC-based method, this included bypassing UAC set to “AlwaysNotify\".","[S0074] Sakula: Sakula contains UAC bypass code for both 32- and 64-bit systems.","[S0444] ShimRat: ShimRat has hijacked the cryptbase.dll within migwiz.exe to escalate privileges. This prevented the User Access Control window from appearing.","[S1068] BlackCat: BlackCat can bypass UAC to escalate privileges.","[S1199] LockBit 2.0: LockBit 2.0 can bypass UAC through creating the Registry key `HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows NT\\CurrentVersion\\ICM\\Calibration`.","[G0120] Evilnum: Evilnum has used PowerShell to bypass UAC.","[G0067] APT37: APT37 has a function in the initial dropper to bypass Windows UAC in order to execute the next payload with higher privileges.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used a Windows 10 specific tool and xxmm to bypass UAC for privilege escalation.","[S0129] AutoIt backdoor: AutoIt backdoor attempts to escalate privileges by bypassing User Access Control.","[S0182] FinFisher: FinFisher performs UAC bypass.","[S0606] Bad Rabbit: Bad Rabbit has attempted to bypass UAC and gain elevated administrative privileges.","[S0134] Downdelph: Downdelph bypasses UAC to escalate privileges by using a custom “RedirectEXE” shim database.","[S0250] Koadic: Koadic has 2 methods for elevating integrity. It can bypass UAC through `eventvwr.exe` and `sdclt.exe`.","[S0640] Avaddon: Avaddon bypasses UAC using the CMSTPLUA COM interface.","[S0262] QuasarRAT: QuasarRAT can generate a UAC pop-up Window to prompt the target user to run a command as the administrator.","[S0141] Winnti for Windows: Winnti for Windows can use a variant of the sysprep UAC bypass.","[S0612] WastedLocker: WastedLocker can perform a UAC bypass if it is not executed with administrator rights or if the infected host runs Windows Vista or later.","[G0069] MuddyWater: MuddyWater uses various techniques to bypass UAC.","[S0501] PipeMon: PipeMon installer can use UAC bypass techniques to install the payload.","[S0447] Lokibot: Lokibot has utilized multiple techniques to bypass UAC.","[S0132] H1N1: H1N1 bypasses user access control by using a DLL hijacking vulnerability in the Windows Update Standalone Installer (wusa.exe).","[G0080] Cobalt Group: Cobalt Group has bypassed UAC.","[S0254] PLAINTEE: An older variant of PLAINTEE performs UAC bypass.","[S0332] Remcos: Remcos has a command for UAC bypassing.","[S0458] Ramsay: Ramsay can use UACMe for privilege escalation.","[S0570] BitPaymer: BitPaymer can suppress UAC prompts by setting the HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command registry key on Windows 10 or HKCU\\Software\\Classes\\mscfile\\shell\\open\\command on Windows 7 and launching the eventvwr.msc process, which launches BitPaymer with elevated privileges.","[G1006] Earth Lusca: Earth Lusca has used the Fodhelper UAC bypass technique to gain elevated privileges.","[C0006] Operation Honeybee: During Operation Honeybee, the threat actors used the malicious NTWDBLIB.DLL and `cliconfig.exe` to bypass UAC protections.","[S0527] CSPY Downloader: CSPY Downloader can bypass UAC using the SilentCleanup task to execute the binary with elevated privileges.","[S1039] Bumblebee: Bumblebee has the ability to bypass UAC to deploy post exploitation tools with elevated privileges.","[G0027] Threat Group-3390: A Threat Group-3390 tool can use a public UAC bypass method to elevate privileges.","[S0531] Grandoreiro: Grandoreiro can bypass UAC by registering as the default handler for .MSC files.","[S0660] Clambling: Clambling has the ability to bypass UAC using a `passuac.dll` file.","[S0140] Shamoon: Shamoon attempts to disable UAC remote restrictions by modifying the Registry.","[S0692] SILENTTRINITY: SILENTTRINITY contains a number of modules that can bypass UAC, including through Window's Device Manager, Manage Optional Features, and an image hijack on the `.msc` file extension.","[S0584] AppleJeus: AppleJeus has presented the user with a UAC prompt to elevate privileges while installing.","[S0260] InvisiMole: InvisiMole can use fileless UAC bypass and create an elevated COM object to escalate privileges.","[S0669] KOCTOPUS: KOCTOPUS will perform UAC bypass either through fodhelper.exe or eventvwr.exe.","[S0633] Sliver: Sliver can leverage multiple techniques to bypass User Account Control (UAC) on Windows systems.","[G0040] Patchwork: Patchwork bypassed User Access Control (UAC).","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can make use of the Windows `SilentCleanup` scheduled task to execute its payload with elevated privileges.","[S1130] Raspberry Robin: Raspberry Robin will use the legitimate Windows utility fodhelper.exe to run processes at elevated privileges without requiring a User Account Control prompt.","[S1081] BADHATCH: BADHATCH can utilize the CMSTPLUA COM interface and the SilentCleanup task to bypass UAC.","[S0116] UACMe: UACMe contains many methods for bypassing Windows User Account Control on multiple versions of the operating system.","[S0363] Empire: Empire includes various modules to attempt to bypass UAC for escalation of privileges.","[S0662] RCSession: RCSession can bypass UAC to escalate privileges.","[G0016] APT29: APT29 has bypassed UAC."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1548.003","technique_name":"Abuse Elevation Control Mechanism: Sudo and Sudo Caching","description":"Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges. Within Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\" Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again). The sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL. Elevated privileges are required to edit this file though. Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user. In the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' >> /etc/sudoers. In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.","detection":"On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file.","procedures":["[S0154] Cobalt Strike: Cobalt Strike can use sudo to run a command.","[S0279] Proton: Proton modifies the tty_tickets line in the sudoers file.","[S0281] Dok: Dok adds admin ALL=(ALL) NOPASSWD: ALL to the /etc/sudoers file."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1548.004","technique_name":"Abuse Elevation Control Mechanism: Elevated Execution with Prompt","description":"Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials. The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges. Adversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms. This technique may be combined with Masquerading to trick the user into granting escalated privileges to malicious code. This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.","detection":"Consider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.","procedures":["[S0402] OSX/Shlayer: OSX/Shlayer can escalate privileges to root by asking the user for credentials."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1548.005","technique_name":"Abuse Elevation Control Mechanism: Temporary Elevated Cloud Access","description":"Adversaries may abuse permission configurations that allow them to gain temporarily elevated access to cloud resources. Many cloud environments allow administrators to grant user or service accounts permission to request just-in-time access to roles, impersonate other accounts, pass roles onto resources and services, or otherwise gain short-term access to a set of privileges that may be distinct from their own. Just-in-time access is a mechanism for granting additional roles to cloud accounts in a granular, temporary manner. This allows accounts to operate with only the permissions they need on a daily basis, and to request additional permissions as necessary. Sometimes just-in-time access requests are configured to require manual approval, while other times the desired permissions are automatically granted. Account impersonation allows user or service accounts to temporarily act with the permissions of another account. For example, in GCP users with the `iam.serviceAccountTokenCreator` role can create temporary access tokens or sign arbitrary payloads with the permissions of a service account, while service accounts with domain-wide delegation permission are permitted to impersonate Google Workspace accounts. In Exchange Online, the `ApplicationImpersonation` role allows a service account to use the permissions associated with specified user accounts. Many cloud environments also include mechanisms for users to pass roles to resources that allow them to perform tasks and authenticate to other services. While the user that creates the resource does not directly assume the role they pass to it, they may still be able to take advantage of the role's access -- for example, by configuring the resource to perform certain actions with the permissions it has been granted. In AWS, users with the `PassRole` permission can allow a service they create to assume a given role, while in GCP, users with the `iam.serviceAccountUser` role can attach a service account to a resource. While users require specific role assignments in order to use any of these features, cloud administrators may misconfigure permissions. This could result in escalation paths that allow adversaries to gain access to resources beyond what was originally intended. **Note:** this technique is distinct from Additional Cloud Roles, which involves assigning permanent roles to accounts rather than abusing existing permissions structures to gain temporarily elevated access to resources. However, adversaries that compromise a sufficiently privileged account may grant another account they control Additional Cloud Roles that would allow them to also abuse these features. This may also allow for greater stealth than would be had by directly using the highly privileged account, especially when logs do not clarify when role impersonation is taking place.","detection":null,"procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1548.006","technique_name":"Abuse Elevation Control Mechanism: TCC Manipulation","description":"Adversaries can manipulate or abuse the Transparency, Consent, & Control (TCC) service or database to grant malicious executables elevated permissions. TCC is a Privacy & Security macOS control mechanism used to determine if the running process has permission to access the data or services protected by TCC, such as screen sharing, camera, microphone, or Full Disk Access (FDA). When an application requests to access data or a service protected by TCC, the TCC daemon (`tccd`) checks the TCC database, located at `/Library/Application Support/com.apple.TCC/TCC.db` (and `~/` equivalent), and an overwrites file (if connected to an MDM) for existing permissions. If permissions do not exist, then the user is prompted to grant permission. Once permissions are granted, the database stores the application's permissions and will not prompt the user again unless reset. For example, when a web browser requests permissions to the user's webcam, once granted the web browser may not explicitly prompt the user again. Adversaries may access restricted data or services protected by TCC through abusing applications previously granted permissions through Process Injection or executing a malicious binary using another application. For example, adversaries can use Finder, a macOS native app with FDA permissions, to execute a malicious AppleScript. When executing under the Finder App, the malicious AppleScript inherits access to all files on the system without requiring a user prompt. When System Integrity Protection (SIP) is disabled, TCC protections are also disabled. For a system without SIP enabled, adversaries can manipulate the TCC database to add permissions to their malicious executable through loading an adversary controlled TCC database using environment variables and Launchctl.","detection":null,"procedures":["[S0658] XCSSET: For several modules, XCSSET attempts to access or list the contents of user folders such as Desktop, Downloads, and Documents. If the folder does not exist or access is denied, it enters a loop where it resets the TCC database and retries access."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1550.001","technique_name":"Use Alternate Authentication Material: Application Access Token","description":"Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials. Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application. For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a \"refresh\" token enabling background access is awarded. With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration. Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account. The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured – for example, by allowing all users to request a token for a particular account - an adversary may be able to gain initial access to a Cloud Account or escalate their privileges. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. For example, in AWS environments, an adversary who compromises a user’s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated. Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.","detection":"Monitor access token activity for abnormal use and permissions granted to unusual or suspicious applications and APIs. Additionally, administrators should review logs for calls to the AWS Security Token Service (STS) and usage of GCP service accounts in order to identify anomalous actions.","procedures":["[S0683] Peirates: Peirates can use stolen service account tokens to perform its operations. It also enables adversaries to switch between valid service accounts.","[S1023] CreepyDrive: CreepyDrive can use legitimate OAuth refresh tokens to authenticate with OneDrive.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used compromised service principals to make changes to the Office 365 environment.","[G0007] APT28: APT28 has used several malicious applications that abused OAuth access tokens to gain access to target email accounts, including Gmail and Yahoo Mail.","[G0125] HAFNIUM: HAFNIUM has abused service principals with administrative permissions for data exfiltration."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1550.002","technique_name":"Use Alternate Authentication Material: Pass the Hash","description":"Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. When performing PtH, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. Adversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform Pass the Ticket attacks.","detection":"Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious. Event ID 4768 and 4769 will also be generated on the Domain Controller when a user requests a new ticket granting ticket or service ticket. These events combined with the above activity may be indicative of an overpass the hash attempt.","procedures":["[G0050] APT32: APT32 has used pass the hash for lateral movement.","[S0154] Cobalt Strike: Cobalt Strike can perform pass the hash.","[S0122] Pass-The-Hash Toolkit: Pass-The-Hash Toolkit can perform pass the hash.","[G0007] APT28: APT28 has used pass the hash for lateral movement.","[G0143] Aquatic Panda: Aquatic Panda used a registry edit to enable a Windows feature called RestrictedAdmin in victim environments. This change allowed Aquatic Panda to leverage \"pass the hash\" mechanisms as the alteration allows for RDP connections with a valid account name and hash only, without possessing a cleartext password value.","[G0114] Chimera: Chimera has dumped password hashes for use in pass the hash authentication attacks.","[G0006] APT1: The APT1 group is known to have used pass the hash.","[G0102] Wizard Spider: Wizard Spider has used the `Invoke-SMBExec` PowerShell cmdlet to execute the pass-the-hash technique and utilized stolen password hashes to move laterally.","[S0376] HOPLIGHT: HOPLIGHT has been observed loading several APIs associated with Pass the Hash.","[S0378] PoshC2: PoshC2 has a number of modules that leverage pass the hash for lateral movement.","[S0002] Mimikatz: Mimikatz's SEKURLSA::Pth module can impersonate a user, with only a password hash, to execute arbitrary commands.","[G0096] APT41: APT41 uses tools such as Mimikatz to enable lateral movement via captured password hashes.","[G0094] Kimsuky: Kimsuky has used pass the hash for authentication to remote access software used in C2.","[S0363] Empire: Empire can perform pass the hash attacks.","[G1016] FIN13: FIN13 has used the PowerShell utility `Invoke-SMBExec` to execute the pass the hash method for lateral movement within an compromised environment.","[G1003] Ember Bear: Ember Bear has used pass-the-hash techniques for lateral movement in victim environments.","[S1081] BADHATCH: BADHATCH can perform pass the hash on compromised machines with x64 versions.","[S0488] CrackMapExec: CrackMapExec can pass the hash to authenticate via SMB.","[C0002] Night Dragon: During Night Dragon, threat actors used pass-the-hash tools to obtain authenticated access to sensitive internal desktops and servers.","[G0093] GALLIUM: GALLIUM used dumped hashes to authenticate to other machines via pass the hash."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1550.003","technique_name":"Use Alternate Authentication Material: Pass the Ticket","description":"Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system. When preforming PtT, valid Kerberos tickets for Valid Accounts are captured by OS Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. A Silver Ticket can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). A Golden Ticket can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, \"overpassing the hash\" involves using a NTLM password hash to authenticate as a user (i.e. Pass the Hash) while also using the password hash to create a valid Kerberos ticket.","detection":"Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. Event ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to \"Integrity check on decrypted field failed\" and indicates misuse by a previously invalidated golden ticket.","procedures":["[S0053] SeaDuke: Some SeaDuke samples have a module to use pass the ticket with Kerberos for authentication.","[G0016] APT29: APT29 used Kerberos ticket attacks for lateral movement.","[S0002] Mimikatz: Mimikatz’s LSADUMP::DCSync and KERBEROS::PTT modules implement the three steps required to extract the krbtgt account hash and create/use Kerberos tickets.","[S0192] Pupy: Pupy can also perform pass-the-ticket.","[G0050] APT32: APT32 successfully gained remote access by using pass the ticket.","[G0060] BRONZE BUTLER: BRONZE BUTLER has created forged Kerberos Ticket Granting Ticket (TGT) and Ticket Granting Service (TGS) tickets to maintain administrative access."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1550.004","technique_name":"Use Alternate Authentication Material: Web Session Cookie","description":"Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated. Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through Steal Web Session Cookie or Web Cookies, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform. There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.","detection":"Monitor for anomalous access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.","procedures":["[G1033] Star Blizzard: Star Blizzard has bypassed multi-factor authentication on victim email accounts by using session cookies stolen using EvilGinx.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used stolen cookies to access cloud resources and a forged `duo-sid` cookie to bypass MFA set on an email account."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1553.001","technique_name":"Subvert Trust Controls: Gatekeeper Bypass","description":"Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple’s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications. Based on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions: 1. Checks extended attribute – Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution. 2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers. 3. Code Signing – Gatekeeper checks for a valid code signature from an Apple Developer ID. 4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an “unauthorized app” and the security policy will be modified. Adversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. Exploitation for Defense Evasion), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks. Applications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using Drive-by Compromise.","detection":"The removal of the com.apple.quarantine flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as xattr. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the com.apple.quarantine flag when performing updates. Review false values under the LSFileQuarantineEnabled entry in an application's Info.plist file (required by every application). false under LSFileQuarantineEnabled indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified LSFileQuarantineEnabled entry will default to not setting the quarantine flag. QuarantineEvents is a SQLite database containing a list of all files assigned the com.apple.quarantine attribute, located at ~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2. Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.","procedures":["[S0658] XCSSET: XCSSET has dropped a malicious applet into an app's `.../Contents/MacOS/` folder of a previously launched app to bypass Gatekeeper's security checks on first launch apps (prior to macOS 13).","[S0402] OSX/Shlayer: If running with elevated privileges, OSX/Shlayer has used the spctl command to disable Gatekeeper protection for a downloaded file. OSX/Shlayer can also leverage system links pointing to bash scripts in the downloaded DMG file to bypass Gatekeeper, a flaw patched in macOS 11.3 and later versions. OSX/Shlayer has been Notarized by Apple, resulting in successful passing of additional Gatekeeper checks.","[S1153] Cuckoo Stealer: Cuckoo Stealer can use `xattr -d com.apple.quarantine` to remove the quarantine flag attribute.","[S1016] MacMa: MacMa has removed the `com.apple.quarantineattribute` from the dropped file, `$TMPDIR/airportpaird`.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D uses the command xattr -d com.apple.quarantine to remove the quarantine file attribute used by Gatekeeper.","[S0369] CoinTicker: CoinTicker downloads the EggShell mach-o binary using curl, which does not set the quarantine flag."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1553.002","technique_name":"Subvert Trust Controls: Code Signing","description":"Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. The certificates used during an operation may be created, acquired, or stolen by the adversary. Unlike Invalid Code Signature, this activity will result in a valid signature. Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. Code signing certificates may be used to bypass security policies that require signed code to execute on a system.","detection":"Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.","procedures":["[S0154] Cobalt Strike: Cobalt Strike can use self signed Java applets to execute signed applet attacks.","[S0475] BackConfig: BackConfig has been signed with self signed digital certificates mimicking a legitimate software company.","[G0046] FIN7: FIN7 has signed Carbanak payloads with legally purchased code signing certificates. FIN7 has also digitally signed their phishing documents, backdoors and other staging tools to bypass security controls.","[G1015] Scattered Spider: Scattered Spider has used self-signed and stolen certificates originally issued to NVIDIA and Global Software LLC.","[S0187] Daserf: Some Daserf samples were signed with a stolen digital certificate.","[G0040] Patchwork: Patchwork has signed malware with self-signed certificates from fictitious and spoofed legitimate software companies.","[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda used legitimate, signed binaries such as `inkform.exe` or `ExcelRepairToolboxLauncher.exe` for follow-on execution of malicious DLLs through DLL search order hijacking in RedDelta Modified PlugX Infection Chain Operations.","[S0698] HermeticWizard: HermeticWizard has been signed by valid certificates assigned to Hermetica Digital.","[G0094] Kimsuky: Kimsuky has signed files with the name EGIS CO,. Ltd. and has stolen a valid certificate that is used to sign the malware and the dropper.","[S0170] Helminth: Helminth samples have been signed with legitimate, compromised code signing certificates owned by software company AI Squared.","[S1070] Black Basta: The Black Basta dropper has been digitally signed with a certificate issued by Akeo Consulting for legitimate executables used for creating bootable USB drives.","[S1016] MacMa: MacMa has been delivered using ad hoc Apple Developer code signing certificates.","[S1183] StrelaStealer: StrelaStealer variants have used valid code signing certificates.","[G0093] GALLIUM: GALLIUM has used stolen certificates to sign its tools including those from Whizzimo LLC.","[G1031] Saint Bear: Saint Bear has used an initial loader malware featuring a legitimate code signing certificate associated with \"Electrum Technologies GmbH.\"","[G0096] APT41: APT41 leveraged code-signing certificates to sign malware when targeting both gaming and non-gaming organizations.","[C0015] C0015: For C0015, the threat actors used DLL files that had invalid certificates.","[G0021] Molerats: Molerats has used forged Microsoft code-signing certificates on malware.","[S0663] SysUpdate: SysUpdate has been signed with stolen digital certificates.","[S0697] HermeticWiper: The HermeticWiper executable has been signed with a legitimate certificate issued to Hermetica Digital Ltd.","[S0342] GreyEnergy: GreyEnergy digitally signs the malware with a code-signing certificate.","[S0520] BLINDINGCAN: BLINDINGCAN has been signed with code-signing certificates such as CodeRipper.","[S1150] ROADSWEEP: ROADSWEEP has been digitally signed with a certificate issued to the Kuwait Telecommunications Company KSC.","[S1196] Troll Stealer: Troll Stealer, along with its associated dropper, utilizes legitimate, stolen code signing certificates.","[S0210] Nerex: Nerex drops a signed Microsoft DLL to disk.","[S0584] AppleJeus: AppleJeus has used a valid digital signature from Sectigo to appear legitimate.","[C0006] Operation Honeybee: During Operation Honeybee, the threat actors deployed the MaoCheng dropper with a stolen Adobe Systems digital signature.","[S1151] ZeroCleare: ZeroCleare can deploy a vulnerable, signed driver on a compromised host to bypass operating system safeguards.","[S0527] CSPY Downloader: CSPY Downloader has come signed with revoked certificates.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group digitally signed their own malware to evade detection.","[S0650] QakBot: QakBot can use signed loaders to evade detection.","[G0049] OilRig: OilRig has signed its malware with stolen certificates.","[S0148] RTM: RTM samples have been signed with a code-signing certificates.","[S0504] Anchor: Anchor has been signed with valid certificates to evade detection by security tools.","[G0032] Lazarus Group: Lazarus Group has digitally signed malware and utilities to evade detection.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 was able to get SUNBURST signed by SolarWinds code signing certificates by injecting the malware into the SolarWinds Orion software lifecycle.","[S0091] Epic: Turla has used valid digital certificates from Sysprint AG to sign its Epic dropper.","[G1009] Moses Staff: Moses Staff has used signed drivers from an open source tool called DiskCryptor to evade detection.","[G0091] Silence: Silence has used a valid certificate to sign their primary loader Silence.Downloader (aka TrueBot).","[S0559] SUNBURST: SUNBURST was digitally signed by SolarWinds from March - May 2020.","[G0102] Wizard Spider: Wizard Spider has used Digicert code-signing certificates for some of its malware.","[G0065] Leviathan: Leviathan has used stolen code signing certificates to sign malware.","[G0037] FIN6: FIN6 has used Comodo code-signing certificates.","[S0611] Clop: Clop can use code signing to evade detection.","[G0045] menuPass: menuPass has resized and added data to the certificate table to enable the signing of modified files with legitimate signatures.","[S0415] BOOSTWRITE: BOOSTWRITE has been signed by a valid CA.","[G0056] PROMETHIUM: PROMETHIUM has signed code with self-signed certificates.","[G0012] Darkhotel: Darkhotel has used code-signing certificates on its malware that are either forged due to weak keys or stolen. Darkhotel has also stolen certificates and signed backdoors and downloaders with them.","[S0534] Bazar: Bazar has been signed with fake certificates including those appearing to be from VB CORPORATE PTY. LTD.","[G0092] TA505: TA505 has signed payloads with code signing certificates from Thawte and Sectigo.","[S0455] Metamorfo: Metamorfo has digitally signed executables using AVAST Software certificates.","[S0372] LockerGoga: LockerGoga has been signed with stolen certificates in order to make it look more legitimate.","[S0168] Gazer: Gazer versions are signed with various valid certificates; one was likely faked and issued by Comodo for \"Solid Loop Ltd,\" and another was issued for \"Ultimate Computer Support Ltd.\"","[S0624] Ecipekac: Ecipekac has used a valid, legitimate digital signature to evade detection.","[S0266] TrickBot: TrickBot has come with a signed downloader component.","[S0284] More_eggs: More_eggs has used a signed binary shellcode loader and a signed Dynamic Link Library (DLL) to create a reverse shell.","[G0039] Suckfly: Suckfly has used stolen certificates to sign its malware.","[S0262] QuasarRAT: A QuasarRAT .dll file is digitally signed by a certificate from AirVPN.","[S0603] Stuxnet: Stuxnet used a digitally signed driver with a compromised Realtek certificate.","[S1213] Lumma Stealer: Lumma Stealer has used valid code signing digital certificates from ConsolHQ LTD and Verandah Green Limited to appear legitimate.","[G1034] Daggerfly: Daggerfly has used signed, but not notarized, malicious files for execution in macOS environments.","[S0377] Ebury: Ebury has installed a self-signed RPM package mimicking the original system package on RPM based systems.","[S0646] SpicyOmelette: SpicyOmelette has been signed with valid digital certificates.","[S1197] GoBear: GoBear uses stolen legitimate code signing certificates for defense evasion.","[S0491] StrongPity: StrongPity has been signed with self-signed certificates.","[G1014] LuminousMoth: LuminousMoth has signed their malware with a valid digital signature.","[S0501] PipeMon: PipeMon, its installer, and tools are signed with stolen code-signing certificates.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP has been dropped by a self-extracting archive signed with a valid digital certificate.","[G0044] Winnti Group: Winnti Group used stolen certificates to sign its malware.","[G0052] CopyKittens: CopyKittens digitally signed an executable with a stolen certificate from legitimate company AI Squared.","[S0163] Janicab: Janicab used a valid AppleDeveloperID to sign the code to get past security restrictions.","[S0144] ChChes: ChChes samples were digitally signed with a certificate originally used by Hacking Team that was later leaked and subsequently revoked.","[C0040] APT41 DUST: APT41 DUST used stolen code signing certificates for DUSTTRAP malware and subsequent payloads.","[S0234] Bandook: Bandook was signed with valid Certum certificates."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1553.003","technique_name":"Subvert Trust Controls: SIP and Trust Provider Hijacking","description":"Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function, which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all ) and are identified by globally unique identifiers (GUIDs). Similar to Code Signing, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: * Modifying the Dll and FuncName Registry values in HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID} that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file). * Modifying the Dll and FuncName Registry values in HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID} that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk. * Modifying the DLL and Function Registry values in HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID} that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex). * **Note:** The above hijacks are also possible without modifying the Registry via DLL search order hijacking. Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation.","detection":"Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. Enable CryptoAPI v2 (CAPI) event logging to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033). Utilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing) setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers: * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID * HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust * HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\Trust **Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using Regsvr32. Analyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure “Hide Microsoft Entries” and “Hide Windows Entries” are both deselected.","procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1553.004","technique_name":"Subvert Trust Controls: Install Root Certificate","description":"Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide Adversary-in-the-Middle capability for intercepting information transmitted over secure TLS/SSL communications. Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. In macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain.","detection":"A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity. Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present. Microsoft provides a list of trustworthy root certificates online and through authroot.stl. The Sysinternals Sigcheck utility can also be used (sigcheck[64].exe -tuv) to dump the contents of the certificate store and list valid certificates not rooted to the Microsoft Certificate Trust List. Installed root certificates are located in the Registry under HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\ and [HKLM or HKCU]\\Software[\\Policies\\]\\Microsoft\\SystemCertificates\\Root\\Certificates\\. There are a subset of root certificates that are consistent across Windows systems and can be used for comparison: * 18F7C1FCC3090203FD5BAA2F861A754976C8DD25 * 245C97DF7514E7CF2DF8BE72AE957B9E04741E85 * 3B1EFD3A66EA28B16697394703A72CA340A05BD5 * 7F88CD7223F3C813818C994614A89C99FA3B5247 * 8F43288AD272F3103B6FB1428485EA3014C0BCFE * A43489159A520F0D93D032CCAF37E7FE20A8B419 * BE36A4562FB2EE05DBB3D32323ADF445084ED656 * CDD4EEAE6000AC7F40C3802C171E30148030C072","procedures":["[S0160] certutil: certutil can be used to install browser root certificates as a precursor to performing Adversary-in-the-Middle between connections to banking websites. Example command: certutil -addstore -f -user ROOT ProgramData\\cert512121.der.","[S0281] Dok: Dok installs a root certificate to aid in Adversary-in-the-Middle actions using the command add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/filename.","[S0009] Hikit: Hikit installs a self-generated certificate to the local trust store as a root CA and Trusted Publisher.","[S0148] RTM: RTM can add a certificate to the Windows store."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1553.005","technique_name":"Subvert Trust Controls: Mark-of-the-Web Bypass","description":"Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named Zone.Identifier with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that compares files with an allowlist of well-known executables. If the file is not known/trusted, SmartScreen will prevent the execution and warn the user not to run it. Adversaries may abuse container files such as compressed/archive (.arj, .gzip) and/or disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW. Container files downloaded from the Internet will be marked with MOTW but the files within may not inherit the MOTW after the container files are extracted and/or mounted. MOTW is a NTFS feature and many container files do not support NTFS alternative data streams. After a container file is extracted and/or mounted, the files contained within them may be treated as local files on disk and run without protections.","detection":"Monitor compressed/archive and image files downloaded from the Internet as the contents may not be tagged with the MOTW. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities.","procedures":["[G0092] TA505: TA505 has used .iso files to deploy malicious .lnk files.","[S1025] Amadey: Amadey has modified the `:Zone.Identifier` in the ADS area to zero.","[G0082] APT38: APT38 has used ISO and VHD files to deploy malware and to bypass Mark-of-the-Web (MOTW) security measures.","[S0650] QakBot: QakBot has been packaged in ISO files in order to bypass Mark of the Web (MOTW) security measures.","[G0016] APT29: APT29 has embedded ISO images and VHDX files in HTML to evade Mark-of-the-Web."],"tactics":"TA0005 - Defense Evasion"}