{"technique_id":"T1036.002","technique_name":"Masquerading: Right-to-Left Override","description":"Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \\u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\\u202Egnp.js will be displayed as photo_high_resj.png. Adversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with Spearphishing Attachment/Malicious File since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity. RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.","detection":"Detection methods should include looking for common formats of RTLO characters within filenames such as \\u202E, [U+202E], and %E2%80%AE. Defenders should also check their analysis tools to ensure they do not interpret the RTLO character and instead print the true name of the file containing it.","procedures":["[G0137] Ferocious Kitten: Ferocious Kitten has used right-to-left override to reverse executables’ names to make them appear to have different file extensions, rather than their real ones.","[G0098] BlackTech: BlackTech has used right-to-left-override to obfuscate the filenames of malicious e-mail attachments.","[G0004] Ke3chang: Ke3chang has used the right-to-left override character in spearphishing attachment names to trick targets into executing .scr and .exe files.","[G0029] Scarlet Mimic: Scarlet Mimic has used the left-to-right override character in self-extracting RAR archive spearphishing attachment file names.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used Right-to-Left Override to deceive victims into executing several strains of malware."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.003","technique_name":"Masquerading: Rename Legitimate Utilities","description":"Adversaries may rename legitimate / system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for legitimate utilities adversaries are capable of abusing, including both built-in binaries and tools such as PSExec, AutoHotKey, and IronPython. It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe). An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on these utilities executing from non-standard paths.","detection":"If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.","procedures":["[S1183] StrelaStealer: StrelaStealer has used a renamed, legitimate `msinfo32.exe` executable to sideload the StrelaStealer payload during initial installation.","[G0045] menuPass: menuPass has renamed certutil and moved it to a different location on the system to avoid detection based on use of the tool.","[G0032] Lazarus Group: Lazarus Group has renamed system utilities such as wscript.exe and mshta.exe.","[S1111] DarkGate: DarkGate executes a Windows Batch script during installation that creases a randomly-named directory in the C:\\\\ root directory that copies and renames the legitimate Windows curl command to this new location.","[G1034] Daggerfly: Daggerfly used a renamed version of rundll32.exe, such as \"dbengin.exe\" located in the `ProgramData\\Microsoft\\PlayReady` directory, to proxy malicious DLL execution.","[G0050] APT32: APT32 has moved and renamed pubprn.vbs to a .txt file to avoid detection.","[G0082] APT38: APT38 has renamed system utilities, such as `rundll32.exe` and `mshta.exe`, to avoid detection.","[S0046] CozyCar: The CozyCar dropper has masqueraded a copy of the infected system's rundll32.exe executable that was moved to the malware's install directory and renamed according to a predefined configuration file.","[S1020] Kevin: Kevin has renamed an image of `cmd.exe` with a random name followed by a `.tmpl` extension.","[G0093] GALLIUM: GALLIUM used a renamed cmd.exe file to evade detection."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.004","technique_name":"Masquerading: Masquerade Task or Service","description":"Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description. Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones. Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.","detection":"Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[S1033] DCSrv: DCSrv has masqueraded its service as a legitimate svchost.exe process.","[S0013] PlugX: In one instance, menuPass added PlugX as a service with a display name of \"Corel Writing Tools Utility.\"","[G0143] Aquatic Panda: Aquatic Panda created new, malicious services using names such as Windows User Service to attempt to blend in with legitimate items on victim systems.","[S1064] SVCReady: SVCReady has named a task `RecoveryExTask` as part of its persistence activity.","[C0034] 2022 Ukraine Electric Power Attack: During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Systemd service units to masquerade GOGETTER malware as legitimate or seemingly legitimate services.","[C0017] C0017: During C0017, APT41 used `SCHTASKS /Change` to modify legitimate scheduled tasks to run malicious code.","[S0438] Attor: Attor's dispatcher disguises itself as a legitimate task (i.e., the task name and description appear legitimate).","[S0449] Maze: Maze operators have created scheduled tasks masquerading as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\" designed to launch the ransomware.","[S0495] RDAT: RDAT has used Windows Video Service as a name for malicious services.","[G0094] Kimsuky: Kimsuky has disguised services to appear as benign software or related to operating system functions.","[G0008] Carbanak: Carbanak has copied legitimate service names to use for malicious services.","[S1042] SUGARDUMP: SUGARDUMP's scheduled task has been named `MicrosoftInternetExplorerCrashRepoeterTaskMachineUA` or `MicrosoftEdgeCrashRepoeterTaskMachineUA`, depending on the Windows OS version.","[S0223] POWERSTATS: POWERSTATS has created a scheduled task named \"MicrosoftEdge\" to establish persistence.","[S0410] Fysbis: Fysbis has masqueraded as the rsyncd and dbus-inotifier services.","[S0688] Meteor: Meteor has been disguised as the Windows Power Efficiency Diagnostics report tool.","[S0169] RawPOS: New services created by RawPOS are made to appear like legitimate Windows services, with names such as \"Windows Management Help Service\", \"Microsoft Support\", and \"Windows Advanced Task Manager\".","[G0046] FIN7: FIN7 has created a scheduled task named “AdobeFlashSync” to establish persistence.","[S0629] RainyDay: RainyDay has named services and scheduled tasks to appear benign including \"ChromeCheck\" and \"googleupdate.\"","[S0140] Shamoon: Shamoon creates a new service named “ntssrv” that attempts to appear legitimate; the service's display name is “Microsoft Network Realtime Inspection Service” and its description is “Helps guard against time change attempts targeting known and newly discovered vulnerabilities in network time protocols.” Newer versions create the \"MaintenaceSrv\" service, which misspells the word \"maintenance.\"","[S1013] ZxxZ: ZxxZ has been disguised as a Windows security update service.","[S1130] Raspberry Robin: Raspberry Robin will execute its payload prior to initializing command and control traffic by impersonating one of several legitimate program names such as dllhost.exe, regsvr32.exe, or rundll32.exe.","[S0471] build_downer: build_downer has added itself to the Registry Run key as \"NVIDIA\" to appear legitimate.","[S1031] PingPull: PingPull can mimic the names and descriptions of legitimate services such as `iphlpsvc`, `IP Helper`, and `Onedrive` to evade detection.","[S0491] StrongPity: StrongPity has named services to appear legitimate.","[S0345] Seasalt: Seasalt has masqueraded as a service called \"SaSaut\" with a display name of \"System Authorization Service\" in an apparent attempt to masquerade as a legitimate service.","[S0356] KONNI: KONNI has pretended to be the xmlProv Network Provisioning service.","[S0533] SLOTHFULMEDIA: SLOTHFULMEDIA has named a service it establishes on victim machines as \"TaskFrame\" to hide its malicious purpose.","[G1016] FIN13: FIN13 has used scheduled tasks names such as `acrotyr` and `AppServicesr` to mimic the same names in a compromised network's `C:\\Windows` directory.","[G0099] APT-C-36: APT-C-36 has disguised its scheduled tasks as those used by Google.","[S1044] FunnyDream: FunnyDream has used a service named `WSearch` for execution.","[S1134] DEADWOOD: DEADWOOD will attempt to masquerade its service execution using benign-looking names such as ScDeviceEnums.","[S0527] CSPY Downloader: CSPY Downloader has attempted to appear as a legitimate Windows service with a fake description claiming it is used to support packed applications.","[S0439] Okrum: Okrum can establish persistence by adding a new service NtmsSvc with the display name Removable Storage to masquerade as a legitimate Removable Storage Manager.","[S0022] Uroburos: Uroburos has registered a service named `WerFaultSvc`, likely to spoof the legitimate Windows error reporting service.","[S0444] ShimRat: ShimRat can impersonate Windows services and antivirus products to avoid detection on compromised systems.","[S0554] Egregor: Egregor has masqueraded the svchost.exe process to exfiltrate data.","[S0409] Machete: Machete renamed task names to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python tasks.","[G0050] APT32: APT32 has used hidden or non-printing characters to help masquerade service names, such as appending a Unicode no-break space character to a legitimate service name. APT32 has also impersonated the legitimate Flash installer file name \"install_flashplayer.exe\".","[G1035] Winter Vivern: Winter Vivern has distributed malicious scripts and executables mimicking virus scanners.","[S1011] Tarrask: Tarrask creates a scheduled task called “WinUpdate” to re-establish any dropped C2 connections.","[S0601] Hildegard: Hildegard has disguised itself as a known Linux process.","[G0102] Wizard Spider: Wizard Spider has used scheduled tasks to install TrickBot, using task names to appear legitimate such as WinDotNet, GoogleTask, or Sysnetsf. It has also used common document file names for other malware binaries.","[S0668] TinyTurla: TinyTurla has mimicked an existing Windows service by being installed as Windows Time Service.","[S0663] SysUpdate: SysUpdate has named their unit configuration file similarly to other unit files residing in the same directory, `/usr/lib/systemd/system/`, to appear benign.","[G1002] BITTER: BITTER has disguised malware as a Windows Security update service.","[S0178] Truvasys: To establish persistence, Truvasys adds a Registry Run key with a value \"TaskMgr\" in an attempt to masquerade as the legitimate Windows Task Manager.","[S0148] RTM: RTM has named the scheduled task it creates \"Windows Update\".","[G0037] FIN6: FIN6 has renamed the \"psexec\" service name to \"mstdc\" to masquerade as a legitimate Windows service.","[S0630] Nebulae: Nebulae has created a service named \"Windows Update Agent1\" to appear legitimate.","[G0019] Naikon: Naikon renamed a malicious service taskmgr to appear to be a legitimate version of Task Manager.","[S0581] IronNetInjector: IronNetInjector has been disguised as a legitimate service using the name PythonUpdateSrvc.","[S1090] NightClub: NightClub has created a service named `WmdmPmSp` to spoof a Windows Media service.","[C0035] KV Botnet Activity: KV Botnet Activity installation steps include first identifying, then stopping, any process containing [kworker\\/0:1], then renaming its initial installation stage to this process name.","[S0118] Nidiran: Nidiran can create a new service named msamger (Microsoft Security Accounts Manager), which mimics the legitimate Microsoft database by the same name.","[S0534] Bazar: Bazar can create a task named to appear benign.","[S0538] Crutch: Crutch has established persistence with a scheduled task impersonating the Outlook item finder.","[S0367] Emotet: Emotet has installed itself as a new service with the service name `Windows Defender System Service` and display name `WinDefService`.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D uses file naming conventions with associated executable locations to blend in with the macOS TimeMachine and OpenSSL services. Such as, naming a LaunchAgent plist file `com.apple.openssl.plist` which executes OSX_OCEANLOTUS.D from the user's `~/Library/OpenSSL/` folder upon user login.","[G0117] Fox Kitten: Fox Kitten has named the task for a reverse proxy lpupdate to appear legitimate.","[G0056] PROMETHIUM: PROMETHIUM has named services to appear legitimate.","[S0259] InnaputRAT: InnaputRAT variants have attempted to appear legitimate by adding a new service named OfficeUpdateService.","[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda masqueraded Registry run keys as legitimate-looking service names such as `OneNote Update` during RedDelta Modified PlugX Infection Chain Operations.","[S0236] Kwampirs: Kwampirs establishes persistence by adding a new service with the display name \"WMI Performance Adapter Extension\" in an attempt to masquerade as a legitimate WMI service.","[C0040] APT41 DUST: APT41 DUST disguised DUSTPAN as a legitimate Windows binary such as `w3wp.exe` or `conn.exe`.","[S0261] Catchamas: Catchamas adds a new service named NetAdapter in an apparent attempt to masquerade as a legitimate service.","[C0001] Frankenstein: During Frankenstein, the threat actors named a malicious scheduled task \"WinUpdate\" for persistence.","[S1052] DEADEYE: DEADEYE has used `schtasks /change` to modify scheduled tasks including `\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor`, `\\Microsoft\\Windows\\Ras\\ManagerMobility, \\Microsoft\\Windows\\WDI\\SrvSetupResults`, and `\\Microsoft\\Windows\\WDI\\USOShared`.","[G0128] ZIRCONIUM: ZIRCONIUM has created a run key named Dropbox Update Setup to mask a persistence mechanism for a malicious binary.","[S0690] Green Lambert: Green Lambert has created a new executable named `Software Update Check` to appear legitimate.","[S1140] Spica: Spica has created a scheduled task named `CalendarChecker` for persistence on compromised hosts.","[G0059] Magic Hound: Magic Hound has named a malicious script CacheTask.bat to mimic a legitimate task.","[S0607] KillDisk: KillDisk registers as a service under the Plug-And-Play Support name.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 named tasks `\\Microsoft\\Windows\\SoftwareProtectionPlatform\\EventCacheManager` in order to appear legitimate.","[S0343] Exaramel for Windows: The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description “Windows Check AV” in an apparent attempt to masquerade as a legitimate service.","[G0126] Higaisa: Higaisa named a shellcode loader binary svchast.exe to spoof the legitimate svchost.exe.","[G0032] Lazarus Group: Lazarus Group has used a scheduled task named `SRCheck` to mask the execution of a malicious .dll.","[S0180] Volgmer: Some Volgmer variants add new services with display names generated by a list of hard-coded strings such as Application, Background, Security, and Windows, presumably as a way to masquerade as a legitimate service.","[S0647] Turian: Turian can disguise as a legitimate service to blend into normal operations.","[S0260] InvisiMole: InvisiMole has attempted to disguise itself by registering under a seemingly legitimate service name.","[S0588] GoldMax: GoldMax has impersonated systems management software to avoid detection.","[S0126] ComRAT: ComRAT has used a task name associated with Windows SQM Consolidator.","[S1027] Heyoka Backdoor: Heyoka Backdoor has been named `srvdll.dll` to appear as a legitimate service.","[G0135] BackdoorDiplomacy: BackdoorDiplomacy has disguised their backdoor droppers with naming conventions designed to blend into normal operations.","[G0096] APT41: APT41 has created services to appear as benign system tools.","[S1070] Black Basta: Black Basta has established persistence by creating a new service named `FAX` after deleting the legitimate service by the same name."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.005","technique_name":"Masquerading: Match Legitimate Resource Name or Location","description":"Adversaries may match or approximate the name or location of legitimate files, Registry keys, or other resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: `svchost.exe`). Alternatively, a Windows Registry key may be given a close approximation to a key used by a legitimate program. In containerized environments, a threat actor may create a resource in a trusted namespace or one that matches the naming convention of a container pod or cluster.","detection":"Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect. If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection. In containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names. Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.","procedures":["[S0083] Misdat: Misdat saves itself as a file named `msdtc.exe`, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.","[S0629] RainyDay: RainyDay has used names to mimic legitimate software including \"vmtoolsd.exe\" to spoof Vmtools.","[G0139] TeamTNT: TeamTNT has replaced .dockerd and .dockerenv with their own scripts and cryptocurrency mining software.","[S0459] MechaFlounder: MechaFlounder has been downloaded as a file named lsass.exe, which matches the legitimate Windows file.","[S1050] PcShare: PcShare has been named `wuauclt.exe` to appear as the legitimate Windows Update AutoUpdate Client.","[S0533] SLOTHFULMEDIA: SLOTHFULMEDIA has mimicked the names of known executables, such as mediaplayer.exe.","[S0081] Elise: If installing itself as a service fails, Elise instead writes itself as a file named svchost.exe saved in %APPDATA%\\Microsoft\\Network.","[S0072] OwaAuth: OwaAuth uses the filename owaauth.dll, which is a legitimate file that normally resides in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\Auth\\; the malicious file by the same name is saved in %ProgramFiles%\\Microsoft\\Exchange Server\\ClientAccess\\Owa\\bin\\.","[C0025] 2016 Ukraine Electric Power Attack: During the 2016 Ukraine Electric Power Attack, DLLs and EXEs with filenames associated with common electric power sector protocols were used to masquerade files.","[S0482] Bundlore: Bundlore has disguised a malicious .app file as a Flash Player update.","[S0085] S-Type: S-Type may save itself as a file named `msdtc.exe`, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.","[S1014] DanBot: DanBot files have been named `UltraVNC.exe` and `WINVNC.exe` to appear as legitimate VNC tools.","[S0687] Cyclops Blink: Cyclops Blink can rename its running process to [kworker:0/1] to masquerade as a Linux kernel thread. Cyclops Blink has also named RC scripts used for persistence after WatchGuard artifacts.","[G0047] Gamaredon Group: Gamaredon Group has used legitimate process names to hide malware including svchosst.","[S0668] TinyTurla: TinyTurla has been deployed as `w64time.dll` to appear legitimate.","[S1203] J-magic: J-magic can rename itself as “[nfsiod 0]” to masquerade as the local Network File System (NFS) asynchronous I/O server.","[S0484] Carberp: Carberp has masqueraded as Windows system file names, as well as \"chkntfs.exe\" and \"syscron.exe\".","[G1017] Volt Typhoon: Volt Typhoon has used legitimate looking filenames for compressed copies of the ntds.dit database and used names including cisco_up.exe, cl64.exe, vm3dservice.exe, watchdogd.exe, Win.exe, WmiPreSV.exe, and WmiPrvSE.exe for the Earthworm and Fast Reverse Proxy tools.","[G0060] BRONZE BUTLER: BRONZE BUTLER has given malware the same name as an existing file on the file share server to cause users to unwittingly launch and install the malware on additional systems.","[S1090] NightClub: NightClub has chosen file names to appear legitimate including EsetUpdate-0117583943.exe for its dropper.","[G1018] TA2541: TA2541 has used file names to mimic legitimate Windows files or system functionality.","[S1022] IceApple: IceApple .NET assemblies have used `App_Web_` in their file names to appear legitimate.","[S0171] Felismus: Felismus has masqueraded as legitimate Adobe Content Management System files.","[G0096] APT41: APT41 attempted to masquerade their files as popular anti-virus software.","[G1044] APT42: APT42 has masqueraded the VINETHORN payload as a VPN application.","[G1046] Storm-1811: Storm-1811 has disguised Cobalt Strike installers as a malicious DLL masquerading as part of a legitimate 7zip installation package.","[S0496] REvil: REvil can mimic the names of known executables.","[S0531] Grandoreiro: Grandoreiro has named malicious browser extensions and update files to appear legitimate.","[G0119] Indrik Spider: Indrik Spider used fake updates for FlashPlayer plugin and Google Chrome as initial infection vectors.","[G0046] FIN7: FIN7 has attempted to run Darkside ransomware with the filename sleep.exe.","[C0030] Triton Safety Instrumented System Attack: In the Triton Safety Instrumented System Attack, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files.","[S0468] Skidmap: Skidmap has created a fake rm binary to replace the legitimate Linux binary.","[S1100] Ninja: Ninja has used legitimate looking filenames for its loader including update.dll and x64.dll.","[C0018] C0018: For C0018, the threat actors renamed a Sliver payload to `vmware_kb.exe`.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 renamed software and DLLs with legitimate names to appear benign.","[G1020] Mustard Tempest: Mustard Tempest has used the filename `AutoUpdater.js` to mimic legitimate update files and has also used the Cyrillic homoglyph characters С `(0xd0a1)` and а `(0xd0b0)`, to produce the filename `Сhrome.Updаte.zip`.","[S1011] Tarrask: Tarrask has masqueraded as executable files such as `winupdate.exe`, `date.exe`, or `win.exe`.","[S0138] OLDBAIT: OLDBAIT installs itself in %ALLUSERPROFILE%\\\\Application Data\\Microsoft\\MediaPlayer\\updatewindws.exe; the directory name is missing a space and the file name is missing the letter \"o.\"","[S1182] MagicRAT: MagicRAT stores configuration data in files and file paths mimicking legitimate operating system resources.","[S0589] Sibot: Sibot has downloaded a DLL to the C:\\windows\\system32\\drivers\\ folder and renamed it with a .sys extension.","[G0069] MuddyWater: MuddyWater has disguised malicious executables and used filenames and Registry key names associated with Windows Defender.","[S1032] PyDCrypt: PyDCrypt has dropped DCSrv under the `svchost.exe` name to disk.","[G0090] WIRTE: WIRTE has named a first stage dropper `Kaspersky Update Agent` in order to appear legitimate.","[G0040] Patchwork: Patchwork installed its payload in the startup programs folder as \"Baidu Software Update.\" The group also adds its second stage payload to the startup programs as “Net Monitor.\" They have also dropped QuasarRAT binaries as files named microsoft_network.exe and crome.exe.","[S0520] BLINDINGCAN: BLINDINGCAN has attempted to hide its payload by using legitimate file names such as \"iconcache.db\".","[S0698] HermeticWizard: HermeticWizard has been named `exec_32.dll` to mimic a legitimate MS Outlook .dll.","[S0495] RDAT: RDAT has masqueraded as VMware.exe.","[S0125] Remsec: The Remsec loader implements itself with the name Security Support Provider, a legitimate Windows function. Various Remsec .exe files mimic legitimate file names used by Microsoft, Symantec, Kaspersky, Hewlett-Packard, and VMWare. Remsec also disguised malicious modules using similar filenames as custom network encryption software on victims.","[S1074] ANDROMEDA: ANDROMEDA has been installed to `C:\\Temp\\TrustedInstaller.exe` to mimic a legitimate Windows installer service.","[S0565] Raindrop: Raindrop was installed under names that resembled legitimate Windows file and directory names.","[G0134] Transparent Tribe: Transparent Tribe can mimic legitimate Windows directories by using the same icons and names.","[G0018] admin@338: admin@338 actors used the following command to rename one of their tools to a benign file name: ren \"%temp%\\upload\" audiodg.exe","[C0032] C0032: During the C0032 campaign, TEMP.Veles renamed files to look like legitimate files, such as Windows update files or Schneider Electric application files.","[S0483] IcedID: IcedID has modified legitimate .dll files to include malicious code.","[G1006] Earth Lusca: Earth Lusca used the command `move [file path] c:\\windows\\system32\\spool\\prtprocs\\x64\\spool.dll` to move and register a malicious DLL name as a Windows print processor, which eventually was loaded by the Print Spooler service.","[S0084] Mis-Type: Mis-Type saves itself as a file named `msdtc.exe`, which is also the name of the legitimate Microsoft Distributed Transaction Coordinator service binary.","[G0135] BackdoorDiplomacy: BackdoorDiplomacy has dropped implants in folders named for legitimate software.","[S0526] KGH_SPY: KGH_SPY has masqueraded as a legitimate Windows tool.","[S0606] Bad Rabbit: Bad Rabbit has masqueraded as a Flash Player installer through the executable file install_flash_player.exe.","[G1024] Akira: Akira has used legitimate names and locations for files to evade defenses.","[S0567] Dtrack: One of Dtrack can hide in replicas of legitimate programs like OllyDbg, 7-Zip, and FileZilla.","[S1158] DUSTPAN: DUSTPAN is often disguised as a legitimate Windows binary such as `w3wp.exe` or `conn.exe`.","[S1196] Troll Stealer: Troll Stealer is typically installed via a dropper file that masquerades as a legitimate security program installation file.","[G0137] Ferocious Kitten: Ferocious Kitten has named malicious files update.exe and loaded them into the compromise host's “Public” folder.","[S1042] SUGARDUMP: SUGARDUMP has been named `CrashReporter.exe` to appear as a legitimate Mozilla executable.","[S0196] PUNCHBUGGY: PUNCHBUGGY mimics filenames from %SYSTEM%\\System32 to hide DLLs in %WINDIR% and/or %TEMP%.","[S0340] Octopus: Octopus has been disguised as legitimate programs, such as Java and Telegram Messenger.","[S0446] Ryuk: Ryuk has constructed legitimate appearing installation folder paths by calling GetWindowsDirectoryW and then inserting a null byte at the fourth character of the path. For Windows Vista or higher, the path would appear as C:\\Users\\Public.","[G1039] RedCurl: RedCurl mimicked legitimate file names and scheduled tasks, e.g. ` MicrosoftCurrentupdatesCheck` and `MdMMaintenenceTask` to mask malicious files and scheduled tasks.","[S0070] HTTPBrowser: HTTPBrowser's installer contains a malicious file named navlu.dll to decrypt and run the RAT. navlu.dll is also the name of a legitimate Symantec DLL.","[S1063] Brute Ratel C4: Brute Ratel C4 has used a payload file named OneDrive.update to appear benign.","[S0353] NOKKI: NOKKI is written to %LOCALAPPDATA%\\MicroSoft Updatea\\svServiceUpdate.exe prior being executed in a new process in an apparent attempt to masquerade as a legitimate folder and file.","[S0395] LightNeuron: LightNeuron has used filenames associated with Exchange and Outlook for binary and configuration files, such as winmail.dat.","[G0016] APT29: APT29 has renamed malicious DLLs with legitimate names to appear benign; they have also created an Azure AD certificate with a Common Name that matched the display name of the compromised service principal.","[G0007] APT28: APT28 has changed extensions on files containing exfiltrated data to make them appear benign, and renamed a web shell instance to appear as a legitimate OWA page.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors renamed a malicious executable to `rundll32.exe` to allow it to blend in with other Windows system files.","[C0050] J-magic Campaign: During the J-magic Campaign, threat actors used the name “JunoscriptService” to masquerade malware as the Junos automation scripting service.","[S0587] Penquin: Penquin has mimicked the Cron binary to hide itself on compromised systems.","[S0582] LookBack: LookBack has a C2 proxy tool that masquerades as GUP.exe, which is software used by Notepad++.","[S0493] GoldenSpy: GoldenSpy's setup file installs initial executables under the folder %WinDir%\\System32\\PluginManager.","[G0019] Naikon: Naikon has disguised malicious programs as Google Chrome, Adobe, and VMware executables.","[S0622] AppleSeed: AppleSeed has the ability to rename its payload to ESTCommon.dll to masquerade as a DLL belonging to ESTsecurity.","[S1124] SocGholish: SocGholish has been named `AutoUpdater.js` to mimic legitimate update files.","[S1035] Small Sieve: Small Sieve can use variations of Microsoft and Outlook spellings, such as \"Microsift\", in its file names to avoid detection.","[S0386] Ursnif: Ursnif has used strings from legitimate system files and existing folders for its file, folder, and Registry entry names.","[S0409] Machete: Machete renamed payloads to masquerade as legitimate Google Chrome, Java, Dropbox, Adobe Reader and Python executables.","[S1153] Cuckoo Stealer: Cuckoo Stealer has copied and renamed itself to DumpMediaSpotifyMusicConverter.","[G0114] Chimera: Chimera has renamed malware to GoogleUpdate.exe and WinRAR to jucheck.exe, RecordedTV.ms, teredo.tmp, update.exe, and msadcs1.exe.","[S0595] ThiefQuest: ThiefQuest prepends a copy of itself to the beginning of an executable file while maintaining the name of the executable.","[S0445] ShimRatReporter: ShimRatReporter spoofed itself as AlphaZawgyl_font.exe, a specialized Unicode font.","[S0534] Bazar: The Bazar loader has named malicious shortcuts \"adobe\" and mimicked communications software.","[S0586] TAINTEDSCRIBE: The TAINTEDSCRIBE main executable has disguised itself as Microsoft’s Narrator.","[S0694] DRATzarus: DRATzarus has been named `Flash.exe`, and its dropper has been named `IExplorer`.","[S1039] Bumblebee: Bumblebee has named component DLLs \"RapportGP.dll\" to match those used by the security company Trusteer.","[G0143] Aquatic Panda: Aquatic Panda renamed or moved malicious binaries to legitimate locations to evade defenses and blend into victim environments.","[G0050] APT32: APT32 has renamed a NetCat binary to kb-10233.exe to masquerade as a Windows update. APT32 has also renamed a Cobalt Strike beacon payload to install_flashplayers.exe.","[S0500] MCMD: MCMD has been named Readme.txt to appear legitimate.","[S1034] StrifeWater: StrifeWater has been named `calc.exe` to appear as a legitimate calculator program.","[S0559] SUNBURST: SUNBURST created VBScripts that were named after existing services or folders to blend into legitimate activities.","[G0004] Ke3chang: Ke3chang has dropped their malware into legitimate installed software paths including: `C:\\ProgramFiles\\Realtek\\Audio\\HDA\\AERTSr.exe`, `C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\FoxitRdr64.exe`, `C:\\Program Files (x86)\\Adobe\\Flash Player\\AddIns\\airappinstaller\\airappinstall.exe`, and `C:\\Program Files (x86)\\Adobe\\Acrobat Reader DC\\Reader\\AcroRd64.exe`.","[S0269] QUADAGENT: QUADAGENT used the PowerShell filenames Office365DCOMCheck.ps1 and SystemDiskClean.ps1.","[S0458] Ramsay: Ramsay has masqueraded as a 7zip installer.","[C0017] C0017: During C0017, APT41 used file names beginning with USERS, SYSUSER, and SYSLOG for DEADEYE, and changed KEYPLUG file extensions from .vmp to .upx likely to avoid hunting detections.","[G0081] Tropic Trooper: Tropic Trooper has hidden payloads in Flash directories and fake installer files.","[G0059] Magic Hound: Magic Hound has used `dllhost.exe` to mask Fast Reverse Proxy (FRP) and `MicrosoftOutLookUpdater.exe` for Plink.","[S1160] Latrodectus: Latrodectus has been packed to appear as a component to Bitdefender’s kernel-mode driver, TRUFOS.SYS.","[S0578] SUPERNOVA: SUPERNOVA has masqueraded as a legitimate SolarWinds DLL.","[S0013] PlugX: PlugX has been disguised as legitimate Adobe and PotPlayer files.","[S0402] OSX/Shlayer: OSX/Shlayer can masquerade as a Flash Player update.","[S0188] Starloader: Starloader has masqueraded as legitimate software update packages such as Adobe Acrobat Reader and Intel.","[S0631] Chaes: Chaes has used an unsigned, crafted DLL module named hha.dll that was designed to look like a legitimate 32-bit Windows DLL.","[G0056] PROMETHIUM: PROMETHIUM has disguised malicious installer files by bundling them with legitimate software installers.","[S1019] Shark: Shark binaries have been named `audioddg.pdb` and `Winlangdb.pdb` in order to appear legitimate.","[S1183] StrelaStealer: StrelaStealer payloads have tailored filenames to include names identical to the name of the targeted organization or company.","[G1032] INC Ransom: INC Ransom has named a PsExec executable winupd to mimic a legitimate Windows update file.","[S0661] FoggyWeb: FoggyWeb can be disguised as a Visual Studio file such as `Windows.Data.TimeZones.zh-PH.pri` to evade detection. Also, FoggyWeb's loader can mimic a genuine `dll` file that carries out the same import functions as the legitimate Windows `version.dll` file.","[S0198] NETWIRE: NETWIRE has masqueraded as legitimate software including TeamViewer and macOS Finder.","[C0038] HomeLand Justice: During HomeLand Justice, threat actors renamed ROADSWEEP to GoXML.exe and ZeroCleare to cl.exe.","[S1201] TRANSLATEXT: TRANSLATEXT has been named `GoogleTranslate.crx` to masquerade as a legitimate Chrome extension.","[S0136] USBStealer: USBStealer mimics a legitimate Russian program called USB Disk Security.","[S0652] MarkiRAT: MarkiRAT can masquerade as update.exe and svehost.exe; it has also mimicked legitimate Telegram and Chrome files.","[C0014] Operation Wocao: During Operation Wocao, the threat actors renamed some tools and executables to appear as legitimate programs.","[G1014] LuminousMoth: LuminousMoth has disguised their exfiltration malware as `ZoomVideoApp.exe`.","[S0697] HermeticWiper: HermeticWiper has used the name `postgressql.exe` to mask a malicious payload.","[G0107] Whitefly: Whitefly has named the malicious DLL the same name as DLLs belonging to legitimate software from various security vendors.","[S0630] Nebulae: Nebulae uses functions named StartUserModeBrowserInjection and StopUserModeBrowserInjection indicating that it's trying to imitate chrome_frame_helper.dll.","[G0049] OilRig: OilRig has named a downloaded copy of the Plink tunneling utility as \\ProgramData\\Adobe.exe.","[G0095] Machete: Machete's Machete MSI installer has masqueraded as a legitimate Adobe Acrobat Reader installer.","[S0669] KOCTOPUS: KOCTOPUS has been disguised as legitimate software programs associated with the travel and airline industries.","[S0560] TEARDROP: TEARDROP files had names that resembled legitimate Window file and directory names.","[G0008] Carbanak: Carbanak has named malware \"svchost.exe,\" which is the name of the Windows shared service host program.","[C0006] Operation Honeybee: During Operation Honeybee, the threat actors used a legitimate Windows executable and secure directory for their payloads to bypass UAC.","[G0032] Lazarus Group: Lazarus Group has renamed malicious code to disguise it as Microsoft's narrator and other legitimate files.","[S0600] Doki: Doki has disguised a file as a Linux kernel module.","[S0562] SUNSPOT: SUNSPOT was identified on disk with a filename of taskhostsvc.exe and it created an encrypted log file at C:\\Windows\\Temp\\vmware-vmdmp.log.","[S0588] GoldMax: GoldMax has used filenames that matched the system name, and appeared as a scheduled task impersonating systems management software within the corresponding ProgramData subfolder.","[S0128] BADNEWS: BADNEWS attempts to hide its payloads using legitimate filenames.","[S0058] SslMM: To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an “Office Start,” “Yahoo Talk,” “MSN Gaming Z0ne,” or “MSN Talk” shortcut.","[G0012] Darkhotel: Darkhotel has used malware that is disguised as a Secure Shell (SSH) tool.","[G0006] APT1: The file name AcroRD32.exe, a legitimate process name for Adobe's Acrobat Reader, was used by APT1 as a name for malware.","[S0182] FinFisher: FinFisher renames one of its .dll files to uxtheme.dll in an apparent attempt to masquerade as a legitimate file.","[G0108] Blue Mockingbird: Blue Mockingbird has masqueraded their XMRIG payload name by naming it wercplsupporte.dll after the legitimate wercplsupport.dll file.","[G0121] Sidewinder: Sidewinder has named malicious files rekeywiz.exe to match the name of a legitimate Windows executable.","[S1018] Saint Bot: Saint Bot has been disguised as a legitimate executable, including as Windows SDK.","[S1078] RotaJakiro: RotaJakiro has used the filename `systemd-daemon` in an attempt to appear legitimate.","[S0665] ThreatNeedle: ThreatNeedle chooses its payload creation path from a randomly selected service name from netsvc.","[S0259] InnaputRAT: InnaputRAT variants have attempted to appear legitimate by using the file names SafeApp.exe and NeutralApp.exe.","[S0274] Calisto: Calisto's installation file is an unsigned DMG image under the guise of Intego’s security solution for mac.","[S1046] PowGoop: PowGoop has used a DLL named Goopdate.dll to impersonate a legitimate Google update file.","[S0187] Daserf: Daserf uses file and folder names related to legitimate programs in order to blend in, such as HP, Intel, Adobe, and perflogs.","[G0045] menuPass: menuPass has been seen changing malicious files to appear legitimate.","[S1099] Samurai: Samurai has created the directory `%COMMONPROGRAMFILES%\\Microsoft Shared\\wmi\\` to contain DLLs for loading successive stages.","[S1197] GoBear: GoBear is installed through droppers masquerading as legitimate, signed software installers.","[S0455] Metamorfo: Metamorfo has disguised an MSI file as the Adobe Acrobat Reader Installer and has masqueraded payloads as OneDrive, WhatsApp, or Spotify, for example.","[G0054] Sowbug: Sowbug named its tools to masquerade as Windows or Adobe Reader software, such as by using the file name adobecms.exe and the directory CSIDL_APPDATA\\microsoft\\security.","[G1003] Ember Bear: Ember Bear has renamed tools to match legitimate utilities, such as renaming GOST tunneling instances to `java` in victim environments.","[S0583] Pysa: Pysa has executed a malicious executable by naming it svchost.exe.","[G0087] APT39: APT39 has used malware disguised as Mozilla Firefox and a tool named mfevtpse.exe to proxy C2 communications, closely mimicking a legitimate McAfee file mfevtps.exe.","[S1070] Black Basta: The Black Basta dropper has mimicked an application for creating USB bootable drivers.","[G1047] Velvet Ant: Velvet Ant used a malicious DLL, `iviewers.dll`, that mimics the legitimate \"OLE/COM Object Viewer\" within Windows.","[G0094] Kimsuky: Kimsuky has renamed malware to legitimate names such as ESTCommon.dll or patch.dll.","[S0690] Green Lambert: Green Lambert has been disguised as a Growl help file.","[G1023] APT5: APT5 has named exfiltration archives to mimic Windows Updates at times using filenames with a `KB.zip` pattern.","[S0410] Fysbis: Fysbis has masqueraded as trusted software rsyncd and dbus-inotifier.","[G0033] Poseidon Group: Poseidon Group tools attempt to spoof anti-virus processes as a means of self-defense.","[G0091] Silence: Silence has named its backdoor \"WINWORD.exe\".","[S1041] Chinoxy: Chinoxy has used the name `eoffice.exe` in attempt to appear as a legitimate file.","[G0117] Fox Kitten: Fox Kitten has named binaries and configuration files svhost and dllhost respectively to appear legitimate.","[S0144] ChChes: ChChes copies itself to an .exe file with a filename that is likely intended to imitate Norton Antivirus but has several letters reversed (e.g. notron.exe).","[S0141] Winnti for Windows: A Winnti for Windows implant file was named ASPNET_FILTER.DLL, mimicking the legitimate ASP.NET ISAPI filter DLL with the same name.","[G1022] ToddyCat: ToddyCat has used the name `debug.exe` for malware components.","[S0477] Goopy: Goopy has impersonated the legitimate goopdate.dll, which was dropped on the target system with a legitimate GoogleUpdate.exe.","[G1008] SideCopy: SideCopy has used a legitimate DLL file name, `Duser.dll` to disguise a malicious remote access tool.","[S0268] Bisonal: Bisonal has renamed malicious code to `msacm32.dll` to hide within a legitimate library; earlier versions were disguised as `winhelp`.","[S0015] Ixeshe: Ixeshe has used registry values and file names associated with Adobe software, such as AcroRd32.exe.","[S0475] BackConfig: BackConfig has hidden malicious payloads in %USERPROFILE%\\Adobe\\Driver\\dwg\\ and mimicked the legitimate DHCP service binary.","[S0625] Cuba: Cuba has been disguised as legitimate 360 Total Security Antivirus and OpenVPN programs.","[S0501] PipeMon: PipeMon modules are stored on disk with seemingly benign names including use of a file extension associated with a popular word processor.","[G0010] Turla: Turla has named components of LunarWeb to mimic Zabbix agent logs.","[G0129] Mustang Panda: Mustang Panda has used names like `adobeupdate.dat` and `PotPlayerDB.dat` to disguise PlugX, and a file named `OneDrive.exe` to load a Cobalt Strike payload.","[S1017] OutSteel: OutSteel attempts to download and execute Saint Bot to a statically-defined location attempting to mimic svchost: %TEMP%\\\\svjhost.exe.","[S0491] StrongPity: StrongPity has been bundled with legitimate software installation files for disguise.","[S0666] Gelsemium: Gelsemium has named malicious binaries `serv.exe`, `winprint.dll`, and `chrome_elf.dll` and has set its persistence in the Registry with the key value Chrome Update to appear legitimate.","[S0356] KONNI: KONNI has created a shortcut called \"Anti virus service.lnk\" in an apparent attempt to masquerade as a legitimate file.","[G1016] FIN13: FIN13 has masqueraded WAR files to look like legitimate packages such as, wsexample.war, wsexamples.com, examples.war, and exampl3s.war.","[S0334] DarkComet: DarkComet has dropped itself onto victim machines with file names such as WinDefender.Exe and winupdate.exe in an apparent attempt to masquerade as a legitimate file.","[S0605] EKANS: EKANS has been disguised as update.exe to appear as a valid executable.","[C0013] Operation Sharpshooter: During Operation Sharpshooter, threat actors installed Rising Sun in the Startup folder and disguised it as `mssync.exe`.","[S0260] InvisiMole: InvisiMole has disguised its droppers as legitimate software or documents, matching their original names and locations, and saved its files as mpr.dll in the Windows folder.","[S0086] ZLib: ZLib mimics the resource version information of legitimate Realtek Semiconductor, Nvidia, or Synaptics modules.","[S1084] QUIETEXIT: QUIETEXIT has attempted to change its name to `cron` upon startup. During incident response, QUIETEXIT samples have been identified that were renamed to blend in with other legitimate files.","[G0034] Sandworm Team: Sandworm Team has avoided detection by naming a malicious binary explorer.exe.","[G0106] Rocke: Rocke has used shell scripts which download mining executables and saves them with the filename \"java\"."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.006","technique_name":"Masquerading: Space after Filename","description":"Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to evil.txt (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed . Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.","detection":"It's not common for spaces to be at the end of filenames, so this is something that can easily be checked with file monitoring. From the user's perspective though, this is very hard to notice from within the Finder.app or on the command-line in Terminal.app. Processes executed from binaries containing non-standard extensions in the filename are suspicious.","procedures":["[G0082] APT38: APT38 has put several spaces before a file extension to avoid detection and suspicion.","[S0276] Keydnap: Keydnap puts a space after a false .jpg extension so that execution actually goes through the Terminal.app program."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.007","technique_name":"Masquerading: Double File Extension","description":"Adversaries may abuse a double extension in the filename as a means of masquerading the true file type. A file name may include a secondary file type extension that may cause only the first extension to be displayed (ex: File.txt.exe may render in some views as just File.txt). However, the second extension is the true file type that determines how the file is opened and executed. The real file extension may be hidden by the operating system in the file browser (ex: explorer.exe), as well as in any software configured using or similar to the system’s policies. Adversaries may abuse double extensions to attempt to conceal dangerous file types of payloads. A very common usage involves tricking a user into opening what they think is a benign file type but is actually executable code. Such files often pose as email attachments and allow an adversary to gain Initial Access into a user’s system via Spearphishing Attachment then User Execution. For example, an executable file attachment named Evil.txt.exe may display as Evil.txt to a user. The user may then view it as a benign text file and open it, inadvertently executing the hidden malware. Common file types, such as text files (.txt, .doc, etc.) and image files (.jpg, .gif, etc.) are typically used as the first extension to appear benign. Executable extensions commonly regarded as dangerous, such as .exe, .lnk, .hta, and .scr, often appear as the second extension and true file type.","detection":"Monitor for files written to disk that contain two file extensions, particularly when the second is an executable.","procedures":["[S1111] DarkGate: DarkGate masquerades malicious LNK files as PDF objects using the double extension .pdf.lnk.","[S0534] Bazar: The Bazar loader has used dual-extension executable files such as PreviewReport.DOC.exe.","[G0129] Mustang Panda: Mustang Panda has used an additional filename extension to hide the true file type.","[S1015] Milan: Milan has used an executable named `companycatalog.exe.config` to appear benign."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.008","technique_name":"Masquerading: Masquerade File Type","description":"Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file’s signature, extension, icon, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file’s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file’s type. For example, the header of a JPEG file, is 0xFF 0xD8 and the file extension is either `.JPE`, `.JPEG` or `.JPG`. Adversaries may edit the header’s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., Ingress Tool Transfer) and stored (e.g., Upload Malware) so that adversaries may move their malware without triggering detections. Common non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign. Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of test.gif. A user may not know that a file is malicious due to the benign appearance and file extension. Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.","detection":null,"procedures":["[C0025] 2016 Ukraine Electric Power Attack: During the 2016 Ukraine Electric Power Attack, Sandworm Team masqueraded executables as `.txt` files.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group disguised malicious template files as JPEG files to avoid detection.","[G1017] Volt Typhoon: Volt Typhoon has appended copies of the ntds.dit database with a .gif file extension.","[S1190] Kapeka: Kapeka masquerades as a Microsoft Word Add-In file, with the extension `.wll`, but is a malicious DLL file.","[G1043] BlackByte: BlackByte masqueraded configuration files containing encryption keys as PNG files.","[S0650] QakBot: The QakBot payload has been disguised as a PNG file and hidden within LNK files using a Microsoft File Explorer icon.","[S1130] Raspberry Robin: Raspberry Robin has historically been delivered via infected USB drives containing a malicious LNK object masquerading as a legitimate folder.","[S1074] ANDROMEDA: ANDROMEDA has been delivered through a LNK file disguised as a folder.","[S1063] Brute Ratel C4: Brute Ratel C4 has used Microsoft Word icons to hide malicious LNK files.","[S1213] Lumma Stealer: Lumma Stealer has used payloads that resemble benign file extensions such as .mp3, .accdb, and .pub, though the files contained malicious JavaScript content.","[S1053] AvosLocker: AvosLocker has been disguised as a .jpg file.","[S1182] MagicRAT: MagicRAT can download additional executable payloads that masquerade as GIF files.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D has disguised it's true file structure as an application bundle by adding special characters to the filename and using the icon for legitimate Word documents.","[S1183] StrelaStealer: StrelaStealer has been distributed as a DLL/HTML polyglot file."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.009","technique_name":"Masquerading: Break Process Trees","description":"An adversary may attempt to evade process tree-based analysis by modifying executed malware's parent process ID (PPID). If endpoint protection software leverages the “parent-child\" relationship for detection, breaking this relationship could result in the adversary’s behavior not being associated with previous process tree activity. On Unix-based systems breaking this process tree is common practice for administrators to execute software using scripts and programs. On Linux systems, adversaries may execute a series of Native API calls to alter malware's process tree. For example, adversaries can execute their payload without any arguments, call the `fork()` API call twice, then have the parent process exit. This creates a grandchild process with no parent process that is immediately adopted by the `init` system process (PID 1), which successfully disconnects the execution of the adversary's payload from its previous process tree. Another example is using the “daemon” syscall to detach from the current parent process and run in the background.","detection":null,"procedures":["[S1161] BPFDoor: After initial execution, BPFDoor forks itself and runs the fork with the `--init` flag, which allows it to execute secondary clean up operations. The parent process terminates leaving the forked process to be inherited by the legitimate process init."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.010","technique_name":"Masquerading: Masquerade Account Name","description":"Adversaries may match or approximate the names of legitimate accounts to make newly created ones appear benign. This will typically occur during Create Account, although accounts may also be renamed at a later date. This may also coincide with Account Access Removal if the actor first deletes an account before re-creating one with the same name. Often, adversaries will attempt to masquerade as service accounts, such as those associated with legitimate software, data backups, or container cluster management. They may also give accounts generic, trustworthy names, such as “admin”, “help”, or “root.” Sometimes adversaries may model account names off of those already existing in the system, as a follow-on behavior to Account Discovery. Note that this is distinct from Impersonation, which describes impersonating specific trusted individuals or organizations, rather than user or service account names.","detection":null,"procedures":["[S0143] Flame: Flame can create backdoor accounts with login `HelpAssistant` on domain connected systems if appropriate rights are available.","[G1046] Storm-1811: Storm-1811 has created Microsoft Teams accounts that spoof IT support and helpdesk members for use in application and voice phishing.","[G0059] Magic Hound: Magic Hound has created local accounts named `help` and `DefaultAccount` on compromised machines.","[G0035] Dragonfly: Dragonfly has created accounts disguised as legitimate backup and service accounts as well as an email administration account.","[S0382] ServHelper: ServHelper has created a new user named `supportaccount`.","[C0025] 2016 Ukraine Electric Power Attack: During the 2016 Ukraine Electric Power Attack, Sandworm Team created two new accounts, “admin” and “система” (System).","[G0022] APT3: APT3 has been known to create or enable accounts, such as support_388945a0."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.011","technique_name":"Masquerading: Overwrite Process Arguments","description":"Adversaries may modify a process's in-memory arguments to change its name in order to appear as a legitimate or benign process. On Linux, the operating system stores command-line arguments in the process’s stack and passes them to the `main()` function as the `argv` array. The first element, `argv[0]`, typically contains the process name or path - by default, the command used to actually start the process (e.g., `cat /etc/passwd`). By default, the Linux `/proc` filesystem uses this value to represent the process name. The `/proc//cmdline` file reflects the contents of this memory, and tools like `ps` use it to display process information. Since arguments are stored in user-space memory at launch, this modification can be performed without elevated privileges. During runtime, adversaries can erase the memory used by all command-line arguments for a process, overwriting each argument string with null bytes. This removes evidence of how the process was originally launched. They can then write a spoofed string into the memory region previously occupied by `argv[0]` to mimic a benign command, such as `cat resolv.conf`. The new command-line string is reflected in `/proc//cmdline` and displayed by tools like `ps`.","detection":null,"procedures":["[S1161] BPFDoor: BPFDoor overwrites the `argv[0]` value used by the Linux `/proc` filesystem to determine the command line and command name to display for each process. BPFDoor selects a name from 10 hardcoded names that resemble Linux system daemons, such as; `/sbin/udevd -d`, `dbus-daemon --system`, `avahi-daemon: chroot helper`, `/sbin/auditd -n`, and `/usr/lib/systemd/systemd-journald`."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.001","technique_name":"Process Injection: Dynamic-link Library Injection","description":"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process. DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL). Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary). Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1027] Heyoka Backdoor: Heyoka Backdoor can inject a DLL into rundll32.exe for execution.","[S1018] Saint Bot: Saint Bot has injected its DLL component into `EhStorAurhn.exe`.","[S0082] Emissary: Emissary injects its DLL file into a newly spawned Internet Explorer process.","[S0125] Remsec: Remsec can perform DLL injection.","[S1066] DarkTortilla: DarkTortilla can use a .NET-based DLL named `RunPe6` for process injection.","[S0089] BlackEnergy: BlackEnergy injects its DLL component into svchost.exe.","[G0010] Turla: Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges.","[S0613] PS1: PS1 can inject its payload DLL Into memory.","[S0250] Koadic: Koadic can perform process injection by using a reflective DLL.","[S0055] RARSTONE: After decrypting itself in memory, RARSTONE downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This “downloaded” file is actually not dropped onto the system.","[S0154] Cobalt Strike: Cobalt Strike has the ability to load DLLs via reflective injection.","[S0461] SDBbot: SDBbot has the ability to inject a downloaded DLL into a newly created rundll32.exe process.","[S0455] Metamorfo: Metamorfo has injected a malicious DLL into the Windows Media Player process (wmplayer.exe).","[S0126] ComRAT: ComRAT has injected its orchestrator DLL into explorer.exe. ComRAT has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process.","[S0273] Socksbot: Socksbot creates a suspended svchost process and injects its DLL into it.","[S1039] Bumblebee: The Bumblebee loader can support the `Dij` command which gives it the ability to inject DLLs into the memory of other processes.","[S0681] Lizar: Lizar has used the PowerKatz plugin that can be loaded into the address space of a PowerShell process through reflective DLL loading.","[G1026] Malteiro: Malteiro has injected Mispadu’s DLL into a process.","[S1044] FunnyDream: The FunnyDream FilepakMonitor component can inject into the Bka.exe process using the `VirtualAllocEx`, `WriteProcessMemory` and `CreateRemoteThread` APIs to load the DLL component.","[S0449] Maze: Maze has injected the malware DLL into a target process.","[S0167] Matryoshka: Matryoshka uses reflective DLL injection to inject the malicious library and execute the RAT.","[S0192] Pupy: Pupy can migrate into another process using reflective DLL injection.","[S0194] PowerSploit: PowerSploit contains a collection of CodeExecution modules that inject code (DLL, shellcode) into a process.","[S0182] FinFisher: FinFisher injects itself into various processes depending on whether it is low integrity or high integrity.","[S0501] PipeMon: PipeMon can inject its modules into various processes using reflective DLL loading.","[S0024] Dyre: Dyre injects into other processes to load modules.","[S1210] Sagerunex: Sagerunex is designed to be dynamic link library (DLL) injected into an infected endpoint and executed directly in memory.","[G0135] BackdoorDiplomacy: BackdoorDiplomacy has dropped legitimate software onto a compromised host and used it to execute malicious DLLs.","[S0460] Get2: Get2 has the ability to inject DLLs into processes.","[S0011] Taidoor: Taidoor can perform DLL loading.","[S0241] RATANKBA: RATANKBA performs a reflective DLL injection using a given pid.","[S1081] BADHATCH: BADHATCH has the ability to execute a malicious DLL by injecting into `explorer.exe` on a compromised machine.","[S0576] MegaCortex: MegaCortex loads injecthelper.dll into a newly created rundll32.exe process.","[S0603] Stuxnet: Stuxnet injects an entire DLL into an existing, newly created, or preselected trusted process.","[C0015] C0015: During C0015, the threat actors used a DLL named `D8B3.dll` that was injected into the Winlogon process.","[G0065] Leviathan: Leviathan has utilized techniques like reflective DLL loading to write a DLL into memory and load a shell that provides backdoor access to the victim.","[S0265] Kazuar: If running in a Windows environment, Kazuar saves a DLL to disk that is injected into the explorer.exe process to execute the payload. Kazuar can also be configured to inject and execute within specific processes.","[S0038] Duqu: Duqu will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host).","[S0012] PoisonIvy: PoisonIvy can inject a malicious DLL into a process.","[S0021] Derusbi: Derusbi injects itself into the secure shell (SSH) process.","[S0412] ZxShell: ZxShell is injected into a shared SVCHOST process.","[G0024] Putter Panda: An executable dropped onto victims by Putter Panda aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).","[S0666] Gelsemium: Gelsemium has the ability to inject DLLs into specific processes.","[S0135] HIDEDRV: HIDEDRV injects a DLL for Downdelph into the explorer.exe process.","[S0335] Carbon: Carbon has a command to inject code into a process.","[G0032] Lazarus Group: A Lazarus Group malware sample performs reflective DLL injection.","[G0081] Tropic Trooper: Tropic Trooper has injected a DLL backdoor into dllhost.exe and svchost.exe.","[S0581] IronNetInjector: IronNetInjector has the ability to inject a DLL into running processes, including the IronNetInjector DLL into explorer.exe.","[S0467] TajMahal: TajMahal has the ability to inject DLLs for malicious plugins into running processes.","[S1026] Mongall: Mongall can inject a DLL into `rundll32.exe` for execution.","[S0575] Conti: Conti has loaded an encrypted DLL into memory and then executes it.","[S0458] Ramsay: Ramsay can use ImprovedReflectiveDLLInjection to deploy components.","[S0022] Uroburos: Uroburos can use DLL injection to load embedded files and modules.","[S0484] Carberp: Carberp's bootkit can inject a malicious DLL into the address space of running processes.","[S0615] SombRAT: SombRAT can execute loadfromfile, loadfromstorage, and loadfrommem to inject a DLL from disk, storage, or memory respectively.","[S0018] Sykipot: Sykipot injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.","[S0367] Emotet: Emotet has been observed injecting in to Explorer.exe and other processes.","[S0456] Aria-body: Aria-body has the ability to inject itself into another process such as rundll32.exe and dllhost.exe.","[S0457] Netwalker: The Netwalker DLL has been injected reflectively into the memory of a legitimate running process.","[G0092] TA505: TA505 has been seen injecting a DLL into winword.exe.","[S0081] Elise: Elise injects DLL files into iexplore.exe.","[G0102] Wizard Spider: Wizard Spider has injected malicious DLLs into memory with read, write, and execute permissions.","[S0596] ShadowPad: ShadowPad has injected a DLL into svchost.exe."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.002","technique_name":"Process Injection: Portable Executable Injection","description":"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1063] Brute Ratel C4: Brute Ratel C4 has injected Latrodectus into the Explorer.exe process on comrpomised hosts.","[S0260] InvisiMole: InvisiMole can inject its backdoor as a portable executable into a target process.","[S0030] Carbanak: Carbanak downloads an executable and injects it directly into a new process.","[G0106] Rocke: Rocke's miner, \"TermsHost.exe\", evaded defenses by injecting itself into Windows processes, including Notepad.exe.","[G0078] Gorgon Group: Gorgon Group malware can download a remote access tool, ShiftyBug, and inject into another process.","[S0681] Lizar: Lizar can execute PE files in the address space of the specified process.","[S1138] Gootloader: Gootloader can use its own PE loader to execute payloads in memory.","[S0342] GreyEnergy: GreyEnergy has a module to inject a PE binary into a remote process.","[S1158] DUSTPAN: DUSTPAN can inject its decrypted payload into another process.","[S1145] Pikabot: Pikabot, following payload decryption, creates a process hard-coded into the dropped (e.g., WerFault.exe) and injects the decrypted core modules into it.","[S0330] Zeus Panda: Zeus Panda checks processes on the system and if they meet the necessary requirements, it injects into that process."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.003","technique_name":"Process Injection: Thread Execution Hijacking","description":"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively. This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1145] Pikabot: Pikabot can create a suspended instance of a legitimate process (e.g., ctfmon.exe), allocate memory within the suspended process corresponding to Pikabot's core module, then redirect execution flow via `SetContextThread` API so that when the thread resumes the Pikabot core module is executed.","[S0579] Waterbear: Waterbear can use thread injection to inject shellcode into the process of security software.","[S0168] Gazer: Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process.","[S0094] Trojan.Karagany: Trojan.Karagany can inject a suspended thread of its own process into a new process and initiate via the ResumeThread API."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.004","technique_name":"Process Injection: Asynchronous Procedure Call","description":"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. APC injection is commonly performed by attaching malicious code to the APC Queue of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point QueueUserAPC can be used to invoke a function (such as LoadLibrayA pointing to a malicious DLL). A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. AtomBombing is another variation that utilizes APCs to invoke malicious code previously written to the global atom table. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S0199] TURNEDUP: TURNEDUP is capable of injecting code into the APC queue of a created Rundll32 process as part of an \"Early Bird injection.\"","[S0517] Pillowmint: Pillowmint has used the NtQueueApcThread syscall to inject code into svchost.exe.","[S0260] InvisiMole: InvisiMole can inject its code into a trusted process via the APC queue.","[S1039] Bumblebee: Bumblebee can use asynchronous procedure call (APC) injection to execute commands received from C2.","[S1018] Saint Bot: Saint Bot has written its payload into a newly-created `EhStorAuthn.exe` process using `ZwWriteVirtualMemory` and executed it using `NtQueueApcThread` and `ZwAlertResumeThread`.","[S0484] Carberp: Carberp has queued an APC routine to explorer.exe by calling ZwQueueApcThread.","[S0483] IcedID: IcedID has used ZwQueueApcThread to inject itself into remote processes.","[S1207] XLoader: XLoader injects code into the APC queue using `NtQueueApcThread` API.","[S1081] BADHATCH: BADHATCH can inject itself into a new `svchost.exe -k netsvcs` process using the asynchronous procedure call (APC) queue.","[G0061] FIN8: FIN8 has injected malicious code into a new svchost.exe process.","[S0438] Attor: Attor performs the injection by attaching its code into the APC queue using NtQueueApcThread API.","[S1085] Sardonic: Sardonic can use the `QueueUserAPC` API to execute shellcode on a compromised machine."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.005","technique_name":"Process Injection: Thread Local Storage","description":"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other Process Injection techniques such as Process Hollowing. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S0386] Ursnif: Ursnif has injected code into target processes via thread local storage callbacks."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.008","technique_name":"Process Injection: Ptrace System Calls","description":"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1109] PACEMAKER: PACEMAKER can use PTRACE to attach to a targeted process to read process memory."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.009","technique_name":"Process Injection: Proc Memory","description":"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within /proc/[pid]/maps can be overwritten using dd. Other techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[C0035] KV Botnet Activity: KV Botnet Activity final payload installation includes mounting and binding to the \\/proc\\/ filepath on the victim system to enable subsequent operation in memory while also removing on-disk artifacts."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.011","technique_name":"Process Injection: Extra Window Memory Injection","description":"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM. Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong and SetWindowLong . Malware associated with this technique have also used SendNotifyMessage to trigger the associated window procedure and eventual malicious injection.","procedures":["[S0091] Epic: Epic has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process.","[S0177] Power Loader: Power Loader overwrites Explorer’s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.012","technique_name":"Process Injection: Process Hollowing","description":"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process. Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as CreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection before being written to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively. This is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (ex: through API flags or process’ thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[G0078] Gorgon Group: Gorgon Group malware can use process hollowing to inject one of its trojans into another process.","[S0483] IcedID: IcedID can inject a Cobalt Strike beacon into cmd.exe via process hallowing.","[S1207] XLoader: XLoader uses process hollowing by injecting itself into the `explorer.exe` process and other files ithin the Windows `SysWOW64` directory.","[G0027] Threat Group-3390: A Threat Group-3390 tool can spawn `svchost.exe` and inject the payload into that process.","[S0662] RCSession: RCSession can launch itself from a hollowed svchost.exe process.","[S0354] Denis: Denis performed process hollowing through the API calls CreateRemoteThread, ResumeThread, and Wow64SetThreadContext.","[S1065] Woody RAT: Woody RAT can create a suspended notepad process and write shellcode to delete a file into the suspended process using `NtWriteVirtualMemory`.","[S0344] Azorult: Azorult can decrypt the payload into memory, create a new suspended process of itself, then inject a decrypted payload to the new process and resume new process execution.","[G0040] Patchwork: A Patchwork payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.","[S0650] QakBot: QakBot can use process hollowing to execute its main payload.","[S0154] Cobalt Strike: Cobalt Strike can use process hollowing for execution.","[S0447] Lokibot: Lokibot has used process hollowing to inject itself into legitimate Windows process.","[S1086] Snip3: Snip3 can use RunPE to execute malicious payloads within a hollowed Windows process.","[S0234] Bandook: Bandook has been launched by starting iexplore.exe and replacing it with Bandook's payload.","[S1213] Lumma Stealer: Lumma Stealer has used process hollowing leveraging a legitimate program such as “BitLockerToGo.exe” to inject a malicious payload.","[G1043] BlackByte: BlackByte used process hollowing for defense evasion purposes.","[S1130] Raspberry Robin: Raspberry Robin will execute a legitimate process, then suspend it to inject code for a Tor client into the process, followed by resumption of the process to enable Tor client execution.","[S0226] Smoke Loader: Smoke Loader spawns a new copy of c:\\windows\\syswow64\\explorer.exe and then replaces the executable code in memory with malware.","[S0373] Astaroth: Astaroth can create a new process in a suspended state from a targeted legitimate process in order to unmap its memory and replace it with malicious code.","[S0567] Dtrack: Dtrack has used process hollowing shellcode to target a predefined list of processes from %SYSTEM32%.","[G1018] TA2541: TA2541 has used process hollowing to execute CyberGate malware.","[S0689] WhisperGate: WhisperGate has the ability to inject its fourth stage into a suspended process created by the legitimate Windows utility `InstallUtil.exe`.","[S0128] BADNEWS: BADNEWS has a command to download an .exe and use process hollowing to inject it into a new process.","[S0660] Clambling: Clambling can execute binaries through process hollowing.","[S1138] Gootloader: Gootloader can inject its Delphi executable into ImagingDevices.exe using a process hollowing technique.","[G0045] menuPass: menuPass has used process hollowing in iexplore.exe to load the RedLeaves implant.","[S0189] ISMInjector: ISMInjector hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.","[S1018] Saint Bot: The Saint Bot loader has used API calls to spawn `MSBuild.exe` in a suspended state before injecting the decrypted Saint Bot binary into it.","[S0198] NETWIRE: The NETWIRE payload has been injected into benign Microsoft executables via process hollowing.","[S0367] Emotet: Emotet uses a copy of `certutil.exe` stored in a temporary directory for process hollowing, starting the program in a suspended state before loading malicious code.","[S0331] Agent Tesla: Agent Tesla has used process hollowing to create and manipulate processes through sections of unmapped memory by reallocating that space with its malicious code.","[S0229] Orz: Some Orz versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload.","[S0266] TrickBot: TrickBot injects into the svchost.exe process.","[S0386] Ursnif: Ursnif has used process hollowing to inject into child processes.","[G0094] Kimsuky: Kimsuky has used a file injector DLL to spawn a benign process on the victim's system and inject the malicious payload into it via process hollowing.","[S0534] Bazar: Bazar can inject into a target process including Svchost, Explorer, and cmd using process hollowing.","[S0127] BBSRAT: BBSRAT has been seen loaded into msiexec.exe through process hollowing to hide its execution.","[S0038] Duqu: Duqu is capable of loading executable code via process hollowing.","[S1111] DarkGate: DarkGate leverages process hollowing techniques to evade detection, such as decrypting the content of an encrypted PE file and injecting it into the process vbc.exe."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1055.013","technique_name":"Process Injection: Process Doppelgänging","description":"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. Adversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. Process Doppelgänging is implemented in 4 steps : * Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction. * Load – Create a shared section of memory and load the malicious executable. * Rollback – Undo changes to original executable, effectively removing malicious code from the file system. * Animate – Create a process from the tainted section of memory and initiate execution. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitor and analyze calls to CreateTransaction, CreateFileTransacted, RollbackTransaction, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to NtCreateProcessEx and NtCreateThreadEx as well as API calls used to modify memory within another process, such as WriteProcessMemory. Scan file objects reported during the PsSetCreateProcessNotifyRoutine, which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. Also consider comparing file objects loaded in memory to the corresponding file on disk. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S0242] SynAck: SynAck abuses NTFS transactions to launch and conceal malicious processes.","[S0534] Bazar: Bazar can inject into a target process using process doppelgänging.","[G0077] Leafminer: Leafminer has used Process Doppelgänging to evade security software while deploying tools on compromised systems."],"tactics":"TA0005 - Defense Evasion"}