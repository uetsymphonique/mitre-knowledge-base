{"technique_id":"T1546.007","technique_name":"Event Triggered Execution: Netsh Helper DLL","description":"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh. Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.","detection":"It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the HKLM\\SOFTWARE\\Microsoft\\Netsh registry key for any new or suspicious entries that do not correlate with known system files or benign software.","procedures":["[S0108] netsh: netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.008","technique_name":"Event Triggered Execution: Accessibility Features","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. Two common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP). The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. Other accessibility features exist that may also be leveraged in a similar fashion: * On-Screen Keyboard: C:\\Windows\\System32\\osk.exe * Magnifier: C:\\Windows\\System32\\Magnify.exe * Narrator: C:\\Windows\\System32\\Narrator.exe * Display Switcher: C:\\Windows\\System32\\DisplaySwitch.exe * App Switcher: C:\\Windows\\System32\\AtBroker.exe","detection":"Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options.","procedures":["[S0363] Empire: Empire can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.","[G0096] APT41: APT41 leveraged sticky keys to establish persistence.","[G0022] APT3: APT3 replaces the Sticky Keys binary C:\\Windows\\System32\\sethc.exe for persistence.","[G0009] Deep Panda: Deep Panda has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.","[G0001] Axiom: Axiom actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.","[G0117] Fox Kitten: Fox Kitten has used sticky keys to launch a command prompt.","[G0016] APT29: APT29 used sticky-keys to obtain unauthenticated, privileged console access."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.009","technique_name":"Event Triggered Execution: AppCert DLLs","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. Similar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.","detection":"Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.","procedures":["[S0196] PUNCHBUGGY: PUNCHBUGGY can establish using a AppCertDLLs Registry key."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.010","technique_name":"Event Triggered Execution: AppInit DLLs","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.","detection":"Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.","procedures":["[G0087] APT39: APT39 has used malware to set LoadAppInit_DLLs in the Registry key SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows in order to establish persistence.","[S0098] T9000: If a victim meets certain criteria, T9000 uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs – %APPDATA%\\Intel\\ResN32.dll and HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs – 0x1.","[S0107] Cherry Picker: Some variants of Cherry Picker use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows \"AppInit_DLLs\"=\"pserver32.dll\"","[S0458] Ramsay: Ramsay can insert itself into the address space of other applications using the AppInit DLL Registry key."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.011","technique_name":"Event Triggered Execution: Application Shimming","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in: * %WINDIR%\\AppPatch\\sysmain.sdb and * hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb Custom databases are stored in: * %WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom and * hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. Shims can also be abused to establish persistence by continuously being invoked by affected programs.","detection":"There are several public tools available that will detect shims that are currently available : * Shim-Process-Scanner - checks memory of every running process for any shim flags * Shim-Detector-Lite - detects installation of custom shim databases * Shim-Guard - monitors registry for any shim installations * ShimScanner - forensic tool to find active shims in memory * ShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot) Monitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.","procedures":["[S0517] Pillowmint: Pillowmint has used a malicious shim database to maintain persistence.","[S0461] SDBbot: SDBbot has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe.","[G0046] FIN7: FIN7 has used application shim databases for persistence.","[S0444] ShimRat: ShimRat has installed shim databases in the AppPatch folder."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.012","technique_name":"Event Triggered Execution: Image File Execution Options Injection","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., C:\\dbg\\ntsd.exe -g notepad.exe). IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where &lt;executable&gt; is the binary on which the debugger is attached. IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\. Similar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges. Similar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation. Malware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.","detection":"Monitor for abnormal usage of the GFlags tool as well as common processes spawned under abnormal parents and/or with creation flags indicative of debugging such as DEBUG_PROCESS and DEBUG_ONLY_THIS_PROCESS. Monitor Registry values associated with IFEOs, as well as silent process exit monitoring, for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.","procedures":["[S0559] SUNBURST: SUNBURST created an Image File Execution Options (IFEO) Debugger registry value for the process dllhost.exe to trigger the installation of Cobalt Strike.","[S0461] SDBbot: SDBbot has the ability to use image file execution options for persistence if it detects it is running with admin privileges on a Windows version newer than Windows 7.","[C0032] C0032: During the C0032 campaign, TEMP.Veles modified and added entries within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options to maintain persistence."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.013","technique_name":"Event Triggered Execution: PowerShell Profile","description":"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments. PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the -NoProfile flag is used when it is launched. An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.","detection":"Locations where profile.ps1 can be stored should be monitored for new profiles or modifications. Example profile locations (user defaults as well as program-specific) include: * $PsHome\\Profile.ps1 * $PsHome\\Microsoft.{HostProgram}_profile.ps1 * $Home\\\\\\[My ]Documents\\PowerShell\\Profile.ps1 * $Home\\\\\\[My ]Documents\\PowerShell\\Microsoft.{HostProgram}_profile.ps1 Monitor abnormal PowerShell commands, unusual loading of PowerShell drives or modules, and/or execution of unknown programs.","procedures":["[G0010] Turla: Turla has used PowerShell profiles to maintain persistence on an infected machine."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.014","technique_name":"Event Triggered Execution: Emond","description":"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the Launch Daemon configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist. Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.","detection":"Monitor emond rules creation by checking for files created or modified in /etc/emond.d/rules/ and /private/var/db/emondClients.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.015","technique_name":"Event Triggered Execution: Component Object Model Hijacking","description":"Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system. References to various COM objects are stored in the Registry. Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.","detection":"There are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations (ex: Reg) replacing known binary paths with unknown paths or otherwise malicious content. Even though some third-party applications define user COM objects, the presence of objects within HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\ may be anomalous and should be investigated since user objects will be loaded prior to machine objects in HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID\\. Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated. Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed.","procedures":["[S0045] ADVSTORESHELL: Some variants of ADVSTORESHELL achieve persistence by registering the payload as a Shell Icon Overlay handler COM object.","[S0356] KONNI: KONNI has modified ComSysApp service to load the malicious DLL payload.","[G0007] APT28: APT28 has used COM hijacking for persistence by replacing the legitimate MMDeviceEnumerator object with a payload.","[S1050] PcShare: PcShare has created the `HKCU\\\\Software\\\\Classes\\\\CLSID\\\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\\\InprocServer32` Registry key for persistence.","[S0670] WarzoneRAT: WarzoneRAT can perform COM hijacking by setting the path to itself to the `HKCU\\Software\\Classes\\Folder\\shell\\open\\command` key with a `DelegateExecute` parameter.","[S0126] ComRAT: ComRAT samples have been seen which hijack COM objects for persistence by replacing the path to shell32.dll in registry location HKCU\\Software\\Classes\\CLSID\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\InprocServer32.","[S1064] SVCReady: SVCReady has created the `HKEY_CURRENT_USER\\Software\\Classes\\CLSID\\{E6D34FFC-AD32-4d6a-934C-D387FA873A19}` Registry key for persistence.","[S0256] Mosquito: Mosquito uses COM hijacking as a method of persistence.","[S0679] Ferocious: Ferocious can use COM hijacking to establish persistence.","[S0127] BBSRAT: BBSRAT has been seen persisting via COM hijacking through replacement of the COM object for MruPidlList {42aedc87-2188-41fd-b9a3-0c966feabec1} or Microsoft WBEM New Event Subsystem {F3130CDB-AA52-4C3A-AB32-85FFC23AF9C1} depending on the system's CPU architecture.","[S0692] SILENTTRINITY: SILENTTRINITY can add a CLSID key for payload execution through `Registry.CurrentUser.CreateSubKey(\"Software\\\\Classes\\\\CLSID\\\\{\" + clsid + \"}\\\\InProcServer32\")`.","[S0044] JHUHUGIT: JHUHUGIT has used COM hijacking to establish persistence by hijacking a class named MMDeviceEnumerator and also by registering the payload as a Shell Icon Overlay handler COM object ({3543619C-D563-43f7-95EA-4DA7E1CC396A})."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.016","technique_name":"Event Triggered Execution: Installer Packages","description":"Adversaries may establish persistence and elevate privileges by using an installer to trigger the execution of malicious content. Installer packages are OS specific and contain the resources an operating system needs to install applications on a system. Installer packages can include scripts that run prior to installation as well as after installation is complete. Installer scripts may inherit elevated permissions when executed. Developers often use these scripts to prepare the environment for installation, check requirements, download dependencies, and remove files after installation. Using legitimate applications, adversaries have distributed applications with modified installer scripts to execute malicious content. When a user installs the application, they may be required to grant administrative permissions to allow the installation. At the end of the installation process of the legitimate application, content such as macOS `postinstall` scripts can be executed with the inherited elevated permissions. Adversaries can use these scripts to execute a malicious executable or install other malicious components (such as a Launch Daemon) with the elevated permissions. Depending on the distribution, Linux versions of package installer scripts are sometimes called maintainer scripts or post installation scripts. These scripts can include `preinst`, `postinst`, `prerm`, `postrm` scripts and run as root when executed. For Windows, the Microsoft Installer services uses `.msi` files to manage the installing, updating, and uninstalling of applications. These installation routines may also include instructions to perform additional actions that may be abused by adversaries.","detection":null,"procedures":["[S0584] AppleJeus: During AppleJeus's installation process, it uses `postinstall` scripts to extract a hidden plist from the application's `/Resources` folder and execute the `plist` file as a Launch Daemon with elevated permissions."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1546.017","technique_name":"Event Triggered Execution: Udev Rules","description":"Adversaries may maintain persistence through executing malicious content triggered using udev rules. Udev is the Linux kernel device manager that dynamically manages device nodes, handles access to pseudo-device files in the `/dev` directory, and responds to hardware events, such as when external devices like hard drives or keyboards are plugged in or removed. Udev uses rule files with `match keys` to specify the conditions a hardware event must meet and `action keys` to define the actions that should follow. Root permissions are required to create, modify, or delete rule files located in `/etc/udev/rules.d/`, `/run/udev/rules.d/`, `/usr/lib/udev/rules.d/`, `/usr/local/lib/udev/rules.d/`, and `/lib/udev/rules.d/`. Rule priority is determined by both directory and by the digit prefix in the rule filename. Adversaries may abuse the udev subsystem by adding or modifying rules in udev rule files to execute malicious content. For example, an adversary may configure a rule to execute their binary each time the pseudo-device file, such as `/dev/random`, is accessed by an application. Although udev is limited to running short tasks and is restricted by systemd-udevd's sandbox (blocking network and filesystem access), attackers may use scripting commands under the action key `RUN+=` to detach and run the malicious content’s process in the background to bypass these controls.","detection":"Monitor file creation and modification of Udev rule files in `/etc/udev/rules.d/`, `/lib/udev/rules.d/`, and /usr/lib/udev/rules.d/, specifically the `RUN` action key commands.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.001","technique_name":"Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder","description":"Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. These programs will be executed under the context of the user and will have the account's associated permissions level. The following run keys are created by default on Windows systems: * HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run * HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce * HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run * HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce Run keys may exist under multiple hives. The HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\" Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup. The startup folder path for all users is C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp. The following Registry keys can be used to set startup folder items for persistence: * HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders * HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders * HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders * HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders The following Registry keys can control automatic startup of services during boot: * HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce * HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce * HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices * HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices Using policy settings to specify startup programs creates corresponding values in either of two Registry keys: * HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run * HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run Programs listed in the load value of the registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows run automatically for the currently logged-on user. By default, the multistring BootExecute value of the registry key HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager is set to autocheck autochk *. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot. Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.","detection":"Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data. Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[S0082] Emissary: Variants of Emissary have added Run Registry keys to establish persistence.","[S0124] Pisloader: Pisloader establishes persistence via a Registry Run key.","[S0396] EvilBunny: EvilBunny has created Registry keys for persistence in [HKLM|HKCU]\\…\\CurrentVersion\\Run.","[G0073] APT19: An APT19 HTTP malware variant establishes persistence by setting the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Windows Debug Tools-%LOCALAPPDATA%\\.","[G0067] APT37: APT37's has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\.","[G0087] APT39: APT39 has maintained persistence using the startup folder.","[S0198] NETWIRE: NETWIRE creates a Registry start-up entry to establish persistence.","[G1018] TA2541: TA2541 has placed VBS files in the Startup folder and used Registry run keys to establish persistence for malicious payloads.","[S0386] Ursnif: Ursnif has used Registry Run keys to establish automatic execution at system startup.","[S0093] Backdoor.Oldrea: Backdoor.Oldrea adds Registry Run keys to achieve persistence.","[S0028] SHIPSHAPE: SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.","[G0048] RTM: RTM has used Registry run keys to establish persistence for the RTM Trojan and other tools, such as a modified version of TeamViewer remote desktop software.","[G0059] Magic Hound: Magic Hound malware has used Registry Run keys to establish persistence.","[S1044] FunnyDream: FunnyDream can use a Registry Run Key and the Startup folder to establish persistence.","[S0331] Agent Tesla: Agent Tesla can add itself to the Registry as a startup program to establish persistence.","[S1029] AuTo Stealer: AuTo Stealer can place malicious executables in a victim's AutoRun registry key or StartUp directory, depending on the AV product installed, to maintain persistence.","[G1046] Storm-1811: Storm-1811 has created Windows Registry Run keys that execute various batch scripts to establish persistence on victim devices.","[S0090] Rover: Rover persists by creating a Registry entry in HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\.","[S0182] FinFisher: FinFisher establishes persistence by creating the Registry key HKCU\\Software\\Microsoft\\Windows\\Run.","[S0670] WarzoneRAT: WarzoneRAT can add itself to the `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` and `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UIF2IS20VK` Registry keys.","[S0449] Maze: Maze has created a file named \"startup_vrun.bat\" in the Startup folder of a virtual machine to establish persistence.","[S0355] Final1stspy: Final1stspy creates a Registry Run key to establish persistence.","[S0337] BadPatch: BadPatch establishes a foothold by adding a link to the malware executable in the startup folder.","[G0100] Inception: Inception has maintained persistence by modifying Registry run key value HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\.","[S1199] LockBit 2.0: LockBit 2.0 can use a Registry Run key to establish persistence at startup.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group placed LNK files into the victims' startup folder for persistence.","[G0007] APT28: APT28 has deployed malware that has copied itself to the startup directory for persistence.","[G0139] TeamTNT: TeamTNT has added batch scripts to the startup folder.","[S0332] Remcos: Remcos can add itself to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.","[S0265] Kazuar: Kazuar adds a sub-key under several Registry run keys.","[S0568] EVILNUM: EVILNUM can achieve persistence through the Registry Run key.","[S0389] JCry: JCry has created payloads in the Startup directory to maintain persistence.","[S0338] Cobian RAT: Cobian RAT creates an autostart Registry key to ensure persistence.","[S0012] PoisonIvy: PoisonIvy creates run key Registry entries pointing to a malicious executable dropped to disk.","[S0484] Carberp: Carberp has maintained persistence by placing itself inside the current user's startup folder.","[S0532] Lucifer: Lucifer can persist by setting Registry key values HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\QQMusic.","[S0632] GrimAgent: GrimAgent can set persistence with a Registry run key.","[S0070] HTTPBrowser: HTTPBrowser has established persistence by setting the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key value for wdm to the path of the executable. It has also used the Registry entry HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run vpdn “%ALLUSERPROFILE%\\%APPDATA%\\vpdn\\VPDN_LU.exe” to establish persistence.","[S0665] ThreatNeedle: ThreatNeedle can be loaded into the Startup folder (`%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\OneDrives.lnk`) as a Shortcut file for persistence.","[S1212] RansomHub: RansomHub has created an autorun Registry key through the `-safeboot-instance -pass` command line argument.","[S0045] ADVSTORESHELL: ADVSTORESHELL achieves persistence by adding itself to the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.","[G0065] Leviathan: Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.","[S0170] Helminth: Helminth establishes persistence by creating a shortcut in the Start Menu folder.","[G0019] Naikon: Naikon has modified a victim's Windows Run registry to establish persistence.","[S1066] DarkTortilla: DarkTortilla has established persistence via the `Software\\Microsoft\\Windows NT\\CurrentVersion\\Run` registry key and by creating a .lnk shortcut file in the Windows startup folder.","[S0650] QakBot: QakBot can maintain persistence by creating an auto-run Registry key.","[G0091] Silence: Silence has used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, and the Startup folder to establish persistence.","[S0666] Gelsemium: Gelsemium can set persistence with a Registry run key.","[S1130] Raspberry Robin: Raspberry Robin will use a Registry key to achieve persistence through reboot, setting a RunOnce key such as: HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce {random value name} = “rundll32 shell32 ShellExec_RunDLLA REGSVR /u /s “{dropped copy path and file name}”” .","[S0144] ChChes: ChChes establishes persistence by adding a Registry Run key.","[S0168] Gazer: Gazer can establish persistence by creating a .lnk file in the Start menu.","[G0078] Gorgon Group: Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.","[S0115] Crimson: Crimson can add Registry run keys for persistence.","[S0367] Emotet: Emotet has been observed adding the downloaded payload to the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to maintain persistence.","[S0046] CozyCar: One persistence mechanism used by CozyCar is to set itself to be executed at system startup by adding a Registry value under one of the following Registry keys: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run","[S0341] Xbash: Xbash can create a Startup item for persistence if it determines it is on a Windows system.","[S0260] InvisiMole: InvisiMole can place a lnk file in the Startup Folder to achieve persistence.","[G0016] APT29: APT29 added Registry Run keys to establish persistence.","[S0546] SharpStage: SharpStage has the ability to create persistence for the malware using the Registry autorun key and startup folder.","[S0660] Clambling: Clambling can establish persistence by adding a Registry run key.","[S0148] RTM: RTM tries to add a Registry Run key under the name \"Windows Update\" to establish persistence.","[S0074] Sakula: Most Sakula samples maintain persistence by setting the Registry Run key SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ in the HKLM or HKCU hive, with the Registry value and file name varying by sample.","[G0128] ZIRCONIUM: ZIRCONIUM has created a Registry Run key named Dropbox Update Setup to establish persistence for a malicious Python binary.","[S0172] Reaver: Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.","[S0262] QuasarRAT: If the QuasarRAT client process does not have administrator privileges it will add a registry key to `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` for persistence.","[S0036] FLASHFLOOD: FLASHFLOOD achieves persistence by making an entry in the Registry's Run key.","[S0397] LoJax: LoJax has modified the Registry key ‘HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute’ from ‘autocheck autochk *’ to ‘autocheck autoche *’ in order to execute its payload during Windows startup.","[G0040] Patchwork: Patchwork has added the path of its second-stage malware to the startup folder to achieve persistence. One of its file stealers has also persisted by adding a Registry Run key.","[S1138] Gootloader: Gootloader can create an autorun entry for a PowerShell script to run at reboot.","[S1037] STARWHALE: STARWHALE can establish persistence by installing itself in the startup folder, whereas the GO variant has created a `HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookM` registry key.","[S0381] FlawedAmmyy: FlawedAmmyy has established persistence via the `HKCU\\SOFTWARE\\microsoft\\windows\\currentversion\\run` registry key.","[S0147] Pteranodon: Pteranodon copies itself to the Startup folder to establish persistence.","[S0652] MarkiRAT: MarkiRAT can drop its payload into the Startup directory to ensure it automatically runs when the compromised system is started.","[S0167] Matryoshka: Matryoshka can establish persistence by adding Registry Run keys.","[S1111] DarkGate: DarkGate installation includes AutoIt script execution creating a shortcut to itself as an LNK object, such as bill.lnk, in the victim startup folder. DarkGate installation finishes with the creation of a registry Run key.","[S0356] KONNI: A version of KONNI has dropped a Windows shortcut into the Startup folder to establish persistence.","[S0207] Vasport: Vasport copies itself to disk and creates an associated run key Registry entry to establish.","[S0644] ObliqueRAT: ObliqueRAT can gain persistence by a creating a shortcut in the infected user's Startup directory.","[S0015] Ixeshe: Ixeshe can achieve persistence by adding itself to the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.","[S0127] BBSRAT: BBSRAT has been loaded through DLL side-loading of a legitimate Citrix executable that is set to persist through the Registry Run key location HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ssonsvr.exe.","[G0037] FIN6: FIN6 has used Registry Run keys to establish persistence for its downloader tools known as HARDTACK and SHIPBREAD.","[S0455] Metamorfo: Metamorfo has configured persistence to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run, Spotify =% APPDATA%\\Spotify\\Spotify.exe and used .LNK files in the startup folder to achieve persistence.","[S1053] AvosLocker: AvosLocker has been executed via the `RunOnce` Registry key to run itself on safe mode.","[S1086] Snip3: Snip3 can create a VBS file in startup to persist after system restarts.","[S0087] Hi-Zor: Hi-Zor creates a Registry Run key to establish persistence.","[G0010] Turla: A Turla Javascript backdoor added a local_update_check value under the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence. Additionally, a Turla custom executable containing Metasploit shellcode is saved to the Startup folder to gain persistence.","[S0226] Smoke Loader: Smoke Loader adds a Registry Run key for persistence and adds a script in the Startup folder to deploy the payload.","[S0471] build_downer: build_downer has the ability to add itself to the Registry Run key for persistence.","[S0433] Rifdoor: Rifdoor has created a new registry entry at HKEY_CURRENT_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Graphics with a value of C:\\ProgramData\\Initech\\Initech.exe /run.","[S0630] Nebulae: Nebulae can achieve persistence through a Registry Run key.","[S0353] NOKKI: NOKKI has established persistence by writing the payload to the Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.","[S0531] Grandoreiro: Grandoreiro can use run keys and create link files in the startup folder for persistence.","[G0024] Putter Panda: A dropper used by Putter Panda installs itself into the ASEP Registry key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run with a value named McUpdate.","[S0196] PUNCHBUGGY: PUNCHBUGGY has been observed using a Registry Run key.","[G0069] MuddyWater: MuddyWater has added Registry Run key KCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\SystemTextEncoding to establish persistence.","[S0178] Truvasys: Truvasys adds a Registry Run key to establish persistence.","[S0499] Hancitor: Hancitor has added Registry Run keys to establish persistence.","[S0094] Trojan.Karagany: Trojan.Karagany can create a link to itself in the Startup folder to automatically start itself upon system restart.","[S0080] Mivast: Mivast creates the following Registry entry: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\Micromedia.","[S0136] USBStealer: USBStealer registers itself under a Registry Run key with the name \"USB Disk Security.\"","[S0141] Winnti for Windows: Winnti for Windows can add a service named wind0ws to the Registry to achieve persistence after reboot.","[S0044] JHUHUGIT: JHUHUGIT has used a Registry Run key to establish persistence by executing JavaScript code within the rundll32.exe process.","[S0553] MoleNet: MoleNet can achieve persitence on the infected machine by setting the Registry run key.","[G0121] Sidewinder: Sidewinder has added paths to executables in the Registry to establish persistence.","[S0570] BitPaymer: BitPaymer has set the run key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.","[S0512] FatDuke: FatDuke has used HKLM\\SOFTWARE\\Microsoft\\CurrentVersion\\Run to establish persistence.","[S0513] LiteDuke: LiteDuke can create persistence by adding a shortcut in the CurrentVersion\\Run Registry key.","[S0034] NETEAGLE: The \"SCOUT\" variant of NETEAGLE achieves persistence by adding itself to the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.","[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda used Run registry keys with names such as `OneNote Update` to execute legitimate executables that would load through search-order hijacking malicious DLLS to ensure persistence during RedDelta Modified PlugX Infection Chain Operations.","[S0382] ServHelper: ServHelper may attempt to establish persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ run key.","[S0444] ShimRat: ShimRat has installed a registry based start-up key HKCU\\Software\\microsoft\\windows\\CurrentVersion\\Run to maintain persistence should other methods fail.","[G0027] Threat Group-3390: Threat Group-3390's malware can add a Registry key to `Software\\Microsoft\\Windows\\CurrentVersion\\Run` for persistence.","[S0375] Remexi: Remexi utilizes Run Registry keys in the HKLM hive as a persistence mechanism.","[S0035] SPACESHIP: SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.","[G0081] Tropic Trooper: Tropic Trooper has created shortcuts in the Startup folder to establish persistence.","[G0032] Lazarus Group: Lazarus Group has maintained persistence by loading malicious code into a startup folder or by adding a Registry Run key.","[G0096] APT41: APT41 created and modified startup files for persistence. APT41 added a registry key in HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Svchost to establish persistence for Cobalt Strike.","[G0112] Windshift: Windshift has created LNK files in the Startup folder to establish persistence.","[S1122] Mispadu: Mispadu creates a link in the startup folder for persistence. Mispadu adds persistence via the registry key `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`.","[S0363] Empire: Empire can modify the registry run keys HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run and HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.","[S1041] Chinoxy: Chinoxy has established persistence via the `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` registry key and by loading a dropper to `(%COMMON_ STARTUP%\\\\eoffice.exe)`.","[S1035] Small Sieve: Small Sieve has the ability to add itself to `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\OutlookMicrosift` for persistence.","[S0649] SMOKEDHAM: SMOKEDHAM has used reg.exe to create a Registry Run key.","[S0461] SDBbot: SDBbot has the ability to add a value to the Registry Run key to establish persistence if it detects it is running with regular user privilege.","[G0046] FIN7: FIN7 malware has created Registry Run and RunOnce keys to establish persistence, and has also added items to the Startup folder.","[G0070] Dark Caracal: Dark Caracal's version of Bandook adds a registry key to HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run for persistence.","[S0249] Gold Dragon: Gold Dragon establishes persistence in the Startup folder.","[S0131] TINYTYPHON: TINYTYPHON installs itself under Registry Run key to establish persistence.","[G0051] FIN10: FIN10 has established persistence by using the Registry option in PowerShell Empire to add a Run key.","[S0456] Aria-body: Aria-body has established persistence via the Startup folder or Run Registry key.","[G0056] PROMETHIUM: PROMETHIUM has used Registry run keys to establish persistence.","[S0441] PowerShower: PowerShower sets up persistence with a Registry run key.","[S0647] Turian: Turian can establish persistence by adding Registry Run keys.","[S0204] Briba: Briba creates run key Registry entries pointing to malicious DLLs dropped to disk.","[S0194] PowerSploit: PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run Registry key.","[S0268] Bisonal: Bisonal has added itself to the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\CurrentVersion\\Run\\ for persistence.","[S0253] RunningRAT: RunningRAT adds itself to the Registry key Software\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence upon reboot.","[S0586] TAINTEDSCRIBE: TAINTEDSCRIBE can copy itself into the current user’s Startup folder as “Narrator.exe” for persistence.","[S0409] Machete: Machete used the startup folder for persistence.","[S0235] CrossRAT: CrossRAT uses run keys for persistence on Windows.","[S0031] BACKSPACE: BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.","[S1213] Lumma Stealer: Lumma Stealer has created registry keys to maintain persistence using `HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run`.","[S0186] DownPaper: DownPaper uses PowerShell to add a Registry Run key in order to establish persistence.","[S0088] Kasidet: Kasidet creates a Registry Run key to establish persistence.","[S0696] Flagpro: Flagpro has dropped an executable file to the startup directory.","[S0340] Octopus: Octopus achieved persistence by placing a malicious executable in the startup directory and has added the HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key to the Registry.","[S0385] njRAT: njRAT has added persistence via the Registry key HKCU\\Software\\Microsoft\\CurrentVersion\\Run\\ and dropped a shortcut in %STARTUP%.","[G1014] LuminousMoth: LuminousMoth has used malicious DLLs that setup persistence in the Registry Key `HKCU\\Software\\Microsoft\\Windows\\Current Version\\Run`.","[S1021] DnsSystem: DnsSystem can write itself to the Startup folder to gain persistence.","[S0251] Zebrocy: Zebrocy creates an entry in a Registry Run key for the malware to execute on startup.","[S0058] SslMM: To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an “Office Start,” “Yahoo Talk,” “MSN Gaming Z0ne,” or “MSN Talk” shortcut.","[S0128] BADNEWS: BADNEWS installs a registry Run key to establish persistence.","[S0608] Conficker: Conficker adds Registry Run keys to establish persistence.","[S1074] ANDROMEDA: ANDROMEDA can establish persistence by dropping a sample of itself to `C:\\ProgramData\\Local Settings\\Temp\\mskmde.com` and adding a Registry run key to execute every time a user logs on.","[S0582] LookBack: LookBack sets up a Registry Run key to establish a persistence mechanism.","[S0458] Ramsay: Ramsay has created Registry Run keys to establish persistence.","[S1150] ROADSWEEP: ROADSWEEP has been placed in the start up folder to trigger execution upon user login.","[S0250] Koadic: Koadic has added persistence to the `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` Registry key.","[G1016] FIN13: FIN13 has used Windows Registry run keys such as, `HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\hosts` to maintain persistence.","[S0062] DustySky: DustySky achieves persistence by creating a Registry entry in HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run.","[S0030] Carbanak: Carbanak stores a configuration files in the startup directory to automatically execute commands in order to persist across reboots.","[G1036] Moonstone Sleet: Moonstone Sleet used registry run keys for process execution during initial victim infection.","[S0442] VBShower: VBShower used HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\\\[a-f0-9A-F]{8} to maintain persistence.","[G0106] Rocke: Rocke's miner has created UPX-packed files in the Windows Start Menu Folder.","[S0013] PlugX: PlugX adds Run key entries in the Registry to establish persistence.","[S0631] Chaes: Chaes has added persistence via the Registry key software\\microsoft\\windows\\currentversion\\run\\microsoft windows html help.","[S1018] Saint Bot: Saint Bot has established persistence by being copied to the Startup directory or through the `\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` registry key.","[G0021] Molerats: Molerats saved malicious files within the AppData and Startup folders to maintain persistence.","[S0662] RCSession: RCSession has the ability to modify a Registry Run key to establish persistence.","[S0032] gh0st RAT: gh0st RAT has added a Registry Run key to establish persistence.","[S0414] BabyShark: BabyShark has added a Registry key to ensure all future macros are enabled for Microsoft Word and Excel as well as for additional persistence.","[S0004] TinyZBot: TinyZBot can create a shortcut in the Windows startup folder for persistence.","[S0334] DarkComet: DarkComet adds several Registry entries to enable automatic execution at every system startup.","[S0145] POWERSOURCE: POWERSOURCE achieves persistence by setting a Registry Run key, with the path depending on whether the victim account has user or administrator access.","[S1182] MagicRAT: MagicRAT can persist using malicious LNK objects in the victim machine Startup folder.","[S0345] Seasalt: Seasalt creates a Registry entry to ensure infection after reboot under HKLM\\Software\\Microsoft\\Windows\\currentVersion\\Run.","[S1027] Heyoka Backdoor: Heyoka Backdoor can establish persistence with the auto start function including using the value `EverNoteTrayUService`.","[S0247] NavRAT: NavRAT creates a Registry key to ensure a file gets executed upon reboot in order to establish persistence.","[C0013] Operation Sharpshooter: During Operation Sharpshooter, a first-stage downloader installed Rising Sun to `%Startup%\\mssync.exe` on a compromised host.","[S0254] PLAINTEE: PLAINTEE gains persistence by adding the Registry key HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce.","[S0259] InnaputRAT: Some InnaputRAT variants establish persistence by modifying the Registry key HKU\\\\Software\\Microsoft\\Windows\\CurrentVersion\\Run:%appdata%\\NeutralApp\\NeutralApp.exe.","[S0053] SeaDuke: SeaDuke is capable of persisting via the Registry Run key or a .lnk file stored in the Startup directory.","[G0080] Cobalt Group: Cobalt Group has used Registry Run keys for persistence. The group has also set a Startup path to launch the PowerShell shell command and download Cobalt Strike.","[S0417] GRIFFON: GRIFFON has used a persistence module that stores the implant inside the Registry, which executes at logon.","[G0129] Mustang Panda: Mustang Panda has created the registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run\\AdobelmdyU to maintain persistence.","[G0126] Higaisa: Higaisa added a spoofed binary to the start-up folder for persistence.","[S0018] Sykipot: Sykipot has been known to establish persistence by adding programs to the Run Registry key.","[G0094] Kimsuky: Kimsuky has placed scripts in the startup folder for persistence and modified the `HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce` Registry key.","[S0113] Prikormka: Prikormka adds itself to a Registry Run key with the name guidVGA or guidVSA.","[G0035] Dragonfly: Dragonfly has added the registry value ntdll to the Registry Run key to establish persistence.","[S0159] SNUGRIDE: SNUGRIDE establishes persistence through a Registry Run key.","[S0663] SysUpdate: SysUpdate can use a Registry Run key to establish persistence.","[S0439] Okrum: Okrum establishes persistence by creating a .lnk shortcut to itself in the Startup folder.","[S0483] IcedID: IcedID has established persistence by creating a Registry run key.","[G0140] LazyScripter: LazyScripter has achieved persistence via writing a PowerShell script to the autorun registry key.","[S0228] NanHaiShu: NanHaiShu modifies the %regrun% Registry to point itself to an autostart mechanism.","[S0635] BoomBox: BoomBox can establish persistence by writing the Registry value MicroNativeCacheSvc to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.","[G0022] APT3: APT3 places scripts in the startup folder for persistence.","[S0152] EvilGrab: EvilGrab adds a Registry Run key for ctfmon.exe to establish persistence.","[S0089] BlackEnergy: The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.","[S1025] Amadey: Amadey has changed the Startup folder to the one containing its executable by overwriting the registry keys.","[S0640] Avaddon: Avaddon uses registry run keys for persistence.","[G0012] Darkhotel: Darkhotel has been known to establish persistence by adding programs to the Run Registry key.","[S0561] GuLoader: GuLoader can establish persistence via the Registry under HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce.","[S0085] S-Type: S-Type may create a .lnk file to itself that is saved in the Start menu folder. It may also create the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ IMJPMIJ8.1{3 characters of Unique Identifier}.","[G0064] APT33: APT33 has deployed a tool known as DarkComet to the Startup folder of a victim, and used Registry run keys to gain persistence.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used a batch script that adds a Registry Run key to establish malware persistence.","[S0192] Pupy: Pupy adds itself to the startup folder or adds itself to the Registry key SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run for persistence.","[S0244] Comnie: Comnie achieves persistence by adding a shortcut of itself to the startup path in the Registry.","[S0491] StrongPity: StrongPity can use the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run Registry key for persistence.","[G1043] BlackByte: BlackByte has used Registry Run keys for persistence.","[S1160] Latrodectus: Latrodectus can set an AutoRun key to establish persistence.","[G1039] RedCurl: RedCurl has established persistence by creating entries in `HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run`.","[S0330] Zeus Panda: Zeus Panda adds persistence by creating Registry Run keys.","[G0004] Ke3chang: Several Ke3chang backdoors achieved persistence by adding a Run key.","[S0137] CORESHELL: CORESHELL has established persistence by creating autostart extensibility point (ASEP) Registry entries in the Run key and other Registry keys, as well as by creating shortcuts in the Internet Explorer Quick Start folder.","[S0336] NanoCore: NanoCore creates a RunOnce key in the Registry to execute its VBS scripts each time the user logs on to the machine.","[S0692] SILENTTRINITY: SILENTTRINITY can establish a LNK file in the startup folder for persistence.","[G0142] Confucius: Confucius has dropped malicious files into the startup folder `%AppData%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup` on a compromised host in order to maintain persistence.","[S0348] Cardinal RAT: Cardinal RAT establishes Persistence by setting the HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Load Registry key to point to its executable.","[S1145] Pikabot: Pikabot maintains persistence following system checks through the Run key in the registry.","[S1207] XLoader: XLoader establishes persistence by copying its executable in a subdirectory of `%APPDATA%` or `%PROGRAMFILES%`, and then modifies Windows Registry Run keys or policies keys to execute the executable on system start.","[S0446] Ryuk: Ryuk has used the Windows command line to create a Registry entry under HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run to establish persistence.","[S0622] AppleSeed: AppleSeed has the ability to create the Registry key name EstsoftAutoUpdate at HKCU\\Software\\Microsoft/Windows\\CurrentVersion\\RunOnce to establish persistence.","[S0371] POWERTON: POWERTON can install a Registry Run key for persistence.","[G0026] APT18: APT18 establishes persistence via the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run key.","[S0256] Mosquito: Mosquito establishes persistence under the Registry key HKCU\\Software\\Run auto_update.","[S0373] Astaroth: Astaroth creates a startup item for persistence.","[S0428] PoetRAT: PoetRAT has added a registry key in the hive for persistence.","[S0266] TrickBot: TrickBot establishes persistence in the Startup folder.","[S0267] FELIXROOT: FELIXROOT adds a shortcut file to the startup folder for persistence.","[S0153] RedLeaves: RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence. If this fails, it attempts to add Registry Run keys.","[S0139] PowerDuke: PowerDuke achieves persistence by using various Registry Run keys.","[S0669] KOCTOPUS: KOCTOPUS can set the AutoRun Registry key with a PowerShell command.","[G0047] Gamaredon Group: Gamaredon Group tools have registered Run keys in the registry to give malicious VBS files persistence.","[S0199] TURNEDUP: TURNEDUP is capable of writing to a Registry Run key to establish.","[S0534] Bazar: Bazar can create or add files to Registry Run Keys to establish persistence.","[S1026] Mongall: Mongall can establish persistence with the auto start function including using the value `EverNoteTrayUService`.","[G0102] Wizard Spider: Wizard Spider has established persistence via the Registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run and a shortcut within the startup folder.","[G0050] APT32: APT32 established persistence using Registry Run keys, both to execute PowerShell and VBS scripts as well as to execute their backdoor directly.","[S0500] MCMD: MCMD can use Registry Run Keys for persistence.","[S0081] Elise: If establishing persistence by installation as a new service fails, one variant of Elise establishes persistence for the created .exe file by setting the following Registry key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\svchost : %APPDATA%\\Microsoft\\Network\\svchost.exe. Other variants have set the following Registry keys for persistence: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\imejp : [self] and HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\IAStorD.","[S0011] Taidoor: Taidoor has modified the HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run key for persistence.","[S0270] RogueRobin: RogueRobin created a shortcut in the Windows startup folder to launch a PowerShell script each time the user logs in to establish persistence."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.002","technique_name":"Boot or Logon Autostart Execution: Authentication Package","description":"Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of \"Authentication Packages\"=&lt;target binary&gt;. The binary will then be executed by the system when the authentication packages are loaded.","detection":"Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8.","procedures":["[S0143] Flame: Flame can use Windows Authentication Packages for persistence."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.003","technique_name":"Boot or Logon Autostart Execution: Time Providers","description":"Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`. The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. Adversaries may abuse this architecture to establish persistence, specifically by creating a new arbitrarily named subkey pointing to a malicious DLL in the `DllName` value. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account.","detection":"Baseline values and monitor/analyze activity related to modifying W32Time information in the Registry, including application programming interface (API) calls such as RegCreateKeyEx and RegSetValueEx as well as execution of the W32tm.exe utility. There is no restriction on the number of custom time providers registrations, though each may require a DLL payload written to disk. The Sysinternals Autoruns tool may also be used to analyze auto-starting locations, including DLLs listed as time providers.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.004","technique_name":"Boot or Logon Autostart Execution: Winlogon Helper DLL","description":"Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in HKLM\\Software[\\\\Wow6432Node\\\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ and HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\ are used to manage additional helper programs and functionalities that support Winlogon. Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: * Winlogon\\Notify - points to notification package DLLs that handle Winlogon events * Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on * Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.","detection":"Monitor for changes to Registry entries associated with Winlogon that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values. New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[S0168] Gazer: Gazer can establish persistence by setting the value “Shell” with “explorer.exe, %malware_pathfile%” under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.","[S1066] DarkTortilla: DarkTortilla has established persistence via the `Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` registry key.","[S0200] Dipsind: A Dipsind variant registers as a Winlogon Event Notify DLL to establish persistence.","[G0102] Wizard Spider: Wizard Spider has established persistence using Userinit by adding the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.","[S0534] Bazar: Bazar can use Winlogon Helper DLL to establish persistence.","[S0375] Remexi: Remexi achieves persistence using Userinit by adding the Registry key HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit.","[S0379] Revenge RAT: Revenge RAT creates a Registry key at HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell to survive a system reboot.","[G0081] Tropic Trooper: Tropic Trooper has created the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell and sets the value to establish persistence.","[S1202] LockBit 3.0: LockBit 3.0 can enable automatic logon through the `SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon` Registry key.","[G0010] Turla: Turla established persistence by adding a Shell value under the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon.","[S0387] KeyBoy: KeyBoy issues the command reg add “HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon” to achieve persistence.","[S0351] Cannon: Cannon adds the Registry key HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon to establish persistence."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.005","technique_name":"Boot or Logon Autostart Execution: Security Support Provider","description":"Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages and HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.","detection":"Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8.","procedures":["[S0002] Mimikatz: The Mimikatz credential dumper contains an implementation of an SSP.","[S0363] Empire: Empire can enumerate Security Support Providers (SSPs) as well as utilize PowerSploit's Install-SSP and Invoke-Mimikatz to install malicious SSPs and log authentication events.","[S0194] PowerSploit: PowerSploit's Install-SSP Persistence module can be used to establish by installing a SSP DLL."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.006","technique_name":"Boot or Logon Autostart Execution: Kernel Modules and Extensions","description":"Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. When used maliciously, LKMs can be a type of kernel-mode Rootkit that run with the highest operating system privilege (Ring 0). Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors, and enabling root access to non-privileged users. Kernel extensions, also called kext, are used in macOS to load functionality onto a system similar to LKMs for Linux. Since the kernel is responsible for enforcing security and the kernel extensions run as apart of the kernel, kexts are not governed by macOS security policies. Kexts are loaded and unloaded through kextload and kextunload commands. Kexts need to be signed with a developer ID that is granted privileges by Apple allowing it to sign Kernel extensions. Developers without these privileges may still sign kexts but they will not load unless SIP is disabled. If SIP is enabled, the kext signature is verified before being added to the AuxKC. Since macOS Catalina 10.15, kernel extensions have been deprecated in favor of System Extensions. However, kexts are still allowed as \"Legacy System Extensions\" since there is no System Extension for Kernel Programming Interfaces. Adversaries can use LKMs and kexts to conduct Persistence and/or Privilege Escalation on a system. Examples have been found in the wild, and there are some relevant open source projects as well.","detection":"Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: modprobe, insmod, lsmod, rmmod, or modinfo LKMs are typically loaded into /lib/modules and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel. Adversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled. Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system. Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: apt-get install linux-headers-$(uname -r) On RHEL and CentOS based systems this can be accomplished by running: yum install kernel-devel-$(uname -r) On macOS, monitor for execution of kextload commands and user installed kernel extensions performing abnormal and/or potentially malicious activity (such as creating network connections). Monitor for new rows added in the kext_policy table. KextPolicy stores a list of user approved (non Apple) kernel extensions and a partial history of loaded kernel modules in a SQLite database, /var/db/SystemPolicyConfiguration/KextPolicy.","procedures":["[S0502] Drovorub: Drovorub can use kernel modules to establish persistence.","[S0468] Skidmap: Skidmap has the ability to install several loadable kernel modules (LKMs) on infected machines.","[C0012] Operation CuckooBees: During Operation CuckooBees, attackers used a signed kernel rootkit to establish additional persistence."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.007","technique_name":"Boot or Logon Autostart Execution: Re-opened Applications","description":"Adversaries may modify plist files to automatically run an application when a user logs in. When a user logs out or restarts via the macOS Graphical User Interface (GUI), a prompt is provided to the user with a checkbox to \"Reopen windows when logging back in\". When selected, all applications currently open are added to a property list file named com.apple.loginwindow.[UUID].plist within the ~/Library/Preferences/ByHost directory. Applications listed in this file are automatically reopened upon the user’s next logon. Adversaries can establish Persistence by adding a malicious application path to the com.apple.loginwindow.[UUID].plist file to execute payloads when a user logs in.","detection":"Monitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.008","technique_name":"Boot or Logon Autostart Execution: LSASS Driver","description":"Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., Hijack Execution Flow), an adversary can use LSA operations to continuously execute malicious payloads.","detection":"With LSA Protection enabled, monitor the event logs (Events 3033 and 3063) for failed attempts to load LSA plug-ins and drivers. Also monitor DLL load operations in lsass.exe. Utilize the Sysinternals Autoruns/Autorunsc utility to examine loaded drivers associated with the LSA.","procedures":["[S0176] Wingbird: Wingbird drops a malicious file (sspisrv.dll) alongside a copy of lsass.exe, which is used to register a service that loads sspisrv.dll as a driver. The payload of the malicious driver (located in its entry-point function) is executed when loaded by lsass.exe before the spoofed service becomes unstable and crashes.","[S0208] Pasam: Pasam establishes by infecting the Security Accounts Manager (SAM) DLL to load a malicious DLL dropped to disk."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1547.009","technique_name":"Boot or Logon Autostart Execution: Shortcut Modification","description":"Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence. Although often used as payloads in an infection chain (e.g. Spearphishing Attachment), adversaries may also create a new shortcut as a means of indirection, while also abusing Masquerading to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program. Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. Browser Extensions) to persistently launch malware.","detection":"Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections. Monitor for LNK files created with a Zone Identifier value greater than 1, which may indicate that the LNK file originated from outside of the network.","procedures":["[S0270] RogueRobin: RogueRobin establishes persistence by creating a shortcut (.LNK file) in the Windows startup folder to run a script each time the user logs in.","[S0153] RedLeaves: RedLeaves attempts to add a shortcut file in the Startup folder to achieve persistence.","[S0439] Okrum: Okrum can establish persistence by creating a .lnk shortcut to itself in the Startup folder.","[S0172] Reaver: Reaver creates a shortcut file and saves it in a Startup folder to establish persistence.","[S0531] Grandoreiro: Grandoreiro can write or modify browser shortcuts to enable launching of malicious browser extensions.","[G0087] APT39: APT39 has modified LNK shortcuts.","[S0170] Helminth: Helminth establishes persistence by creating a shortcut.","[S0652] MarkiRAT: MarkiRAT can modify the shortcut that launches Telegram by replacing its path with the malicious payload to launch with the legitimate executable.","[S0339] Micropsia: Micropsia creates a shortcut to maintain persistence.","[G0065] Leviathan: Leviathan has used JavaScript to create a shortcut file in the Startup folder that points to its main backdoor.","[S0058] SslMM: To establish persistence, SslMM identifies the Start Menu Startup directory and drops a link to its own executable disguised as an “Office Start,” “Yahoo Talk,” “MSN Gaming Z0ne,” or “MSN Talk” shortcut.","[G0032] Lazarus Group: Lazarus Group malware has maintained persistence on a system by creating a LNK shortcut in the user’s Startup folder.","[S0244] Comnie: Comnie establishes persistence via a .lnk file in the victim’s startup path.","[S0168] Gazer: Gazer can establish persistence by creating a .lnk file in the Start menu or by modifying existing .lnk files to execute the malware through cmd.exe.","[S0089] BlackEnergy: The BlackEnergy 3 variant drops its main DLL component and then creates a .lnk shortcut to that file in the startup folder.","[S0035] SPACESHIP: SPACESHIP achieves persistence by creating a shortcut in the current user's Startup folder.","[S0004] TinyZBot: TinyZBot can create a shortcut in the Windows startup folder for persistence.","[S0373] Astaroth: Astaroth's initial payload is a malicious .LNK file.","[S0085] S-Type: S-Type may create the file %HOMEPATH%\\Start Menu\\Programs\\Startup\\Realtek {Unique Identifier}.lnk, which points to the malicious `msdtc.exe` file already created in the `%CommonFiles%` directory.","[S0028] SHIPSHAPE: SHIPSHAPE achieves persistence by creating a shortcut in the Startup folder.","[G0078] Gorgon Group: Gorgon Group malware can create a .lnk file and add a Registry Run key to establish persistence.","[S0031] BACKSPACE: BACKSPACE achieves persistence by creating a shortcut to itself in the CSIDL_STARTUP directory.","[S0053] SeaDuke: SeaDuke is capable of persisting via a .lnk file stored in the Startup directory.","[S0260] InvisiMole: InvisiMole can use a .lnk shortcut for the Control Panel to establish persistence.","[S0267] FELIXROOT: FELIXROOT creates a .LNK file for persistence.","[S0356] KONNI: A version of KONNI drops a Windows shortcut on the victim’s machine to establish persistence.","[S0534] Bazar: Bazar can establish persistence by writing shortcuts to the Windows Startup folder.","[S0363] Empire: Empire can persist by modifying a .LNK file to include a backdoor.","[S0265] Kazuar: Kazuar adds a .lnk file to the Windows startup folder."],"tactics":"TA0003 - Persistence"}