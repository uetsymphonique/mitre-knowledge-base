{"technique_id":"T1484.002","technique_name":"Domain or Tenant Policy Modification: Trust Modification","description":"Adversaries may add new domain trusts, modify the properties of existing domain trusts, or otherwise change the configuration of trust relationships between domains and tenants to evade defenses and/or elevate privileges.Trust details, such as whether or not user identities are federated, allow authentication and authorization properties to apply between domains or tenants for the purpose of accessing shared resources. These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains. Manipulating these trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, in Microsoft Active Directory (AD) environments, this may be used to forge SAML Tokens without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate. An adversary may also convert an AD domain to a federated domain using Active Directory Federation Services (AD FS), which may enable malicious trust modifications such as altering the claim issuance rules to log in any valid set of credentials as a specified user. An adversary may also add a new federated identity provider to an identity tenant such as Okta or AWS IAM Identity Center, which may enable the adversary to authenticate as any user of the tenant. This may enable the threat actor to gain broad access into a variety of cloud-based services that leverage the identity tenant. For example, in AWS environments, an adversary that creates a new identity provider for an AWS Organization will be able to federate into all of the AWS Organization member accounts without creating identities for each of the member accounts.","detection":"Monitor for modifications to domain trust settings, such as when a user or application modifies the federation settings on the domain or updates domain authentication from Managed to Federated via ActionTypes Set federation settings on domain and Set domain authentication. This may also include monitoring for Event ID 307 which can be correlated to relevant Event ID 510 with the same Instance ID for change details. Monitor for PowerShell commands such as: Update-MSOLFederatedDomain –DomainName: \"Federated Domain Name\", or Update-MSOLFederatedDomain –DomainName: \"Federated Domain Name\" –supportmultipledomain.","procedures":["[G1015] Scattered Spider: Scattered Spider adds a federated identity provider to the victim’s SSO tenant and activates automatic account linking.","[S0677] AADInternals: AADInternals can create a backdoor by converting a domain to a federated domain which will be able to authenticate any user across the tenant. AADInternals can also modify DesktopSSO information.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 changed domain federation trust settings using Azure AD administrative permissions to configure the domain to accept authorization tokens signed by their own SAML signing certificate."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1543.001","technique_name":"Create or Modify System Process: Launch Agent","description":"Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in /System/Library/LaunchAgents, /Library/LaunchAgents, and ~/Library/LaunchAgents. Property list files use the Label, ProgramArguments , and RunAtLoad keys to identify the Launch Agent's name, executable location, and execution time. Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks. Launch Agents can also be executed using the Launchctl command. Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the RunAtLoad or KeepAlive keys set to true. The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.","detection":"Monitor Launch Agent creation through additional plist files and utilities such as Objective-See’s KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications. Ensure Launch Agent's ProgramArguments key pointing to executables located in the /tmp or /shared folders are in alignment with enterprise policy. Ensure all Launch Agents with the RunAtLoad key set to true are in alignment with policy.","procedures":["[S0274] Calisto: Calisto adds a .plist file to the /Library/LaunchAgents folder to maintain persistence.","[S0279] Proton: Proton persists via Launch Agent.","[S0282] MacSpy: MacSpy persists via a Launch Agent.","[S0235] CrossRAT: CrossRAT creates a Launch Agent on macOS.","[S0281] Dok: Dok installs two LaunchAgents to redirect all network traffic with a randomly generated name for each plist file maintaining the format com.random.name.plist.","[S0497] Dacls: Dacls can establish persistence via a LaunchAgent.","[S1016] MacMa: MacMa installs a `com.apple.softwareupdate.plist` file in the `/LaunchAgents` folder with the `RunAtLoad` value set to `true`. Upon user login, MacMa is executed from `/var/root/.local/softwareupdate` with root privileges. Some variations also include the `LimitLoadToSessionType` key with the value `Aqua`, ensuring the MacMa only runs when there is a logged in GUI user.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchAgents.","[S0482] Bundlore: Bundlore can persist via a LaunchAgent.","[S0595] ThiefQuest: ThiefQuest installs a launch item using an embedded encrypted launch agent property list template. The plist file is installed in the ~/Library/LaunchAgents/ folder and configured with the path to the persistent binary located in the ~/Library/ folder.","[S1048] macOS.OSAMiner: macOS.OSAMiner has placed a Stripped Payloads with a `plist` extension in the Launch Agent's folder.","[S0369] CoinTicker: CoinTicker creates user launch agents named .espl.plist and com.apple.[random string].plist to establish persistence.","[S0690] Green Lambert: Green Lambert can create a Launch Agent with the `RunAtLoad` key-value pair set to true, ensuring the `com.apple.GrowlHelper.plist` file runs every time a user logs in.","[S1153] Cuckoo Stealer: Cuckoo Stealer can achieve persistence by creating launch agents to repeatedly execute malicious payloads.","[S0492] CookieMiner: CookieMiner has installed multiple new Launch Agents in order to maintain persistence for cryptocurrency mining software.","[S0277] FruitFly: FruitFly persists via a Launch Agent.","[S0162] Komplex: The Komplex trojan creates a persistent launch agent called with $HOME/Library/LaunchAgents/com.apple.updates.plist with launchctl load -w ~/Library/LaunchAgents/com.apple.updates.plist.","[S0198] NETWIRE: NETWIRE can use launch agents for persistence.","[S0276] Keydnap: Keydnap uses a Launch Agent to persist."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1543.002","technique_name":"Create or Modify System Process: Systemd Service","description":"Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. Systemd is a system and service manager commonly used for managing background daemon processes (also known as services) and other system resources. Systemd is the default initialization (init) system on many Linux distributions replacing legacy init systems, including SysVinit and Upstart, while remaining backwards compatible. Systemd utilizes unit configuration files with the `.service` file extension to encode information about a service's process. By default, system level unit files are stored in the `/systemd/system` directory of the root owned directories (`/`). User level unit files are stored in the `/systemd/user` directories of the user owned directories (`$HOME`). Inside the `.service` unit files, the following directives are used to execute commands: * `ExecStart`, `ExecStartPre`, and `ExecStartPost` directives execute when a service is started manually by `systemctl` or on system start if the service is set to automatically start. * `ExecReload` directive executes when a service restarts. * `ExecStop`, `ExecStopPre`, and `ExecStopPost` directives execute when a service is stopped. Adversaries have created new service files, altered the commands a `.service` file’s directive executes, and modified the user directive a `.service` file executes as, which could result in privilege escalation. Adversaries may also place symbolic links in these directories, enabling systemd to find these payloads regardless of where they reside on the filesystem. The `.service` file’s User directive can be used to run service as a specific user, which could result in privilege escalation based on specific user/group permissions. Systemd services can be created via systemd generators, which support the dynamic generation of unit files. Systemd generators are small executables that run during boot or configuration reloads to dynamically create or modify systemd unit files by converting non-native configurations into services, symlinks, or drop-ins (i.e., Boot or Logon Initialization Scripts).","detection":"Monitor file creation and modification events of Systemd service unit configuration files in the default directory locations for `root` & `user` level permissions. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the `root` user. Suspicious systemd services can also be identified by comparing results against a trusted system baseline. Malicious systemd services may be detected by using the systemctl utility to examine system wide services: `systemctl list-units -–type=service –all`. Analyze the contents of `.service` files present on the file system and ensure that they refer to legitimate, expected executables, and symbolic links. Auditing the execution and command-line arguments of the `systemctl` utility, as well related utilities such as `/usr/sbin/service` may reveal malicious systemd service execution.","procedures":["[G0139] TeamTNT: TeamTNT has established persistence through the creation of a cryptocurrency mining system service using systemctl.","[S1198] Gomir: Gomir creates a systemd service named `syslogd` for persistence.","[C0034] 2022 Ukraine Electric Power Attack: During the 2022 Ukraine Electric Power Attack, Sandworm Team configured Systemd to maintain persistence of GOGETTER, specifying the `WantedBy=multi-user.target` configuration to run GOGETTER when the system begins accepting user logins.","[S0192] Pupy: Pupy can be used to establish persistence using a systemd service.","[S0410] Fysbis: Fysbis has established persistence using a systemd service.","[S1078] RotaJakiro: Depending on the Linux distribution and when executing with root permissions, RotaJakiro may install persistence using a `.service` file under the `/lib/systemd/system/` folder.","[S0663] SysUpdate: SysUpdate can copy a script to the user owned `/usr/lib/systemd/system/` directory with a symlink mapped to a `root` owned directory, `/etc/ystem/system`, in the unit configuration file's `ExecStart` directive to establish persistence and elevate privileges.","[S0401] Exaramel for Linux: Exaramel for Linux has a hardcoded location under systemd that it uses to achieve persistence if it is running as root.","[G0106] Rocke: Rocke has installed a systemd service script to maintain persistence.","[S0601] Hildegard: Hildegard has started a monero service."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1543.003","technique_name":"Create or Modify System Process: Windows Service","description":"Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. Adversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via Native API functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. Modify Registry), or by using command-line utilities such as `PnPUtil.exe`. Adversaries may leverage these drivers as Rootkits to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of Exploitation for Privilege Escalation. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through Service Execution. To make detection analysis more challenging, malicious services may also incorporate Masquerade Task or Service (ex: using a service and/or payload name related to a legitimate OS or benign software component). Adversaries may also create ‘hidden’ services (i.e., Hide Artifacts), for example by using the `sc sdset` command to set service permissions via the Service Descriptor Definition Language (SDDL). This may hide a Windows service from the view of standard service enumeration methods such as `Get-Service`, `sc query`, and `services.exe`.","detection":"Monitor processes and command-line arguments for actions that could create or modify services. Command-line invocation of tools capable of adding or modifying services may be unusual, depending on how systems are typically used in a particular environment. Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. Remote access tools with built-in features may also interact directly with the Windows API to perform these functions outside of typical system utilities. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute commands or scripts. Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence. Creation of new services may generate an alterable event (ex: Event ID 4697 and/or 7045 ). New, benign services may be created during installation of new software. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[S1090] NightClub: NightClub has created a Windows service named `WmdmPmSp` to establish persistence.","[S0604] Industroyer: Industroyer can use an arbitrary system service to load at system boot for persistence and replaces the ImagePath registry value of a Windows service with a new backdoor binary.","[G0081] Tropic Trooper: Tropic Trooper has installed a service pointing to a malicious DLL dropped to disk.","[S1044] FunnyDream: FunnyDream has established persistence by running `sc.exe` and by setting the `WSearch` service to run automatically.","[S0141] Winnti for Windows: Winnti for Windows sets its DLL file as a new service in the Registry to establish persistence.","[S0625] Cuba: Cuba can modify services by using the OpenService and ChangeServiceConfig functions.","[S0204] Briba: Briba installs a service pointing to a malicious DLL dropped to disk.","[S1033] DCSrv: DCSrv has created new services for persistence by modifying the Registry.","[S0612] WastedLocker: WastedLocker created and established a service that runs until the encryption process is complete.","[S0493] GoldenSpy: GoldenSpy has established persistence by running in the background as an autostart service.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors modified the `IKEEXT` and `PrintNotify` Windows services for persistence.","[G0105] DarkVishnya: DarkVishnya created new services for shellcode loaders distribution.","[S0180] Volgmer: Volgmer installs a copy of itself in a randomly selected service, then overwrites the ServiceDLL entry in the service's Registry entry. Some Volgmer variants also install .dll files as services with names generated by a list of hard-coded strings.","[S0149] MoonWind: MoonWind installs itself as a new service with automatic startup to establish persistence. The service checks every 60 seconds to determine if the malware is running; if not, it will spawn a new instance.","[S0050] CosmicDuke: CosmicDuke uses Windows services typically named \"javamtsup\" for persistence.","[S0012] PoisonIvy: PoisonIvy creates a Registry subkey that registers a new service. PoisonIvy also creates a Registry entry modifying the Logical Disk Manager service to point to a malicious DLL dropped to disk.","[S1037] STARWHALE: STARWHALE has the ability to create the following Windows service to establish persistence on an infected host: `sc create Windowscarpstss binpath= \"cmd.exe /c cscript.exe c:\\\\windows\\\\system32\\\\w7_1.wsf humpback_whale\" start= \"auto\" obj= \"LocalSystem\"`.","[S0230] ZeroT: ZeroT can add a new service to ensure PlugX persists on the system when delivered as another payload onto the system.","[S0666] Gelsemium: Gelsemium can drop itself in `C:\\Windows\\System32\\spool\\prtprocs\\x64\\winprint.dll` as an alternative Print Processor to be loaded automatically when the spoolsv Windows service starts.","[G0143] Aquatic Panda: Aquatic Panda created new Windows services for persistence that masqueraded as legitimate Windows services via name change.","[G0082] APT38: APT38 has installed a new Windows service to establish persistence.","[S0650] QakBot: QakBot can remotely create a temporary service on a target host.","[G0030] Lotus Blossom: Lotus Blossom has configured tools such as Sagerunex to run as Windows services.","[S0608] Conficker: Conficker copies itself into the %systemroot%\\system32 directory and registers as a service.","[S0342] GreyEnergy: GreyEnergy chooses a service, drops a DLL file, and writes it to that serviceDLL Registry key.","[G0096] APT41: APT41 modified legitimate Windows services to install malware backdoors. APT41 created the StorSyncSvc service to provide persistence for Cobalt Strike.","[S0387] KeyBoy: KeyBoy installs a service pointing to a malicious DLL dropped to disk.","[G0102] Wizard Spider: Wizard Spider has installed TrickBot as a service named ControlServiceA in order to establish persistence.","[S0081] Elise: Elise configures itself as a service.","[S0439] Okrum: To establish persistence, Okrum can install itself as a new service named NtmSsvc.","[G0108] Blue Mockingbird: Blue Mockingbird has made their XMRIG payloads persistent as a Windows Service.","[G0139] TeamTNT: TeamTNT has used malware that adds cryptocurrency miners as a service.","[S0584] AppleJeus: AppleJeus can install itself as a service.","[G1043] BlackByte: BlackByte modified multiple services on victim machines to enable encryption operations. BlackByte has installed tools such as AnyDesk as a service on victim machines.","[S0567] Dtrack: Dtrack can add a service called WBService to establish persistence.","[S0603] Stuxnet: Stuxnet uses a driver registered as a boot start service as the main load-point.","[S0350] zwShell: zwShell has established persistence by adding itself as a new service.","[S1202] LockBit 3.0: LockBit 3.0 can install system services for persistence.","[S0692] SILENTTRINITY: SILENTTRINITY can establish persistence by creating a new service.","[S0086] ZLib: ZLib creates Registry keys to allow itself to run as various services.","[S0268] Bisonal: Bisonal has been modified to be used as a Windows service.","[C0040] APT41 DUST: APT41 DUST used Windows Services with names such as `Windows Defend` for persistence of DUSTPAN.","[S0029] PsExec: PsExec can leverage Windows services to escalate privileges from administrator to SYSTEM with the -s argument.","[S0665] ThreatNeedle: ThreatNeedle can run in memory and register its payload as a Windows service.","[S0038] Duqu: Duqu creates a new service that loads a malicious driver when the system starts. When Duqu is active, the operating system believes that the driver is legitimate, as it has been signed with a valid private key.","[G0073] APT19: An APT19 Port 22 malware variant registers itself as a service.","[S0140] Shamoon: Shamoon creates a new service named “ntssrv” to execute the payload. Newer versions create the \"MaintenaceSrv\" and \"hdv_725x\" services.","[S0266] TrickBot: TrickBot establishes persistence by creating an autostart service that allows it to run whenever the machine boots.","[S0142] StreamEx: StreamEx establishes persistence by installing a new service pointing to its DLL and setting the service to auto-start.","[S0236] Kwampirs: Kwampirs creates a new service named WmiApSrvEx to establish persistence.","[S0533] SLOTHFULMEDIA: SLOTHFULMEDIA has created a service on victim machines named \"TaskFrame\" to establish persistence.","[S0239] Bankshot: Bankshot can terminate a specific process by its process id.","[S0154] Cobalt Strike: Cobalt Strike can install a new service.","[S0664] Pandora: Pandora has the ability to gain system privileges through Windows services.","[S0495] RDAT: RDAT has created a service when it is installed on the victim machine.","[S0194] PowerSploit: PowerSploit contains a collection of Privesc-PowerUp modules that can discover and replace/modify service binaries, paths, and configs.","[S0335] Carbon: Carbon establishes persistence by creating a service and naming it based off the operating system version running on the current machine.","[G0027] Threat Group-3390: Threat Group-3390's malware can create a new service, sometimes naming it after the config information, to gain persistence.","[S0206] Wiarp: Wiarp creates a backdoor through which remote attackers can create a service.","[S0210] Nerex: Nerex creates a Registry subkey that registers a new service.","[S0261] Catchamas: Catchamas adds a new service named NetAdapter to establish persistence.","[S1099] Samurai: Samurai can create a service at `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost` to trigger execution and maintain persistence.","[S0203] Hydraq: Hydraq creates new services to establish persistence.","[S0013] PlugX: PlugX can be added as a service to establish persistence. PlugX also has a module to change service configurations as well as start, control, and delete services.","[G0004] Ke3chang: Ke3chang backdoor RoyalDNS established persistence through adding a service called Nwsapagent.","[S0451] LoudMiner: LoudMiner can automatically launch a Linux virtual machine as a service at startup if the AutoStart option is enabled in the VBoxVmService configuration file.","[G0056] PROMETHIUM: PROMETHIUM has created new services and modified existing services for persistence.","[S0438] Attor: Attor's dispatcher can establish persistence by registering a new service.","[S0265] Kazuar: Kazuar can install itself as a new service.","[S0386] Ursnif: Ursnif has registered itself as a system service in the Registry for automatic execution at system startup.","[S1049] SUGARUSH: SUGARUSH has created a service named `Service1` for persistence.","[C0025] 2016 Ukraine Electric Power Attack: During the 2016 Ukraine Electric Power Attack, Sandworm Team used an arbitrary system service to load at system boot for persistence for Industroyer. They also replaced the ImagePath registry value of a Windows service with a new backdoor binary.","[S0071] hcdLoader: hcdLoader installs itself as a service for persistence.","[S0570] BitPaymer: BitPaymer has attempted to install itself as a service to maintain persistence.","[S1031] PingPull: PingPull has the ability to install itself as a service.","[S0004] TinyZBot: TinyZBot can install as a Windows service for persistence.","[S0343] Exaramel for Windows: The Exaramel for Windows dropper creates and starts a Windows service named wsmprovav with the description “Windows Check AV.”","[S0504] Anchor: Anchor can establish persistence by creating a service.","[G0049] OilRig: OilRig has used a compromised Domain Controller to create a service on a remote host.","[S0356] KONNI: KONNI has registered itself as a service using its export function.","[S0412] ZxShell: ZxShell can create a new service using the service parser function ProcessScCommand.","[S1211] Hannotog: Hannotog creates a new service for persistence.","[S0629] RainyDay: RainyDay can use services to establish persistence.","[S0127] BBSRAT: BBSRAT can modify service configurations.","[S0260] InvisiMole: InvisiMole can register a Windows service named CsPower as part of its execution chain, and a Windows service named clr_optimization_v2.0.51527_X86 to achieve persistence.","[G0050] APT32: APT32 modified Windows Services to ensure PowerShell scripts were loaded on the system. APT32 also creates a Windows service to establish persistence.","[S0560] TEARDROP: TEARDROP ran as a Windows service from the c:\\windows\\syswow64 folder.","[S0630] Nebulae: Nebulae can create a service to establish persistence.","[S0182] FinFisher: FinFisher creates a new Windows service with the malicious executable for persistence.","[S0491] StrongPity: StrongPity has created new services and modified existing services for persistence.","[S1070] Black Basta: Black Basta can create a new service to establish persistence.","[S0345] Seasalt: Seasalt is capable of installing itself as a service.","[S0176] Wingbird: Wingbird uses services.exe to register a new autostart service named \"Audit Service\" using a copy of the local lsass.exe file.","[C0006] Operation Honeybee: During Operation Honeybee, threat actors installed DLLs and backdoors as Windows services.","[S0032] gh0st RAT: gh0st RAT can create a new service to establish persistence.","[G0008] Carbanak: Carbanak malware installs itself as a service to provide persistence and SYSTEM privileges.","[S0022] Uroburos: Uroburos has registered a service, typically named `WerFaultSvc`, to decrypt and find a kernel driver and kernel driver loader to maintain persistence.","[S0044] JHUHUGIT: JHUHUGIT has registered itself as a service to establish persistence.","[S0205] Naid: Naid creates a new service to establish.","[S0481] Ragnar Locker: Ragnar Locker has used sc.exe to create a new service for the VirtualBox driver.","[S1100] Ninja: Ninja can create the services `httpsvc` and `w3esvc` for persistence .","[G0022] APT3: APT3 has a tool that creates a new service for persistence.","[G0046] FIN7: FIN7 created new Windows services and added them to the startup directories for persistence.","[S0259] InnaputRAT: Some InnaputRAT variants create a new Windows service to establish persistence.","[G1030] Agrius: Agrius has deployed IPsec Helper malware post-exploitation and registered it as a service for persistence.","[S0089] BlackEnergy: One variant of BlackEnergy creates a new service using either a hard-coded or randomly generated name.","[G0094] Kimsuky: Kimsuky has created new services for persistence.","[S0444] ShimRat: ShimRat has installed a Windows service to maintain persistence on victim machines.","[S0046] CozyCar: One persistence mechanism used by CozyCar is to register itself as a Windows service.","[S0660] Clambling: Clambling can register itself as a system service to gain persistence.","[S0263] TYPEFRAME: TYPEFRAME variants can add malicious DLL modules as new services.TYPEFRAME can also delete services from the victim’s machine.","[S0697] HermeticWiper: HermeticWiper can load drivers by creating a new service using the `CreateServiceW` API.","[G1006] Earth Lusca: Earth Lusca created a service using the command sc create “SysUpdate” binpath= “cmd /c start “[file path]””&&sc config “SysUpdate” start= auto&&net start SysUpdate for persistence.","[S0169] RawPOS: RawPOS installs itself as a service to maintain persistence.","[G0080] Cobalt Group: Cobalt Group has created new services to establish persistence.","[S0074] Sakula: Some Sakula samples install themselves as services for persistence by calling WinExec with the net start argument.","[S0164] TDTESS: If running as administrator, TDTESS installs itself as a new service named bmwappushservice to establish persistence.","[G0032] Lazarus Group: Several Lazarus Group malware families install themselves as new services.","[S0347] AuditCred: AuditCred is installed as a new service on the system.","[S0501] PipeMon: PipeMon can establish persistence by registering a malicious DLL as an alternative Print Processor which is loaded when the print spooler service starts.","[G1021] Cinnamon Tempest: Cinnamon Tempest has created system services to establish persistence for deployed tooling.","[S0024] Dyre: Dyre registers itself as a service by adding several Registry keys.","[S0082] Emissary: Emissary is capable of configuring itself as a service.","[S0363] Empire: Empire can utilize built-in modules to modify service binaries and restore them to their original state.","[S0367] Emotet: Emotet has been observed creating new services to maintain persistence.","[S1158] DUSTPAN: DUSTPAN can persist as a Windows Service in operations.","[S0172] Reaver: Reaver installs itself as a new service.","[S0181] FALLCHILL: FALLCHILL has been installed as a Windows service.","[S0663] SysUpdate: SysUpdate can create a service to establish persistence.","[S0118] Nidiran: Nidiran can create a new service named msamger (Microsoft Security Accounts Manager).","[S0366] WannaCry: WannaCry creates the service \"mssecsvc2.0\" with the display name \"Microsoft Security Center (2.0) Service.\""],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1543.004","technique_name":"Create or Modify System Process: Launch Daemon","description":"Adversaries may create or modify Launch Daemons to execute malicious payloads as part of persistence. Launch Daemons are plist files used to interact with Launchd, the service management framework used by macOS. Launch Daemons require elevated privileges to install, are executed for every user on a system prior to login, and run in the background without the need for user interaction. During the macOS initialization startup, the launchd process loads the parameters for launch-on-demand system-level daemons from plist files found in /System/Library/LaunchDaemons/ and /Library/LaunchDaemons/. Required Launch Daemons parameters include a Label to identify the task, Program to provide a path to the executable, and RunAtLoad to specify when the task is run. Launch Daemons are often used to provide access to shared resources, updates to software, or conduct automation tasks. Adversaries may install a Launch Daemon configured to execute at startup by using the RunAtLoad parameter set to true and the Program parameter set to the malicious executable path. The daemon name may be disguised by using a name from a related operating system or benign software (i.e. Masquerading). When the Launch Daemon is executed, the program inherits administrative permissions. Additionally, system configuration changes (such as the installation of third party package managing software) may cause folders such as usr/local/bin to become globally writeable. So, it is possible for poor configurations to allow an adversary to modify executables referenced by current Launch Daemon's plist files.","detection":"Monitor for new files added to the /Library/LaunchDaemons/ folder. The System LaunchDaemons are protected by SIP. Some legitimate LaunchDaemons point to unsigned code that could be exploited. For Launch Daemons with the RunAtLoad parameter set to true, ensure the Program parameter points to signed code or executables are in alignment with enterprise policy. Some parameters are interchangeable with others, such as Program and ProgramArguments parameters but one must be present.","procedures":["[S0690] Green Lambert: Green Lambert can add a plist file in the `Library/LaunchDaemons` to establish persistence.","[S1105] COATHANGER: COATHANGER will create a daemon for timed check-ins with command and control infrastructure.","[S0595] ThiefQuest: When running with root privileges after a Launch Agent is installed, ThiefQuest installs a plist file to the /Library/LaunchDaemons/ folder with the RunAtLoad key set to true establishing persistence as a Launch Daemon.","[S0451] LoudMiner: LoudMiner adds plist files with the naming format com.[random_name].plist in the /Library/LaunchDaemons folder with the RunAtLoad and KeepAlive keys set to true.","[S0352] OSX_OCEANLOTUS.D: If running with root permissions, OSX_OCEANLOTUS.D can create a persistence file in the folder /Library/LaunchDaemons.","[S0482] Bundlore: Bundlore can persist via a LaunchDaemon.","[S0497] Dacls: Dacls can establish persistence via a Launch Daemon.","[S0658] XCSSET: XCSSET uses the ssh launchdaemon to elevate privileges, bypass system controls, and enable remote access to the victim.","[S0584] AppleJeus: AppleJeus has placed a plist file within the LaunchDaemons folder and launched it manually."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1543.005","technique_name":"Create or Modify System Process: Container Service","description":"Adversaries may create or modify container or container cluster management tools that run as daemons, agents, or services on individual hosts. These include software for creating and managing individual containers, such as Docker and Podman, as well as container cluster node-level agents such as kubelet. By modifying these services, an adversary may be able to achieve persistence or escalate their privileges on a host. For example, by using the `docker run` or `podman run` command with the `restart=always` directive, a container can be configured to persistently restart on the host. A user with access to the (rootful) docker command may also be able to escalate their privileges on the host. In Kubernetes environments, DaemonSets allow an adversary to persistently Deploy Containers on all nodes, including ones added later to the cluster. Pods can also be deployed to specific nodes using the `nodeSelector` or `nodeName` fields in the pod spec. Note that containers can also be configured to run as Systemd Services.","detection":null,"procedures":null,"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.001","technique_name":"Event Triggered Execution: Change Default File Association","description":"Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened. System file associations are listed under HKEY_CLASSES_ROOT\\.[extension], for example HKEY_CLASSES_ROOT\\.txt. The entries point to a handler for that extension located at HKEY_CLASSES_ROOT\\\\[handler]. The various commands are then listed as subkeys underneath the shell key at HKEY_CLASSES_ROOT\\\\[handler]\\shell\\\\[action]\\command. For example: * HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command * HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command * HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands.","detection":"Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process. User file association preferences are stored under [HKEY_CURRENT_USER]\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts and override associations configured under [HKEY_CLASSES_ROOT]. Changes to a user's preference will occur under this entry's subkeys. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.","procedures":["[S0692] SILENTTRINITY: SILENTTRINITY can conduct an image hijack of an `.msc` file extension as part of its UAC bypass process.","[G0094] Kimsuky: Kimsuky has a HWP document stealer module which changes the default program association in the registry to open HWP documents."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.002","technique_name":"Event Triggered Execution: Screensaver","description":"Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. The Windows screensaver application scrnsave.scr is located in C:\\Windows\\System32\\, and C:\\Windows\\sysWOW64\\ on 64-bit Windows systems, along with screensavers included with base Windows installations. The following screensaver settings are stored in the Registry (HKCU\\Control Panel\\Desktop\\) and could be manipulated to achieve persistence: * SCRNSAVE.exe - set to malicious PE path * ScreenSaveActive - set to '1' to enable the screensaver * ScreenSaverIsSecure - set to '0' to not require a password to unlock * ScreenSaveTimeout - sets user inactivity timeout before screensaver is executed Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity.","detection":"Monitor process execution and command-line parameters of .scr files. Monitor changes to screensaver configuration changes in the Registry that may not correlate with typical user behavior. Tools such as Sysinternals Autoruns can be used to detect changes to the screensaver binary path in the Registry. Suspicious paths and PE files may indicate outliers among legitimate screensavers in a network and should be investigated.","procedures":["[S0168] Gazer: Gazer can establish persistence through the system screensaver by configuring it to execute the malware."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.003","technique_name":"Event Triggered Execution: Windows Management Instrumentation Event Subscription","description":"Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user login, or the computer's uptime. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may also compile WMI scripts – using `mofcomp.exe` –into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.","detection":"Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence. Monitor for the creation of new WMI EventFilter, EventConsumer, and FilterToConsumerBinding events. Event ID 5861 is logged on Windows 10 systems when new EventFilterToConsumerBinding events are created. Monitor processes and command-line arguments that can be used to register WMI persistence, such as the Register-WmiEvent PowerShell cmdlet, as well as those that result from the execution of subscriptions (i.e. spawning from the WmiPrvSe.exe WMI Provider Host process).","procedures":["[G0108] Blue Mockingbird: Blue Mockingbird has used mofcomp.exe to establish WMI Event Subscription persistence mechanisms configured from a *.mof file.","[S1085] Sardonic: Sardonic can use a WMI event filter to invoke a command-line event consumer to gain persistence.","[G0016] APT29: APT29 has used WMI event subscriptions for persistence.","[S1059] metaMain: metaMain registered a WMI event subscription consumer called \"hard_disk_stat\" to establish persistence.","[G1001] HEXANE: HEXANE has used WMI event subscriptions for persistence.","[G0061] FIN8: FIN8 has used WMI event subscriptions for persistence.","[S0511] RegDuke: RegDuke can persist using a WMI consumer that is launched every time a process named WINWORD.EXE is started.","[S0692] SILENTTRINITY: SILENTTRINITY can create a WMI Event to execute a payload for persistence.","[G0065] Leviathan: Leviathan has used WMI for persistence.","[S0376] HOPLIGHT: HOPLIGHT can use WMI event subscriptions to create persistence.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used a WMI event filter to invoke a command-line event consumer at system boot time to launch a backdoor with `rundll32.exe`.","[G0010] Turla: Turla has used WMI event filters and consumers to establish persistence.","[G1013] Metador: Metador has established persistence through the use of a WMI event subscription combined with unusual living-off-the-land binaries such as `cdb.exe`.","[G0064] APT33: APT33 has attempted to use WMI event subscriptions to establish persistence on compromised hosts.","[S1081] BADHATCH: BADHATCH can use WMI event subscriptions for persistence.","[S1020] Kevin: Kevin can compile randomly-generated MOF files into the WMI repository to persistently run malware.","[C0023] Operation Ghost: During Operation Ghost, APT29 used WMI event subscriptions to establish persistence for malware.","[G0129] Mustang Panda: Mustang Panda's custom ORat tool uses a WMI event consumer to maintain persistence.","[S0202] adbupd: adbupd can use a WMI script to achieve persistence.","[G0075] Rancor: Rancor has complied VBScript-generated MOF files into WMI event subscriptions for persistence.","[S0053] SeaDuke: SeaDuke uses an event filter in WMI code to execute a previously dropped executable shortly after system startup.","[S0150] POSHSPY: POSHSPY uses a WMI event subscription to establish persistence.","[S0378] PoshC2: PoshC2 has the ability to persist on a system using WMI events.","[S0682] TrailBlazer: TrailBlazer has the ability to use WMI for persistence.","[S0371] POWERTON: POWERTON can use WMI for persistence."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.004","technique_name":"Event Triggered Execution: Unix Shell Configuration Modification","description":"Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User Unix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user’s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the /etc/profile and /etc/profile.d files. These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into ~/.bash_profile, ~/.bash_login, or ~/.profile which are sourced when a user opens a command-line interface or connects remotely. Since the system only executes the first existing file in the listed order, adversaries have used ~/.bash_profile to ensure execution. Adversaries have also leveraged the ~/.bashrc file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface. Some malware targets the termination of a program to trigger execution, adversaries can use the ~/.bash_logout file to execute malicious commands at the end of a session. For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using /etc/profile, /etc/zshenv, /etc/zprofile, and /etc/zlogin. The login shell then configures the user environment with ~/.zprofile and ~/.zlogin. The interactive shell uses the ~/.zshrc to configure the user environment. Upon exiting, /etc/zlogout and ~/.zlogout are executed. For legacy programs, macOS executes /etc/bashrc on startup.","detection":"While users may customize their shell profile files, there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process. Monitor for changes to /etc/profile and /etc/profile.d, these files should only be modified by system administrators. MacOS users can leverage Endpoint Security Framework file events monitoring these specific files. For most Linux and macOS systems, a list of file paths for valid shell options available on a system are located in the /etc/shells file.","procedures":["[S1078] RotaJakiro: When executing with non-root level permissions, RotaJakiro can install persistence by adding a command to the .bashrc file that executes a binary in the `${HOME}/.gvfsd/.profile/` folder.","[S0362] Linux Rabbit: Linux Rabbit maintains persistence on an infected machine through rc.local and .bashrc files.","[C0045] ShadowRay: During ShadowRay, threat actors executed commands on interactive and reverse shells.","[S0690] Green Lambert: Green Lambert can establish persistence on a compromised host through modifying the `profile`, `login`, and run command (rc) files associated with the `bash`, `csh`, and `tcsh` shells.","[S0658] XCSSET: Using AppleScript, XCSSET adds it's executable to the user's `~/.zshrc_aliases` file (`\"echo \" & payload & \" > ~/zshrc_aliases\"`), it then adds a line to the .zshrc file to source the `.zshrc_aliases` file (`[ -f $HOME/.zshrc_aliases ] && . $HOME/.zshrc_aliases`). Each time the user starts a new `zsh` terminal session, the `.zshrc` file executes the `.zshrc_aliases` file."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.005","technique_name":"Event Triggered Execution: Trap","description":"Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d. Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.","detection":"Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.","procedures":null,"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.006","technique_name":"Event Triggered Execution: LC_LOAD_DYLIB Addition","description":"Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes. Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.","detection":"Monitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.","procedures":null,"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.007","technique_name":"Event Triggered Execution: Netsh Helper DLL","description":"Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at HKLM\\SOFTWARE\\Microsoft\\Netsh. Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality.","detection":"It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the HKLM\\SOFTWARE\\Microsoft\\Netsh registry key for any new or suspicious entries that do not correlate with known system files or benign software.","procedures":["[S0108] netsh: netsh can be used as a persistence proxy technique to execute a helper DLL when netsh.exe is executed."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.008","technique_name":"Event Triggered Execution: Accessibility Features","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system. Two common accessibility programs are C:\\Windows\\System32\\sethc.exe, launched when the shift key is pressed five times and C:\\Windows\\System32\\utilman.exe, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as \"sticky keys\", and has been used by adversaries for unauthenticated access through a remote desktop login screen. Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in %systemdir%\\, and it must be protected by Windows File or Resource Protection (WFP/WRP). The Image File Execution Options Injection debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., C:\\Windows\\System32\\utilman.exe) may be replaced with \"cmd.exe\" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. Other accessibility features exist that may also be leveraged in a similar fashion: * On-Screen Keyboard: C:\\Windows\\System32\\osk.exe * Magnifier: C:\\Windows\\System32\\Magnify.exe * Narrator: C:\\Windows\\System32\\Narrator.exe * Display Switcher: C:\\Windows\\System32\\DisplaySwitch.exe * App Switcher: C:\\Windows\\System32\\AtBroker.exe","detection":"Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options.","procedures":["[S0363] Empire: Empire can leverage WMI debugging to remotely replace binaries like sethc.exe, Utilman.exe, and Magnify.exe with cmd.exe.","[G0096] APT41: APT41 leveraged sticky keys to establish persistence.","[G0022] APT3: APT3 replaces the Sticky Keys binary C:\\Windows\\System32\\sethc.exe for persistence.","[G0009] Deep Panda: Deep Panda has used the sticky-keys technique to bypass the RDP login screen on remote systems during intrusions.","[G0001] Axiom: Axiom actors have been known to use the Sticky Keys replacement within RDP sessions to obtain persistence.","[G0117] Fox Kitten: Fox Kitten has used sticky keys to launch a command prompt.","[G0016] APT29: APT29 used sticky-keys to obtain unauthenticated, privileged console access."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.009","technique_name":"Event Triggered Execution: AppCert DLLs","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs Registry key under HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\ are loaded into every process that calls the ubiquitously used application programming interface (API) functions CreateProcess, CreateProcessAsUser, CreateProcessWithLoginW, CreateProcessWithTokenW, or WinExec. Similar to Process Injection, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.","detection":"Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.","procedures":["[S0196] PUNCHBUGGY: PUNCHBUGGY can establish using a AppCertDLLs Registry key."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.010","technique_name":"Event Triggered Execution: AppInit DLLs","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled.","detection":"Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.","procedures":["[G0087] APT39: APT39 has used malware to set LoadAppInit_DLLs in the Registry key SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows in order to establish persistence.","[S0098] T9000: If a victim meets certain criteria, T9000 uses the AppInit_DLL functionality to achieve persistence by ensuring that every user mode process that is spawned will load its malicious DLL, ResN32.dll. It does this by creating the following Registry keys: HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs – %APPDATA%\\Intel\\ResN32.dll and HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs – 0x1.","[S0107] Cherry Picker: Some variants of Cherry Picker use AppInit_DLLs to achieve persistence by creating the following Registry key: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows \"AppInit_DLLs\"=\"pserver32.dll\"","[S0458] Ramsay: Ramsay can insert itself into the address space of other applications using the AppInit DLL Registry key."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.011","technique_name":"Event Triggered Execution: Application Shimming","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in: * %WINDIR%\\AppPatch\\sysmain.sdb and * hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb Custom databases are stored in: * %WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom and * hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. Shims can also be abused to establish persistence by continuously being invoked by affected programs.","detection":"There are several public tools available that will detect shims that are currently available : * Shim-Process-Scanner - checks memory of every running process for any shim flags * Shim-Detector-Lite - detects installation of custom shim databases * Shim-Guard - monitors registry for any shim installations * ShimScanner - forensic tool to find active shims in memory * ShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot) Monitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.","procedures":["[S0517] Pillowmint: Pillowmint has used a malicious shim database to maintain persistence.","[S0461] SDBbot: SDBbot has the ability to use application shimming for persistence if it detects it is running as admin on Windows XP or 7, by creating a shim database to patch services.exe.","[G0046] FIN7: FIN7 has used application shim databases for persistence.","[S0444] ShimRat: ShimRat has installed shim databases in the AppPatch folder."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.012","technique_name":"Event Triggered Execution: Image File Execution Options Injection","description":"Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., C:\\dbg\\ntsd.exe -g notepad.exe). IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. IFEOs are represented as Debugger values in the Registry under HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\ where &lt;executable&gt; is the binary on which the debugger is attached. IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\. Similar to Accessibility Features, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures \"cmd.exe,\" or another program that provides backdoor access, as a \"debugger\" for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with Remote Desktop Protocol will cause the \"debugger\" program to be executed with SYSTEM privileges. Similar to Process Injection, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation. Malware may also use IFEO to Impair Defenses by registering invalid debuggers that redirect and effectively disable various system and security applications.","detection":"Monitor for abnormal usage of the GFlags tool as well as common processes spawned under abnormal parents and/or with creation flags indicative of debugging such as DEBUG_PROCESS and DEBUG_ONLY_THIS_PROCESS. Monitor Registry values associated with IFEOs, as well as silent process exit monitoring, for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx.","procedures":["[S0559] SUNBURST: SUNBURST created an Image File Execution Options (IFEO) Debugger registry value for the process dllhost.exe to trigger the installation of Cobalt Strike.","[S0461] SDBbot: SDBbot has the ability to use image file execution options for persistence if it detects it is running with admin privileges on a Windows version newer than Windows 7.","[C0032] C0032: During the C0032 campaign, TEMP.Veles modified and added entries within HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options to maintain persistence."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.013","technique_name":"Event Triggered Execution: PowerShell Profile","description":"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile (profile.ps1) is a script that runs when PowerShell starts and can be used as a logon script to customize user environments. PowerShell supports several profiles depending on the user or host program. For example, there can be different profiles for PowerShell host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or PowerShell drives to gain persistence. Every time a user opens a PowerShell session the modified script will be executed unless the -NoProfile flag is used when it is launched. An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator.","detection":"Locations where profile.ps1 can be stored should be monitored for new profiles or modifications. Example profile locations (user defaults as well as program-specific) include: * $PsHome\\Profile.ps1 * $PsHome\\Microsoft.{HostProgram}_profile.ps1 * $Home\\\\\\[My ]Documents\\PowerShell\\Profile.ps1 * $Home\\\\\\[My ]Documents\\PowerShell\\Microsoft.{HostProgram}_profile.ps1 Monitor abnormal PowerShell commands, unusual loading of PowerShell drives or modules, and/or execution of unknown programs.","procedures":["[G0010] Turla: Turla has used PowerShell profiles to maintain persistence on an infected machine."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1546.014","technique_name":"Event Triggered Execution: Emond","description":"Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a Launch Daemon that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at /sbin/emond will load any rules from the /etc/emond.d/rules/ directory and take action once an explicitly defined event takes place. The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path /private/var/db/emondClients, specified in the Launch Daemon configuration file at/System/Library/LaunchDaemons/com.apple.emond.plist. Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication. Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the Launch Daemon service.","detection":"Monitor emond rules creation by checking for files created or modified in /etc/emond.d/rules/ and /private/var/db/emondClients.","procedures":null,"tactics":"TA0004 - Privilege Escalation"}