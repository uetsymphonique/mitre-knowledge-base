{"technique_id":"T1006","technique_name":"Direct Volume Access","description":"Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. Utilities, such as `NinjaCopy`, exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as `vssadmin`, `wbadmin`, and esentutl) to create shadow copies or backups of data from system volumes.","detection":"Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives. Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.","procedures":["[S0404] esentutl: esentutl can use the Volume Shadow Copy service to copy locked files such as `ntds.dit`.","[G1015] Scattered Spider: Scattered Spider has created volume shadow copies of virtual domain controller disks to extract the `NTDS.dit` file.","[G1017] Volt Typhoon: Volt Typhoon has executed the Windows-native `vssadmin` command to create volume shadow copies.","[C0051] APT28 Nearest Neighbor Campaign: During APT28 Nearest Neighbor Campaign, APT28 accessed volume shadow copies through executing vssadmin in order to dump the NTDS.dit file."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1014","technique_name":"Rootkit","description":"Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware. Rootkits have been seen for Windows, Linux, and Mac OS X systems.","detection":"Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR.","procedures":["[S0377] Ebury: Ebury acts as a user land rootkit using the SSH service.","[G0044] Winnti Group: Winnti Group used a rootkit to modify typical server functionality.","[G0096] APT41: APT41 deployed rootkits on Linux systems.","[G0106] Rocke: Rocke has modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.","[S0484] Carberp: Carberp has used user mode rootkit techniques to remain hidden on the system.","[S0458] Ramsay: Ramsay has included a rootkit to evade defenses.","[S0502] Drovorub: Drovorub has used a kernel module rootkit to hide processes, files, executables, and network artifacts from user space view.","[S0040] HTRAN: HTRAN can install a rootkit to hide network connections from the host OS.","[S0135] HIDEDRV: HIDEDRV is a rootkit that hides certain operating system artifacts.","[G0139] TeamTNT: TeamTNT has used rootkits such as the open-source Diamorphine rootkit and their custom bots to hide cryptocurrency mining activities on the machine.","[S0468] Skidmap: Skidmap is a kernel-mode rootkit that has the ability to hook system calls to hide specific files and fake network and CPU-related statistics to make the CPU load of the infected machine always appear low.","[S0221] Umbreon: Umbreon hides from defenders by hooking libc function calls, hiding artifacts that would reveal its presence, such as the user account it creates to provide access and undermining strace, a tool often used to identify malware.","[S0603] Stuxnet: Stuxnet uses a Windows rootkit to mask its binaries and other relevant files.","[S1105] COATHANGER: COATHANGER hooks or replaces multiple legitimate processes and other functions on victim devices.","[S0047] Hacking Team UEFI Rootkit: Hacking Team UEFI Rootkit is a UEFI BIOS rootkit developed by the company Hacking Team to persist remote access software on some targeted systems.","[S0394] HiddenWasp: HiddenWasp uses a rootkit to hook and implement functions on the system.","[S0601] Hildegard: Hildegard has modified /etc/ld.so.preload to overwrite readdir() and readdir64().","[S1186] Line Dancer: Line Dancer can hook both the crash dump process and the Autehntication, Authorization, and Accounting (AAA) functions on compromised machines to evade forensic analysis and authentication mechanisms.","[C0046] ArcaneDoor: ArcaneDoor included hooking the `processHostScanReply()` function on victim Cisco ASA devices.","[G0007] APT28: APT28 has used a UEFI (Unified Extensible Firmware Interface) rootkit known as LoJax.","[S0009] Hikit: Hikit is a Rootkit that has been used by Axiom.","[S0430] Winnti for Linux: Winnti for Linux has used a modified copy of the open-source userland rootkit Azazel, named libxselinux.so, to hide the malware's operations and network activity.","[S0027] Zeroaccess: Zeroaccess is a kernel-mode rootkit.","[S0397] LoJax: LoJax is a UEFI BIOS rootkit deployed to persist remote access software on some targeted systems.","[S0022] Uroburos: Uroburos can use its kernel module to prevent its host components from being listed by the targeted system's OS and to mediate requests between user mode and concealed components.","[S0670] WarzoneRAT: WarzoneRAT can include a rootkit to hide processes, files, and startup.","[S0572] Caterpillar WebShell: Caterpillar WebShell has a module to use a rootkit on a system.","[S0012] PoisonIvy: PoisonIvy starts a rootkit from a malicious file dropped to disk."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.001","technique_name":"Obfuscated Files or Information: Binary Padding","description":"Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures. The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware. Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.","detection":"Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool. When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file.","procedures":["[S0586] TAINTEDSCRIBE: TAINTEDSCRIBE can execute FileRecvWriteRand to append random bytes to the end of a file received from C2.","[S0367] Emotet: Emotet inflates malicious files and malware as an evasion technique.","[S0528] Javali: Javali can use large obfuscated libraries to hinder detection and analysis.","[S0650] QakBot: QakBot can use large file sizes to evade detection.","[S0433] Rifdoor: Rifdoor has added four additional bytes of data upon launching, then saved the changed version as C:\\ProgramData\\Initech\\Initech.exe.","[G0065] Leviathan: Leviathan has inserted garbage characters into code, presumably to avoid anti-virus detection.","[S1149] CHIMNEYSWEEP: The CHIMNEYSWEEP installer has been padded with null bytes to inflate its size.","[S0531] Grandoreiro: Grandoreiro has added BMP images to the resources section of its Portable Executable (PE) file increasing each binary to at least 300MB in size.","[G0016] APT29: APT29 used large size files to avoid detection by security solutions with hardcoded size limits.","[G0002] Moafee: Moafee has been known to employ binary padding.","[S0614] CostaBricks: CostaBricks has added the entire unobfuscated code of the legitimate open source application Blink to its code.","[S1185] LightSpy: LightSpy's configuration file is appended to the end of the binary. For example, the last `0x1d0` bytes of one sample is an AES encrypted configuration file with a static key of `3e2717e8b3873b29`.","[S0268] Bisonal: Bisonal has appended random binary data to the end of itself to generate a large binary.","[G0126] Higaisa: Higaisa performed padding with null bytes before calculating its hash.","[S0236] Kwampirs: Before writing to disk, Kwampirs inserts a randomly generated string into the middle of the decrypted payload in an attempt to evade hash-based detections.","[S1160] Latrodectus: Latrodectus has been obfuscated with a 129 byte sequence of junk data prepended to the file.","[S1070] Black Basta: Black Basta had added data prior to the Portable Executable (PE) header to prevent automatic scanners from identifying the payload.","[G0040] Patchwork: Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.","[G0060] BRONZE BUTLER: BRONZE BUTLER downloader code has included \"0\" characters at the end of the file to inflate the file size in a likely attempt to evade anti-virus detection.","[S0082] Emissary: A variant of Emissary appends junk data to the end of its DLL file to create a large file that may exceed the maximum size that anti-virus programs can scan.","[G1024] Akira: Akira has used binary padding to obfuscate payloads.","[S0244] Comnie: Comnie appends a total of 64MB of garbage data to a file to deter any security products in place that may be scanning files on disk.","[S0632] GrimAgent: GrimAgent has the ability to add bytes to change the file hash.","[S1086] Snip3: Snip3 can obfuscate strings using junk Chinese characters.","[S0477] Goopy: Goopy has had null characters padded in its malicious DLL payload."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.002","technique_name":"Obfuscated Files or Information: Software Packing","description":"Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code. Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.","detection":"Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.","procedures":["[S0588] GoldMax: GoldMax has been packed for obfuscation.","[S0447] Lokibot: Lokibot has used several packing methods for obfuscation.","[S0625] Cuba: Cuba has a packed payload when delivered.","[S0257] VERMIN: VERMIN is initially packed.","[S0020] China Chopper: China Chopper's client component is packed with UPX.","[C0017] C0017: During C0017, APT41 used VMProtect to slow the reverse engineering of malicious binaries.","[S1130] Raspberry Robin: Raspberry Robin contains multiple payloads that are packed for defense evasion purposes and unpacked on runtime.","[S0565] Raindrop: Raindrop used a custom packer for its Cobalt Strike payload, which was compressed using the LZMA algorithm.","[S1196] Troll Stealer: Troll Stealer has been delivered as a VMProtect-packed binary.","[G0089] The White Company: The White Company has obfuscated their payloads through packing.","[S0022] Uroburos: Uroburos uses a custom packer.","[S0543] Spark: Spark has been packed with Enigma Protector to obfuscate its contents.","[G1018] TA2541: TA2541 has used a .NET packer to obfuscate malicious files.","[S0198] NETWIRE: NETWIRE has used .NET packer tools to evade detection.","[S0409] Machete: Machete has been packed with NSIS.","[S0622] AppleSeed: AppleSeed has used UPX packers for its payload DLL.","[S0187] Daserf: A version of Daserf uses the MPRESS packer.","[G0096] APT41: APT41 uses packers such as Themida to obfuscate malicious files.","[S0281] Dok: Dok is packed with an UPX executable packer.","[G0070] Dark Caracal: Dark Caracal has used UPX to pack Bandook.","[S0356] KONNI: KONNI has been packed for obfuscation.","[S1202] LockBit 3.0: LockBit 3.0 can use code packing to hinder analysis.","[C0002] Night Dragon: During Night Dragon, threat actors used software packing in its tools.","[C0005] Operation Spalax: For Operation Spalax, the threat actors used a variety of packers, including CyaX, to obfuscate malicious executables.","[S0373] Astaroth: Astaroth uses a software packer called Pe123\\RPolyCryptor.","[G1007] Aoqin Dragon: Aoqin Dragon has used the Themida packer to obfuscate malicious payloads.","[S0094] Trojan.Karagany: Trojan.Karagany samples sometimes use common binary packers such as UPX and Aspack on top of a custom Delphi binary packer.","[G1019] MoustachedBouncer: MoustachedBouncer has used malware plugins packed with Themida.","[S0182] FinFisher: A FinFisher variant uses a custom packer.","[G0087] APT39: APT39 has packed tools with UPX, and has repacked a modified version of Mimikatz to thwart anti-virus detection.","[S0638] Babuk: Versions of Babuk have been packed.","[S1183] StrelaStealer: StrelaStealer variants have used packers to obfuscate payloads and make analysis more difficult.","[S0601] Hildegard: Hildegard has packed ELF files into other binaries.","[S0554] Egregor: Egregor's payloads are custom-packed, archived and encrypted to prevent analysis.","[G0092] TA505: TA505 has used UPX to obscure malicious code.","[C0016] Operation Dust Storm: For Operation Dust Storm, the threat actors used UPX to pack some payloads.","[G1017] Volt Typhoon: Volt Typhoon has used the Ultimate Packer for Executables (UPX) to obfuscate the FRP client files BrightmetricAgent.exe and SMSvcService.ex) and the port scanning utility ScanLine.","[S0266] TrickBot: TrickBot leverages a custom packer to obfuscate its functionality.","[S0532] Lucifer: Lucifer has used UPX packed binaries.","[G0093] GALLIUM: GALLIUM packed some payloads using different types of packers, both known and custom.","[S0695] Donut: Donut can generate packed code modules.","[G0139] TeamTNT: TeamTNT has used UPX and Ezuri packer to pack its binaries.","[G0082] APT38: APT38 has used several code packing methods such as Themida, Enigma, VMProtect, and Obsidium, to pack their implants.","[S0461] SDBbot: SDBbot has used a packed installer file.","[S0671] Tomiris: Tomiris has been packed with UPX.","[S1210] Sagerunex: Sagerunex has used VMProtect to pack and obscure itself.","[S0614] CostaBricks: CostaBricks can implement a custom-built virtual machine mechanism to obfuscate its code.","[S1160] Latrodectus: The Latrodectus payload has been packed for obfuscation.","[S0611] Clop: Clop has been packed to help avoid detection.","[S0512] FatDuke: FatDuke has been regularly repacked by its operators to create large binaries and evade detection.","[S1018] Saint Bot: Saint Bot has been packed using a dark market crypter.","[S0678] Torisma: Torisma has been packed with Iz4 compression.","[S0431] HotCroissant: HotCroissant has used the open source UPX executable packer.","[S0520] BLINDINGCAN: BLINDINGCAN has been packed with the UPX packer.","[G0106] Rocke: Rocke's miner has created UPX-packed files in the Windows Start Menu Folder.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D has a variant that is packed with UPX.","[G0040] Patchwork: A Patchwork payload was packed with UPX.","[S0283] jRAT: jRAT payloads have been packed.","[S0251] Zebrocy: Zebrocy's Delphi variant was packed with UPX.","[S0053] SeaDuke: SeaDuke has been packed with the UPX packer.","[S1105] COATHANGER: The first stage of COATHANGER is delivered as a packed file.","[S0398] HyperBro: HyperBro has the ability to pack its payload.","[S0085] S-Type: Some S-Type samples have been packed with UPX.","[S0513] LiteDuke: LiteDuke has been packed with multiple layers of encryption.","[S0132] H1N1: H1N1 uses a custom packing algorithm.","[C0025] 2016 Ukraine Electric Power Attack: During the 2016 Ukraine Electric Power Attack, Sandworm Team used UPX to pack a copy of Mimikatz.","[S0476] Valak: Valak has used packed DLL payloads.","[S0694] DRATzarus: DRATzarus's dropper can be packed with UPX.","[G0094] Kimsuky: Kimsuky has packed malware with UPX.","[S0444] ShimRat: ShimRat's loader has been packed with the compressed ShimRat core DLL and the legitimate DLL for it to hijack.","[G0128] ZIRCONIUM: ZIRCONIUM has used multi-stage packers for exploit code.","[S0268] Bisonal: Bisonal has used the MPRESS packer and similar tools for obfuscation.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group packed malicious .db files with Themida to evade detection.","[S0230] ZeroT: Some ZeroT DLL files have been packed with UPX.","[S1030] Squirrelwaffle: Squirrelwaffle has been packed with a custom packer to hide payloads.","[S0334] DarkComet: DarkComet has the option to compress its payload using UPX or MPRESS.","[S0342] GreyEnergy: GreyEnergy is packed for obfuscation.","[S0024] Dyre: Dyre has been delivered with encrypted resources and must be unpacked for execution.","[S0530] Melcoz: Melcoz has been packed with VMProtect and Themida.","[S0455] Metamorfo: Metamorfo has used VMProtect to pack and protect files.","[G0027] Threat Group-3390: Threat Group-3390 has packed malware and tools, including using VMProtect.","[S0248] yty: yty packs a plugin with UPX.","[S0367] Emotet: Emotet has used custom packers to protect its payloads.","[S0264] OopsIE: OopsIE uses the SmartAssembly obfuscator to pack an embedded .Net Framework assembly used for C2.","[G1031] Saint Bear: Saint Bear clones .NET assemblies from other .NET binaries as well as cloning code signing certificates from other software to obfuscate the initial loader payload.","[S0527] CSPY Downloader: CSPY Downloader has been packed with UPX.","[S0663] SysUpdate: SysUpdate has been packed with VMProtect.","[S1026] Mongall: Mongall has been packed with Themida.","[S0083] Misdat: Misdat was typically packed using UPX.","[S1207] XLoader: XLoader uses various packers, including CyaX, to obfuscate malicious executables.","[S0628] FYAnti: FYAnti has used ConfuserEx to pack its .NET module.","[S0650] QakBot: QakBot can encrypt and pack malicious payloads.","[S0483] IcedID: IcedID has packed and encrypted its loader module.","[G0022] APT3: APT3 has been known to pack their tools.","[S0504] Anchor: Anchor has come with a packed payload.","[G0066] Elderwood: Elderwood has packed malware payloads before delivery to victims.","[S0534] Bazar: Bazar has a variant with a packed payload.","[G0016] APT29: APT29 used UPX to pack files."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.003","technique_name":"Obfuscated Files or Information: Steganography","description":"Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files. Duqu was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server. By the end of 2017, a threat group used Invoke-PSImage to hide PowerShell commands in an image file (.png) and execute the code on a victim's system. In this particular case the PowerShell code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.","detection":"Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.","procedures":["[G1006] Earth Lusca: Earth Lusca has used steganography to hide shellcode in a BMP image file.","[S0495] RDAT: RDAT can also embed data within a BMP image prior to exfiltration.","[S0139] PowerDuke: PowerDuke uses steganography to hide backdoors in PNG files, which are also encrypted using the Tiny Encryption Algorithm (TEA).","[C0005] Operation Spalax: For Operation Spalax, the threat actors used packers that read pixel data from images contained in PE files' resource sections and build the next layer of execution from the data.","[G0067] APT37: APT37 uses steganography to send images to users that are embedded with shellcode.","[S0513] LiteDuke: LiteDuke has used image files to hide its loader component.","[S0470] BBK: BBK can extract a malicious Portable Executable (PE) from a photo.","[S0511] RegDuke: RegDuke can hide data in images, including use of the Least Significant Bit (LSB).","[S0471] build_downer: build_downer can extract malware from a downloaded JPEG.","[S0439] Okrum: Okrum's payload is encrypted and embedded within its loader, or within a legitimate PNG file.","[S0234] Bandook: Bandook has used .PNG images within a zip file to build the executable.","[G0127] TA551: TA551 has hidden encoded data for malware DLLs in a PNG.","[S0659] Diavol: Diavol has obfuscated its main code routines within bitmap images as part of its anti-analysis techniques.","[G0065] Leviathan: Leviathan has used steganography to hide stolen data inside other files stored on Github.","[S0458] Ramsay: Ramsay has PE data embedded within JPEG files contained within Word documents.","[S0644] ObliqueRAT: ObliqueRAT can hide its payload in BMP images hosted on compromised websites.","[S0483] IcedID: IcedID has embedded binaries within RC4 encrypted .png files.","[S1145] Pikabot: Pikabot loads a set of PNG images stored in the malware's resources section (RCDATA), each with an encrypted section containing portions of the core Pikabot core module. These sections are loaded and decrypted using a bitwise XOR operation with a hardcoded 32 bit key.","[S0469] ABK: ABK can extract a malicious Portable Executable (PE) from a photo.","[S0654] ProLock: ProLock can use .jpg and .bmp files to store its payload.","[G0069] MuddyWater: MuddyWater has stored obfuscated JavaScript code in an image file named temp.jpg.","[S0231] Invoke-PSImage: Invoke-PSImage can be used to embed a PowerShell script within the pixels of a PNG file.","[C0023] Operation Ghost: During Operation Ghost, APT29 used steganography to hide payloads inside valid images.","[S0565] Raindrop: Raindrop used steganography to locate the start of its encoded payload within legitimate 7-Zip code.","[S0473] Avenger: Avenger can extract backdoor malware from downloaded images.","[G0138] Andariel: Andariel has hidden malicious executables within PNG files.","[G0081] Tropic Trooper: Tropic Trooper has used JPG files with encrypted payloads to mask their backdoor routines and evade detection.","[S0518] PolyglotDuke: PolyglotDuke can use steganography to hide C2 information in images.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used steganography in multiple operations to conceal malicious payloads."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.004","technique_name":"Obfuscated Files or Information: Compile After Delivery","description":"Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as ilasm.exe, csc.exe, or GCC/MinGW. Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a Phishing. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.","detection":"Monitor the execution file paths and command-line arguments for common compilers, such as csc.exe and GCC/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and/or file write events. Look for non-native binary formats and cross-platform compiler and execution frameworks like Mono and determine if they have a legitimate purpose on the system. Typically these should only be used in specific and limited cases, like for software development.","procedures":["[G0047] Gamaredon Group: Gamaredon Group has compiled the source code for a downloader directly on the infected system using the built-in Microsoft.CSharp.CSharpCodeProvider class.","[S0633] Sliver: Sliver includes functionality to retrieve source code and compile locally prior to execution in victim environments.","[S0661] FoggyWeb: FoggyWeb can compile and execute source code sent to the compromised AD FS server via a specific HTTP POST.","[G0106] Rocke: Rocke has compiled malware, delivered to victims as .c files, with the GNU Compiler Collection (GCC).","[G0069] MuddyWater: MuddyWater has used the .NET csc.exe tool to compile executables from downloaded C# code.","[S0385] njRAT: njRAT has used AutoIt to compile the payload and main script into a single executable after delivery.","[S0348] Cardinal RAT: Cardinal RAT and its watchdog component are compiled and executed after being delivered to victims as embedded, uncompiled source code.","[S1099] Samurai: Samurai can compile and execute downloaded modules at runtime.","[G1041] Sea Turtle: Sea Turtle downloaded source code files from remote addresses then compiled them locally via GCC in victim environments.","[S0673] DarkWatchman: DarkWatchman has used the csc.exe tool to compile a C# executable."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.005","technique_name":"Obfuscated Files or Information: Indicator Removal from Tools","description":"Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems. A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.","detection":"The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.","procedures":["[S0237] GravityRAT: The author of GravityRAT submitted samples to VirusTotal for testing, showing that the author modified the code to try to hide the DDE object in a different part of the document.","[S0154] Cobalt Strike: Cobalt Strike includes a capability to modify the Beacon payload to eliminate known signatures or unpacking methods.","[G0040] Patchwork: Patchwork apparently altered NDiskMonitor samples by adding four bytes of random letters in a likely attempt to change the file hashes.","[S0194] PowerSploit: PowerSploit's Find-AVSignature AntivirusBypass module can be used to locate single byte anti-virus signatures.","[G0009] Deep Panda: Deep Panda has updated and modified its malware, resulting in different hash values that evade detection.","[G0093] GALLIUM: GALLIUM ensured each payload had a unique hash, including by using different types of packers.","[S0587] Penquin: Penquin can remove strings from binaries.","[C0014] Operation Wocao: During Operation Wocao, threat actors edited variable names within the Impacket suite to avoid automated detection.","[S0650] QakBot: QakBot can make small changes to itself in order to change its checksum and hash value.","[C0030] Triton Safety Instrumented System Attack: In the Triton Safety Instrumented System Attack, TEMP.Veles modified files based on the open-source project cryptcat in an apparent attempt to decrease anti-virus detection rates.","[S0579] Waterbear: Waterbear can scramble functions not to be executed again with random values.","[S0187] Daserf: Analysis of Daserf has shown that it regularly undergoes technical improvements to evade anti-virus detection.","[S0559] SUNBURST: SUNBURST source code used generic variable names and pre-obfuscated strings, and was likely sanitized of developer comments before being added to SUNSPOT.","[S0260] InvisiMole: InvisiMole has undergone regular technical improvements in an attempt to evade detection.","[G0049] OilRig: OilRig has tested malware samples to determine AV detection and subsequently modified the samples to ensure AV evasion.","[G0010] Turla: Based on comparison of Gazer versions, Turla made an effort to obfuscate strings in the malware that could be used as IoCs, including the mutex name and named pipe.","[G0022] APT3: APT3 has been known to remove indicators of compromise from tools."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.006","technique_name":"Obfuscated Files or Information: HTML Smuggling","description":"Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads. Adversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as text/plain and/or text/html. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. Deobfuscate/Decode Files or Information), potentially bypassing content filters. For example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as msSaveBlob.","detection":"Detection of HTML Smuggling is difficult as HTML5 and JavaScript attributes are used by legitimate services and applications. HTML Smuggling can be performed in many ways via JavaScript, developing rules for the different variants, with a combination of different encoding and/or encryption schemes, may be very challenging. Detecting specific JavaScript and/or HTML5 attribute strings such as Blob, msSaveOrOpenBlob, and/or download may be a good indicator of HTML Smuggling. These strings may also be used by legitimate services therefore it is possible to raise false positives. Consider monitoring files downloaded from the Internet, possibly by HTML Smuggling, for suspicious activities. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities.","procedures":["[S0650] QakBot: QakBot has been delivered in ZIP files via HTML smuggling.","[G0016] APT29: APT29 has embedded an ISO file within an HTML attachment that contained JavaScript code to initiate malware execution.","[S0634] EnvyScout: EnvyScout contains JavaScript code that can extract an encoded blob from its HTML body and write it to disk."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.007","technique_name":"Obfuscated Files or Information: Dynamic API Resolution","description":"Adversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses various Native API functions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts. API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions. To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar to Software Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime. Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such as `GetProcAddress()` and `LoadLibrary()`. These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms of Deobfuscate/Decode Files or Information during execution).","detection":null,"procedures":["[S1160] Latrodectus: Latrodectus can resolve Windows APIs dynamically by hash.","[S0534] Bazar: Bazar can hash then resolve API calls at runtime.","[S1053] AvosLocker: AvosLocker has used obfuscated API calls that are retrieved by their checksums.","[S1148] Raccoon Stealer: Raccoon Stealer dynamically links key WinApi functions during execution.","[G0032] Lazarus Group: Lazarus Group has used a custom hashing method to resolve APIs used in shellcode.","[S0147] Pteranodon: Pteranodon can use a dynamic Windows hashing algorithm to map API components.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can use `LoadLibrary` and `GetProcAddress` to resolve Windows API function strings at run time.","[S1063] Brute Ratel C4: Brute Ratel C4 can call and dynamically resolve hashed APIs.","[S1099] Samurai: Samurai can encrypt API name strings with an XOR-based algorithm."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.008","technique_name":"Obfuscated Files or Information: Stripped Payloads","description":"Adversaries may attempt to make a payload difficult to analyze by removing symbols, strings, and other human readable information. Scripts and executables may contain variables names and other strings that help developers document code functionality. Symbols are often created by an operating system’s `linker` when executable payloads are compiled. Reverse engineers use these symbols and strings to analyze code and to identify functionality in payloads. Adversaries may use stripped payloads in order to make malware analysis more difficult. For example, compilers and other tools may provide features to remove or obfuscate strings and symbols. Adversaries have also used stripped payload formats, such as run-only AppleScripts, a compiled and stripped version of AppleScript, to evade detection and analysis. The lack of human-readable information may directly hinder detection and analysis of payloads.","detection":null,"procedures":["[S1048] macOS.OSAMiner: macOS.OSAMiner has used run-only Applescripts, a compiled and stripped version of AppleScript, to remove human readable indicators to evade detection.","[S1153] Cuckoo Stealer: Cuckoo Stealer is a stripped binary payload."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.009","technique_name":"Obfuscated Files or Information: Embedded Payloads","description":"Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets. Adversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats. For example, adversaries have been observed embedding payloads within or as an overlay of an otherwise benign binary. Adversaries have also been observed nesting payloads (such as executables and run-only scripts) inside a file of the same format. Embedded content may also be used as Process Injection payloads used to infect benign system processes. These embedded then injected payloads may be used as part of the modules of malware designed to provide specific features such as encrypting C2 communications in support of an orchestrator module. For example, an embedded module may be injected into default browsers, allowing adversaries to then communicate via the network.","detection":null,"procedures":["[S1137] Moneybird: Moneybird contains a configuration blob embedded in the malware itself.","[S1052] DEADEYE: The DEADEYE.EMBED variant of DEADEYE has the ability to embed payloads inside of a compiled binary.","[G0032] Lazarus Group: Lazarus Group has distributed malicious payloads embedded in PNG files.","[S1081] BADHATCH: BADHATCH has an embedded second stage DLL payload within the first stage of the malware.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can extract RC4 encrypted embedded payloads for privilege escalation.","[S1134] DEADWOOD: DEADWOOD contains an embedded, AES-encrypted payload labeled METADATA that provides configuration information for follow-on execution.","[S0367] Emotet: Emotet has dropped an embedded executable at `%Temp%\\setup.exe`. Additionally, Emotet may embed entire code into other files.","[S1048] macOS.OSAMiner: macOS.OSAMiner has embedded Stripped Payloads within another run-only Stripped Payloads.","[S0567] Dtrack: Dtrack has used a dropper that embeds an encrypted payload as extra data.","[S0483] IcedID: IcedID has embedded malicious functionality in a legitimate DLL file.","[S0457] Netwalker: Netwalker's DLL has been embedded within the PowerShell script in hex format.","[S1135] MultiLayer Wiper: MultiLayer Wiper contains two binaries in its resources section, MultiList and MultiWip. MultiLayer Wiper drops and executes each of these items when run, then deletes them after execution.","[S0649] SMOKEDHAM: The SMOKEDHAM source code is embedded in the dropper as an encrypted string.","[S1145] Pikabot: Pikabot further decrypts information embedded via steganography using AES-CBC with the same 32 bit key as initial XOR operations combined with the first 16 bytes of the encrypted data as an initialization vector. Other Pikabot variants include encrypted, chunked sections of the stage 2 payload in the initial loader .text section before decrypting and assembling these during execution.","[G1037] TA577: TA577 has used LNK files to execute embedded DLLs.","[S0126] ComRAT: ComRAT has embedded a XOR encrypted communications module inside the orchestrator module.","[S1158] DUSTPAN: DUSTPAN decrypts and executes an embedded payload.","[S1159] DUSTTRAP: DUSTTRAP contains additional embedded DLLs and configuration files that are loaded into memory during execution.","[S0231] Invoke-PSImage: Invoke-PSImage can be used to embed payload data within a new image file.","[C0021] C0021: For C0021, the threat actors embedded a base64-encoded payload within a LNK file.","[G1036] Moonstone Sleet: Moonstone Sleet embedded payloads in trojanized software for follow-on execution.","[S0022] Uroburos: The Uroburos Queue file contains embedded executable files along with key material, communication channels, and modes of operation."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.010","technique_name":"Obfuscated Files or Information: Command Obfuscation","description":"Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., Phishing and Drive-by Compromise) or interactively via Command and Scripting Interpreter. For example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing, `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality. Many languages support built-in obfuscation in the form of base64 or URL encoding. Adversaries may also manually implement command obfuscation via string splitting (`“Wor”+“d.Application”`), order and casing of characters (`rev Invoke-Obfuscation and Invoke-DOSfucation have also been used to obfuscate commands.","detection":null,"procedures":["[G0143] Aquatic Panda: Aquatic Panda has encoded PowerShell commands in Base64.","[S1085] Sardonic: Sardonic PowerShell scripts can be encrypted with RC4 and compressed using Gzip.","[G0034] Sandworm Team: Sandworm Team has used ROT13 encoding, AES encryption and compression with the zlib library for their Python-based backdoor.","[G1001] HEXANE: HEXANE has used Base64-encoded scripts.","[S0428] PoetRAT: PoetRAT has `pyminifier` to obfuscate scripts.","[G0077] Leafminer: Leafminer obfuscated scripts that were used on victim machines.","[G0080] Cobalt Group: Cobalt Group obfuscated several scriptlets and code used on the victim’s machine, including through use of XOR and RC4.","[S0451] LoudMiner: LoudMiner has obfuscated various scripts.","[S0363] Empire: Empire has the ability to obfuscate commands using Invoke-Obfuscation.","[S1022] IceApple: IceApple can use Base64 and \"junk\" JavaScript code to obfuscate information.","[S0685] PowerPunch: PowerPunch can use Base64-encoded scripts.","[G0117] Fox Kitten: Fox Kitten has base64 encoded scripts to avoid detection.","[C0001] Frankenstein: During Frankenstein, the threat actors ran encoded commands from the command line.","[G0037] FIN6: FIN6 has used encoded PowerShell commands.","[C0021] C0021: During C0021, the threat actors used encoded PowerShell commands.","[S1081] BADHATCH: BADHATCH malicious PowerShell commands can be encoded with base64.","[S0354] Denis: Denis has encoded its PowerShell commands in Base64.","[S0589] Sibot: Sibot has obfuscated scripts used in execution.","[G0050] APT32: APT32 has used the `Invoke-Obfuscation` framework to obfuscate their PowerShell.","[S0126] ComRAT: ComRAT has used encryption and base64 to obfuscate its orchestrator code in the Registry. ComRAT has also used encoded PowerShell scripts.","[S0194] PowerSploit: PowerSploit contains a collection of ScriptModification modules that compress and encode scripts and payloads.","[G1040] Play: Play has used Base64-encoded PowerShell scripts for post exploit activities on compromised hosts.","[S0650] QakBot: QakBot can use obfuscated and encoded scripts.","[G0059] Magic Hound: Magic Hound has used base64-encoded commands.","[G0102] Wizard Spider: Wizard Spider used Base64 encoding to obfuscate an Empire service and PowerShell commands.","[G0069] MuddyWater: MuddyWater has used Daniel Bohannon’s Invoke-Obfuscation framework and obfuscated PowerShell scripts. The group has also used other obfuscation methods, including Base64 obfuscation of VBScripts and PowerShell commands.","[G0040] Patchwork: Patchwork has obfuscated a script with Crypto Obfuscator.","[S0457] Netwalker: Netwalker's PowerShell script has been obfuscated with multiple layers including base64 and hexadecimal encoding and XOR-encryption, as well as obfuscated PowerShell functions and variables.","[S0673] DarkWatchman: DarkWatchman has used Base64 to encode PowerShell commands.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors executed an encoded VBScript file.","[G0114] Chimera: Chimera has encoded PowerShell commands.","[G0091] Silence: Silence has used environment variable string substitution for obfuscation.","[S0269] QUADAGENT: QUADAGENT was likely obfuscated using `Invoke-Obfuscation`.","[S0386] Ursnif: Ursnif droppers execute base64 encoded PowerShell commands.","[S0270] RogueRobin: The PowerShell script with the RogueRobin payload was obfuscated using the COMPRESS technique in `Invoke-Obfuscation`.","[G0061] FIN8: FIN8 has used environment variables and standard input (stdin) to obfuscate command-line arguments. FIN8 also obfuscates malicious macros delivered as payloads.","[S0462] CARROTBAT: CARROTBAT has the ability to execute obfuscated commands on the infected host.","[C0018] C0018: During C0018, the threat actors used Base64 to encode their PowerShell scripts.","[G0046] FIN7: FIN7 has used fragmented strings, environment variables, standard input (stdin), and native character-replacement functionalities to obfuscate commands.","[G0127] TA551: TA551 has used obfuscated variable names in a JavaScript configuration file.","[S0367] Emotet: Emotet has obfuscated macros within malicious documents to hide the URLs hosting the malware, CMD.exe arguments, and PowerShell scripts.","[G0121] Sidewinder: Sidewinder has used base64 encoding for scripts.","[S0277] FruitFly: FruitFly executes and stores obfuscated Perl scripts.","[G0092] TA505: TA505 has used base64 encoded PowerShell commands.","[G0010] Turla: Turla has used encryption (including salted 3DES via PowerSploit's Out-EncryptedScript.ps1), random variable names, and base64 encoding to obfuscate PowerShell commands and payloads.","[S0390] SQLRat: SQLRat has used a character insertion obfuscation technique, making the script appear to contain Chinese characters.","[S0450] SHARPSTATS: SHARPSTATS has used base64 encoding and XOR to obfuscate PowerShell scripts.","[S0475] BackConfig: BackConfig has used compressed and decimal encoded VBS scripts.","[G0115] GOLD SOUTHFIELD: GOLD SOUTHFIELD has executed base64 encoded PowerShell scripts on compromised hosts.","[S0223] POWERSTATS: POWERSTATS uses character replacement, PowerShell environment variables, and XOR encoding to obfuscate code. POWERSTATS's backdoor code is a multi-layer obfuscated, encoded, and compressed blob. POWERSTATS has used PowerShell code with custom string obfuscation","[S0330] Zeus Panda: Zeus Panda obfuscates the macro commands in its initial payload.","[C0014] Operation Wocao: During Operation Wocao, threat actors executed PowerShell commands which were encoded or compressed using Base64, zlib, and XOR.","[G0140] LazyScripter: LazyScripter has leveraged the BatchEncryption tool to perform advanced batch script obfuscation and encoding techniques.","[S0373] Astaroth: Astaroth has obfuscated and randomized parts of the JScript code it is initiating.","[S0492] CookieMiner: CookieMiner has used base64 encoding to obfuscate scripts on the system.","[S0669] KOCTOPUS: KOCTOPUS has obfuscated scripts with the BatchEncryption tool.","[G0047] Gamaredon Group: Gamaredon Group has used obfuscated or encrypted scripts.","[G0073] APT19: APT19 used Base64 to obfuscate executed commands.","[S0409] Machete: Machete has used pyobfuscate, zlib compression, and base64 encoding for obfuscation. Machete has also used some visual obfuscation techniques by naming variables as combinations of letters to hinder analysis."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.011","technique_name":"Obfuscated Files or Information: Fileless Storage","description":"Adversaries may store data in \"fileless\" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage in Windows systems include the Windows Registry, event logs, or WMI repository. In Linux systems, shared memory directories such as `/dev/shm`, `/run/shm`, `/var/run`, and `/var/lock` may also be considered fileless storage, as files written to these directories are mapped directly to RAM and not stored on the disk. Similar to fileless in-memory behaviors such as Reflective Code Loading and Process Injection, fileless data storage may remain undetected by anti-virus and other endpoint security tools that can only access specific file formats from disk storage. Leveraging fileless storage may also allow adversaries to bypass the protections offered by read-only file systems in Linux. Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode (potentially being used as part of Persistence) and collected data not yet exfiltrated from the victim (e.g., Local Data Staging). Adversaries also often encrypt, encode, splice, or otherwise obfuscate this fileless data when stored. Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI (e.g., `%SystemRoot%\\System32\\Wbem\\Repository`) or Registry (e.g., `%SystemRoot%\\System32\\Config`) physical files.","detection":null,"procedures":["[S0673] DarkWatchman: DarkWatchman can store configuration strings, keylogger, and output of components in the Registry.","[S0518] PolyglotDuke: PolyglotDuke can store encrypted JSON configuration files in the Registry.","[S0650] QakBot: QakBot can store its configuration information in a randomly named subkey under HKCU\\Software\\Microsoft.","[S0263] TYPEFRAME: TYPEFRAME can install and store encrypted configuration data under the Registry key HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\laxhost.dll and HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PrintConfigs.","[S0126] ComRAT: ComRAT has stored encrypted orchestrator code and payloads in the Registry.","[S0596] ShadowPad: ShadowPad maintains a configuration block and virtual file system in the Registry.","[S0666] Gelsemium: Gelsemium can store its components in the Registry.","[S0022] Uroburos: Uroburos can store configuration information for the kernel driver and kernel driver loader components in an encrypted blob typically found at `HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds.`","[S0663] SysUpdate: SysUpdate can store its encoded configuration file within Software\\Classes\\scConfig in either HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER.","[S0343] Exaramel for Windows: Exaramel for Windows stores the backdoor's configuration in the Registry in XML format.","[S0531] Grandoreiro: Grandoreiro can store its configuration in the Registry at `HKCU\\Software\\` under frequently changing names including %USERNAME% and ToolTech-RM.","[S0198] NETWIRE: NETWIRE can store its configuration information in the Registry under `HKCU:\\Software\\Netwire`.","[S0517] Pillowmint: Pillowmint has stored a compressed payload in the Registry key HKLM\\SOFTWARE\\Microsoft\\DRM.","[S0668] TinyTurla: TinyTurla can save its configuration parameters in the Registry.","[S0023] CHOPSTICK: CHOPSTICK may store RC4 encrypted configuration information in the Windows Registry.","[G0050] APT32: APT32's backdoor has stored its configuration in a registry key.","[S1145] Pikabot: Some versions of Pikabot build the final PE payload in memory to avoid writing contents to disk on the executing machine.","[S0269] QUADAGENT: QUADAGENT stores a session identifier unique to the compromised system as well as a pre-shared key used for encrypting and decrypting C2 communications within a Registry key (such as `HKCU\\Office365DCOMCheck`) in the `HKCU` hive.","[S0511] RegDuke: RegDuke can store its encryption key in the Registry.","[S0665] ThreatNeedle: ThreatNeedle can save its configuration data as a RC4-encrypted Registry key under `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\GameCon`.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors stroed payloads in Windows CLFS (Common Log File System) transactional logs.","[S0476] Valak: Valak has the ability to store information regarding the C2 server and downloads in the Registry key HKCU\\Software\\ApplicationContainer\\Appsw64.","[S0180] Volgmer: Volgmer stores an encoded configuration file in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security.","[S0631] Chaes: Some versions of Chaes stored its instructions (otherwise in a `instructions.ini` file) in the Registry.","[G0010] Turla: Turla has used the Registry to store encrypted and encoded payloads.","[S0662] RCSession: RCSession can store its obfuscated configuration file in the Registry under `HKLM\\SOFTWARE\\Plus` or `HKCU\\SOFTWARE\\Plus`.","[S0589] Sibot: Sibot has installed a second-stage script in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\sibot registry key.","[S0501] PipeMon: PipeMon has stored its encrypted payload in the Registry under `HKLM\\SOFTWARE\\Microsoft\\Print\\Components\\`.","[S0496] REvil: REvil can save encryption parameters and system information in the Registry.","[S0256] Mosquito: Mosquito stores configuration values under the Registry key HKCU\\Software\\Microsoft\\[dllname]."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.012","technique_name":"Obfuscated Files or Information: LNK Icon Smuggling","description":"Adversaries may smuggle commands to download malicious payloads past content filters by hiding them within otherwise seemingly benign windows shortcut files. Windows shortcut files (.LNK) include many metadata fields, including an icon location field (also known as the `IconEnvironmentDataBlock`) designed to specify the path to an icon file that is to be displayed for the LNK file within a host directory. Adversaries may abuse this LNK metadata to download malicious payloads. For example, adversaries have been observed using LNK files as phishing payloads to deliver malware. Once invoked (e.g., Malicious File), payloads referenced via external URLs within the LNK icon location field may be downloaded. These files may also then be invoked by Command and Scripting Interpreter/System Binary Proxy Execution arguments within the target path field of the LNK. LNK Icon Smuggling may also be utilized post compromise, such as malicious scripts executing an LNK on an infected host to download additional malicious payloads.","detection":null,"procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.013","technique_name":"Obfuscated Files or Information: Encrypted/Encoded File","description":"Adversaries may encrypt or encode files to obfuscate strings, bytes, and other specific patterns to impede detection. Encrypting and/or encoding file content aims to conceal malicious artifacts within a file used in an intrusion. Many other techniques, such as Software Packing, Steganography, and Embedded Payloads, share this same broad objective. Encrypting and/or encoding files could lead to a lapse in detection of static signatures, only for this malicious content to be revealed (i.e., Deobfuscate/Decode Files or Information) at the time of execution/use. This type of file obfuscation can be applied to many file artifacts present on victim hosts, such as malware log/configuration and payload files. Files can be encrypted with a hardcoded or user-supplied key, as well as otherwise obfuscated using standard encoding schemes such as Base64. The entire content of a file may be obfuscated, or just specific functions or values (such as C2 addresses). Encryption and encoding may also be applied in redundant layers for additional protection. For example, adversaries may abuse password-protected Word documents or self-extracting (SFX) archives as a method of encrypting/encoding a file such as a Phishing payload. These files typically function by attaching the intended archived content to a decompressor stub that is executed when the file is invoked (e.g., User Execution). Adversaries may also abuse file-specific as well as custom encoding schemes. For example, Byte Order Mark (BOM) headers in text files may be abused to manipulate and obfuscate file content until Command and Scripting Interpreter execution.","detection":null,"procedures":["[S1052] DEADEYE: DEADEYE has encrypted its payload.","[S0678] Torisma: Torisma has been Base64 encoded and AES encrypted.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D encrypts its strings in RSA256 and encodes them in a custom base64 scheme and XOR.","[G0100] Inception: Inception has encrypted malware payloads dropped on victim machines with AES and RC4 encryption.","[S0136] USBStealer: Most strings in USBStealer are encrypted using 3DES and XOR and reversed.","[S0082] Emissary: Variants of Emissary encrypt payloads using various XOR ciphers, as well as a custom algorithm that uses the \"srand\" and \"rand\" functions.","[S1153] Cuckoo Stealer: Cuckoo Stealer strings are XOR-encrypted.","[S0487] Kessel: Kessel's configuration is hardcoded and RC4 encrypted within the binary.","[S0565] Raindrop: Raindrop encrypted its payload using a simple XOR algorithm with a single-byte key.","[S0433] Rifdoor: Rifdoor has encrypted strings with a single byte XOR algorithm.","[G0070] Dark Caracal: Dark Caracal has obfuscated strings in Bandook by base64 encoding, and then encrypting them.","[G0066] Elderwood: Elderwood has encrypted documents and malicious executables.","[S1019] Shark: Shark can use encrypted and encoded files for C2 configuration.","[S0386] Ursnif: Ursnif has used an XOR-based algorithm to encrypt Tor clients dropped to disk. Ursnif droppers have also been delivered as password-protected zip files that execute base64 encoded PowerShell commands.","[S1150] ROADSWEEP: The ROADSWEEP binary contains RC4 encrypted embedded scripts.","[G0012] Darkhotel: Darkhotel has obfuscated code using RC4, XOR, and RSA.","[C0045] ShadowRay: During ShadowRay, threat actors used Base64-encrypted Python code to evade detection.","[G0134] Transparent Tribe: Transparent Tribe has dropped encoded executables on compromised hosts.","[S1212] RansomHub: RansomHub has an encrypted configuration file.","[S1100] Ninja: The Ninja payload is XOR encrypted and compressed. Ninja has also XORed its configuration data with a constant value of `0xAA`.","[G0007] APT28: APT28 encrypted a .dll payload using RTL and a custom encryption algorithm. APT28 has also obfuscated payloads with base64, XOR, and RC4.","[S0391] HAWKBALL: HAWKBALL has encrypted the payload with an XOR-based algorithm.","[S0468] Skidmap: Skidmap has encrypted it's main payload using 3DES.","[S0373] Astaroth: Astaroth has used an XOR-based algorithm to encrypt payloads twice with different keys.","[G0026] APT18: APT18 obfuscates strings in the payload.","[S1051] KEYPLUG: KEYPLUG can use a hardcoded one-byte XOR encoded configuration file.","[S0074] Sakula: Sakula uses single-byte XOR obfuscation to obfuscate many of its files.","[S0672] Zox: Zox has been encoded with Base64.","[S0170] Helminth: The Helminth config file is encrypted with RC4.","[S0370] SamSam: SamSam has been seen using AES or DES to encrypt payloads and payload components.","[S0113] Prikormka: Some resources in Prikormka are encrypted with a simple XOR operation or encoded with Base64.","[S0228] NanHaiShu: NanHaiShu encodes files in Base64.","[S1059] metaMain: metaMain's module file has been encrypted via XOR.","[G0065] Leviathan: Leviathan has obfuscated code using base64.","[S0534] Bazar: Bazar has used XOR, RSA2, and RC4 encrypted files.","[S1202] LockBit 3.0: The LockBit 3.0 payload includes an encrypted main component.","[S0451] LoudMiner: LoudMiner has encrypted DMG files.","[G0121] Sidewinder: Sidewinder has used base64 encoding and ECDH-P256 encryption for payloads.","[S0657] BLUELIGHT: BLUELIGHT has a XOR-encoded payload.","[S0501] PipeMon: PipeMon modules are stored encrypted on disk.","[S1065] Woody RAT: Woody RAT has used Base64 encoded strings and scripts.","[S1033] DCSrv: DCSrv's configuration is encrypted.","[G0087] APT39: APT39 has used malware to drop encrypted CAB files.","[S0237] GravityRAT: GravityRAT supports file encryption (AES with the key \"lolomycin2017\").","[S0455] Metamorfo: Metamorfo has encrypted payloads and strings.","[G0032] Lazarus Group: Lazarus Group has used multiple types of encryption and encoding for their payloads, including AES, Caracachs, RC4, XOR, Base64, and other tricks such as creating aliases in code for Native API function names.","[S1207] XLoader: XLoader features encrypted functions using the RC4 algorithm and bytecode operations.","[G1031] Saint Bear: Saint Bear initial payloads included encoded follow-on payloads located in the resources file of the first-stage loader.","[G0064] APT33: APT33 has used base64 to encode payloads.","[S1210] Sagerunex: Sagerunex can be passed a reference to an XOR-encrypted configuration file at runtime.","[S1183] StrelaStealer: StrelaStealer uses XOR-encoded strings to obfuscate items.","[C0002] Night Dragon: During Night Dragon, threat actors used a DLL that included an XOR-encoded section.","[S0395] LightNeuron: LightNeuron encrypts its configuration files with AES-256.","[S1014] DanBot: DanBot can Base64 encode its payload.","[S0267] FELIXROOT: FELIXROOT encrypts strings in the backdoor using a custom XOR algorithm.","[S0125] Remsec: Some data in Remsec is encrypted using RC5 in CBC mode, AES-CBC with a hardcoded key, RC4, or Salsa20. Some data is also base64-encoded.","[S0695] Donut: Donut can generate encrypted, compressed/encoded, or otherwise obfuscated code modules.","[S1124] SocGholish: SocGholish has single or double Base-64 encoded references to its second-stage server URLs.","[S1159] DUSTTRAP: DUSTTRAP begins with an initial launcher that decrypts an AES-128-CFB encrypted file on disk and executes it in memory.","[C0006] Operation Honeybee: During Operation Honeybee, the threat actors used Base64 to encode files with a custom key.","[S0466] WindTail: WindTail can be delivered as a compressed, encrypted, and encoded payload.","[S0531] Grandoreiro: The Grandoreiro payload has been delivered encrypted with a custom XOR-based algorithm and also as a base64-encoded ZIP file.","[S1015] Milan: Milan can encode files containing information about the targeted system.","[S0520] BLINDINGCAN: BLINDINGCAN has obfuscated code using Base64 encoding.","[S0356] KONNI: KONNI is heavily obfuscated and includes encrypted configuration files.","[S0131] TINYTYPHON: TINYTYPHON has used XOR with 0x90 to obfuscate its configuration file.","[G1002] BITTER: BITTER has used a RAR SFX dropper to deliver malware.","[S0689] WhisperGate: WhisperGate can Base64 encode strings, store downloaded files in reverse byte order, and use the Eazfuscator tool to obfuscate its third stage.","[S1013] ZxxZ: ZxxZ has been encoded to avoid detection from static analysis tools.","[S1050] PcShare: PcShare has been encrypted with XOR using different 32-long Base16 strings.","[S1111] DarkGate: DarkGate drops an encrypted PE file, pe.bin, and decrypts it during installation. DarkGate also uses custom base64 encoding schemas in later variations to obfuscate payloads.","[S0172] Reaver: Reaver encrypts some of its files with XOR.","[S0415] BOOSTWRITE: BOOSTWRITE has encoded its payloads using a ChaCha stream cipher with a 256-bit key and 64-bit Initialization vector (IV) to evade detection.","[S0410] Fysbis: Fysbis has been encrypted using XOR and RC4.","[G0092] TA505: TA505 has password-protected malicious Word documents.","[S0603] Stuxnet: Stuxnet uses encrypted configuration blocks and writes encrypted files to disk.","[G0126] Higaisa: Higaisa used Base64 encoded compressed payloads.","[S0570] BitPaymer: BitPaymer has used RC4-encrypted strings and string hashes to avoid identifiable strings within the binary.","[S0236] Kwampirs: Kwampirs downloads additional files that are base64-encoded and encrypted with another cipher.","[S0375] Remexi: Remexi obfuscates its configuration data with XOR.","[S0263] TYPEFRAME: APIs and strings in some TYPEFRAME variants are RC4 encrypted. Another variant is encoded with XOR.","[S1169] Mango: Mango contains a series of base64 encoded substrings.","[S0661] FoggyWeb: FoggyWeb has been XOR-encoded.","[G0073] APT19: APT19 used Base64 to obfuscate payloads.","[S0491] StrongPity: StrongPity has used encrypted strings in its dropper component.","[S1185] LightSpy: LightSpy encrypts the C2 configuration file using AES with a static key, while the module `.dylib` files use a rolling one-byte encoding for obfuscation.","[G0117] Fox Kitten: Fox Kitten has base64 encoded payloads to avoid detection.","[S1182] MagicRAT: MagicRAT stores base64 encoded command and contorl URLs in a configuraiton file, with each URL prefixed with the value `LR02DPt22R`.","[S1154] VersaMem: VersaMem encrypted captured credentials with AES then Base64 encoded them before writing to local storage.","[S0268] Bisonal: Bisonal's DLL file and non-malicious decoy file are encrypted with RC4 and some function name strings are obfuscated.","[S1148] Raccoon Stealer: Raccoon Stealer uses RC4 encryption for strings and command and control addresses to evade static detection.","[G0027] Threat Group-3390: A Threat Group-3390 tool can encrypt payloads using XOR. Threat Group-3390 malware is also obfuscated using Metasploit’s shikata_ga_nai encoder.","[S0153] RedLeaves: A RedLeaves configuration file is encrypted with a simple XOR key, 0x53.","[S1164] UPSTYLE: UPSTYLE stores primary content as base64-encoded objects.","[S0383] FlawedGrace: FlawedGrace encrypts its C2 configuration files with AES in CBC mode.","[S0284] More_eggs: More_eggs's payload has been encrypted with a key that has the hostname and processor family information appended to the end.","[S0081] Elise: Elise encrypts several of its files, including configuration files.","[S0473] Avenger: Avenger has the ability to XOR encrypt files to be sent to C2.","[S0634] EnvyScout: EnvyScout can Base64 encode payloads.","[S0448] Rising Sun: Configuration data used by Rising Sun has been encrypted using an RC4 stream algorithm.","[S1142] LunarMail: LunarMail has used RC4 and AES to encrypt strings and its exfiltration configuration respectively.","[S1122] Mispadu: Mispadu uses a custom algorithm to obfuscate its internal strings and uses hardcoded keys. Mispadu also uses encoded configuration files and has encoded payloads using Base64.","[S0497] Dacls: Dacls can encrypt its configuration file with AES CBC.","[S0385] njRAT: njRAT has included a base64 encoded executable.","[S0585] Kerrdown: Kerrdown can encrypt, encode, and compress multiple layers of shellcode.","[G1018] TA2541: TA2541 has used compressed and char-encoded scripts in operations.","[S1132] IPsec Helper: IPsec Helper contains an embedded XML configuration file with an encrypted list of command and control servers. These are written to an external configuration file during execution.","[S1200] StealBit: StealBit stores obfuscated DLL file names in its executable.","[S1158] DUSTPAN: DUSTPAN decrypts an embedded payload.","[S0613] PS1: PS1 is distributed as a set of encrypted files and scripts.","[S0387] KeyBoy: In one version of KeyBoy, string obfuscation routines were used to hide many of the critical values referenced in the malware.","[S0629] RainyDay: RainyDay has downloaded as a XOR-encrypted payload.","[S0633] Sliver: Sliver can encrypt strings at compile time.","[S0579] Waterbear: Waterbear has used RC4 encrypted shellcode and encrypted functions.","[G1026] Malteiro: Malteiro has used scripts encoded in Base64 certificates to distribute malware to victims.","[S0430] Winnti for Linux: Winnti for Linux can encode its configuration file with single-byte XOR encoding.","[G0059] Magic Hound: Magic Hound malware has used base64-encoded files and has also encrypted embedded strings with AES.","[G1046] Storm-1811: Storm-1811 XOR encodes a Cobalt Strike installation payload in a DLL file that is decoded with a hardcoded key when called by a legitimate 7zip installation process.","[S0345] Seasalt: Seasalt obfuscates configuration data.","[S0380] StoneDrill: StoneDrill has obfuscated its module with an alphabet-based table or XOR encryption.","[S0483] IcedID: IcedID has utilzed encrypted binaries and base64 encoded strings.","[G0108] Blue Mockingbird: Blue Mockingbird has obfuscated the wallet address in the payload binary.","[S1134] DEADWOOD: DEADWOOD contains an embedded, AES-encrypted resource named METADATA that contains configuration information for follow-on execution.","[G0081] Tropic Trooper: Tropic Trooper has encrypted configuration files.","[S0663] SysUpdate: SysUpdate can encrypt and encode its configuration file.","[S0667] Chrommme: Chrommme can encrypt sections of its code to evade detection.","[S1141] LunarWeb: The LunarWeb install files have been encrypted with AES-256.","[S0438] Attor: Strings in Attor's components are encrypted with a XOR cipher, using a hardcoded key and the configuration data, log files and plugins are encrypted using a hybrid encryption scheme of Blowfish-OFB combined with RSA.","[S0496] REvil: REvil has used encrypted strings and configuration files.","[G0103] Mofang: Mofang has encrypted payloads before they are downloaded to victims.","[S0232] HOMEFRY: Some strings in HOMEFRY are obfuscated with XOR x56.","[S0226] Smoke Loader: Smoke Loader uses a simple one-byte XOR method to obfuscate values in the malware.","[S0456] Aria-body: Aria-body has used an encrypted configuration file for its loader.","[S0256] Mosquito: Mosquito’s installer is obfuscated with a custom crypter to obfuscate the installer.","[S0046] CozyCar: The payload of CozyCar is encrypted with simple XOR with a rotating key. The CozyCar configuration file has been encrypted with RC4 keys.","[S0388] YAHOYAH: YAHOYAH encrypts its configuration file using a simple algorithm.","[S0665] ThreatNeedle: ThreatNeedle has been compressed and obfuscated using RC4, AES, or XOR.","[C0040] APT41 DUST: APT41 DUST used encrypted payloads decrypted and executed in memory.","[G0107] Whitefly: Whitefly has encrypted the payload used for C2.","[G0045] menuPass: menuPass has encoded strings in its malware with base64 as well as with a simple, single-byte XOR obfuscation using key 0x40.","[S1180] BlackByte Ransomware: BlackByte Ransomware is distributed as an encrypted payload.","[S0574] BendyBear: BendyBear has encrypted payloads using RC4 and XOR.","[S1032] PyDCrypt: PyDCrypt has been compiled and encrypted with PyInstaller, specifically using the --key flag during the build phase.","[S0257] VERMIN: VERMIN is obfuscated using the obfuscation tool called ConfuserEx.","[C0047] RedDelta Modified PlugX Infection Chain Operations: Mustang Panda stored installation payloads as encrypted files in hidden folders during RedDelta Modified PlugX Infection Chain Operations.","[S0339] Micropsia: Micropsia obfuscates the configuration with a custom Base64 and XOR.","[C0016] Operation Dust Storm: During Operation Dust Storm, the threat actors encoded some payloads with a single-byte XOR, both skipping the key itself and zeroing in an attempt to avoid exposing the key; other payloads were Base64-encoded.","[S1020] Kevin: Kevin has Base64-encoded its configuration file.","[G1009] Moses Staff: Moses Staff has used obfuscated web shells in their operations.","[G0139] TeamTNT: TeamTNT has encrypted its binaries via AES and encoded files using Base64.","[S0044] JHUHUGIT: Many strings in JHUHUGIT are obfuscated with a XOR algorithm.","[C0042] Outer Space: During Outer Space, OilRig deployed VBS droppers with obfuscated strings.","[S0588] GoldMax: GoldMax has written AES-encrypted and Base64-encoded configuration files to disk.","[S1041] Chinoxy: Chinoxy has encrypted its configuration file.","[S0213] DOGCALL: DOGCALL is encrypted using single-byte XOR.","[S1027] Heyoka Backdoor: Heyoka Backdoor can encrypt its payload.","[G1013] Metador: Metador has encrypted their payloads.","[S0618] FIVEHANDS: The FIVEHANDS payload is encrypted with AES-128.","[S0330] Zeus Panda: Zeus Panda encrypts strings with XOR. Zeus Panda also encrypts all configuration and settings in AES and RC4.","[S1030] Squirrelwaffle: Squirrelwaffle has been obfuscated with a XOR-based algorithm.","[S0398] HyperBro: HyperBro can be delivered encrypted to a compromised host.","[S1037] STARWHALE: STARWHALE has been obfuscated with hex-encoded strings.","[S0431] HotCroissant: HotCroissant has encrypted strings with single-byte XOR and base64 encoded RC4.","[G0043] Group5: Group5 disguised its malicious binaries with several layers of obfuscation, including encrypting the files.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group encrypted malware such as DRATzarus with XOR and DLL files with base64.","[S1213] Lumma Stealer: Lumma Stealer has used AES-encrypted payloads contained within PowerShell scripts.","[S0526] KGH_SPY: KGH_SPY has used encrypted strings in its installer.","[S0578] SUPERNOVA: SUPERNOVA contained Base64-encoded strings.","[S0484] Carberp: Carberp has used XOR-based encryption to mask C2 server locations within the trojan.","[G0024] Putter Panda: Droppers used by Putter Panda use RC4 or a 16-byte XOR key consisting of the bytes 0xA0 – 0xAF to obfuscate payloads.","[S0367] Emotet: Emotet uses obfuscated URLs to download a ZIP file.","[S0374] SpeakUp: SpeakUp encodes its second-stage payload with Base64.","[G0049] OilRig: OilRig has encrypted and encoded data in its malware, including by using base64.","[S1060] Mafalda: Mafalda has been obfuscated and contains encrypted functions.","[S0087] Hi-Zor: Hi-Zor uses various XOR techniques to obfuscate its components.","[S0394] HiddenWasp: HiddenWasp encrypts its configuration and payload.","[S1160] Latrodectus: Latrodectus has used a pseudo random number generator (PRNG) algorithm and a rolling XOR key to obfuscate strings.","[S0493] GoldenSpy: GoldenSpy's uninstaller has base64-encoded its variables.","[S0011] Taidoor: Taidoor can use encrypted string blocks for obfuscation.","[S0612] WastedLocker: The WastedLocker payload includes encrypted strings stored within the .bss section of the binary file.","[C0005] Operation Spalax: For Operation Spalax, the threat actors used XOR-encrypted payloads.","[S0141] Winnti for Windows: Winnti for Windows has the ability to encrypt and compress its payload.","[S0658] XCSSET: Older XCSSET variants use `xxd` to encode modules. Later versions pass an `xxd` or `base64` encoded blob through multiple decoding stages to reconstruct the module name, AppleScript, or shell command. For example, the initial network request uses three layers of hex decoding before executing a curl command in a shell.","[S0401] Exaramel for Linux: Exaramel for Linux uses RC4 for encrypting the configuration.","[G0050] APT32: APT32 has performed code obfuscation, including encoding payloads using Base64 and using a framework called \"Dont-Kill-My-Cat (DKMC). APT32 also encrypts the library used for network exfiltration with AES-256 in CBC mode in their macOS backdoor.","[S0698] HermeticWizard: HermeticWizard has the ability to encrypt PE files with a reverse XOR loop.","[S0168] Gazer: Gazer logs its actions into files that are encrypted with 3DES. It also uses RSA to encrypt resources.","[C0029] Cutting Edge: During Cutting Edge, threat actors used a Base64-encoded Python script to write a patched version of the Ivanti Connect Secure `dsls` binary.","[S0601] Hildegard: Hildegard has encrypted an ELF file.","[S0180] Volgmer: A Volgmer variant is encoded using a simple XOR cipher.","[S1190] Kapeka: Kapeka utilizes AES-256 (CBC mode), XOR, and RSA-2048 encryption schemas for various configuration and other objects.","[S0581] IronNetInjector: IronNetInjector can obfuscate variable names, encrypt strings, as well as base64 encode and Rijndael encrypt payloads.","[S0266] TrickBot: TrickBot uses an AES CBC (256 bits) encryption algorithm for its loader and configuration files.","[S1113] RAPIDPULSE: RAPIDPULSE has the ability to RC4 encrypt and base64 encode decrypted files on compromised servers prior to writing them to stdout.","[S0022] Uroburos: Uroburos can use AES and CAST-128 encryption to obfuscate resources.","[S1044] FunnyDream: FunnyDream can Base64 encode its C2 address stored in a template binary with the `xyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_-` or `xyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_=` character sets.","[S0347] AuditCred: AuditCred encrypts the configuration.","[S0587] Penquin: Penquin has encrypted strings in the binary for obfuscation.","[G1036] Moonstone Sleet: Moonstone Sleet has used encrypted payloads within files for follow-on execution and defense evasion.","[S0342] GreyEnergy: GreyEnergy encrypts its configuration files with AES-256 and also encrypts its strings.","[S0462] CARROTBAT: CARROTBAT has the ability to download a base64 encoded payload.","[S0230] ZeroT: ZeroT has encrypted its payload with RC4.","[S0348] Cardinal RAT: Cardinal RAT encodes many of its artifacts and is encrypted (AES-128) when downloaded."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.014","technique_name":"Obfuscated Files or Information: Polymorphic Code","description":"Adversaries may utilize polymorphic code (also known as metamorphic or mutating code) to evade detection. Polymorphic code is a type of software capable of changing its runtime footprint during code execution. With each execution of the software, the code is mutated into a different version of itself that achieves the same purpose or objective as the original. This functionality enables the malware to evade traditional signature-based defenses, such as antivirus and antimalware tools. Other obfuscation techniques can be used in conjunction with polymorphic code to accomplish the intended effects, including using mutation engines to conduct actions such as Software Packing, Command Obfuscation, or Encrypted/Encoded File.","detection":null,"procedures":["[S0574] BendyBear: BendyBear changes its runtime footprint during code execution to evade signature-based defenses."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.015","technique_name":"Obfuscated Files or Information: Compression","description":"Adversaries may use compression to obfuscate their payloads or files. Compressed file formats such as ZIP, gzip, 7z, and RAR can compress and archive multiple files together to make it easier and faster to transfer files. In addition to compressing files, adversaries may also compress shellcode directly - for example, in order to store it in a Windows Registry key (i.e., Fileless Storage). In order to further evade detection, adversaries may combine multiple ZIP files into one archive. This process of concatenation creates an archive that appears to be a single archive but in fact contains the central directories of the embedded archives. Some ZIP readers, such as 7zip, may not be able to identify concatenated ZIP files and miss the presence of the malicious payload. File archives may be sent as one Spearphishing Attachment through email. Adversaries have sent malicious payloads as archived files to encourage the user to interact with and extract the malicious payload onto their system (i.e., Malicious File). However, some file compression tools, such as 7zip, can be used to produce self-extracting archives. Adversaries may send self-extracting archives to hide the functionality of their payload and launch it without requiring multiple actions from the user. Compression may be used in combination with Encrypted/Encoded File where compressed files are encrypted and password-protected.","detection":null,"procedures":["[S0453] Pony: Pony attachments have been delivered via compressed archive files.","[S0673] DarkWatchman: DarkWatchman has been delivered as compressed RAR payloads in ZIP files to victims.","[S0499] Hancitor: Hancitor has delivered compressed payloads in ZIP files to victims.","[S0148] RTM: RTM has been delivered to targets as various archive files including ZIP, 7-ZIP, and RAR.","[G0021] Molerats: Molerats has delivered compressed executables within ZIP files to victims.","[S1188] Line Runner: Line Runner uses a ZIP payload that is automatically extracted with its contents, a LUA script, executed for initial execution via CVE-2024-20359.","[G0027] Threat Group-3390: Threat Group-3390 malware is compressed with LZNT1 compression.","[S1050] PcShare: PcShare has been compressed with LZW algorithm.","[S0517] Pillowmint: Pillowmint has been compressed and stored within a registry key.","[S0466] WindTail: WindTail can be delivered as a compressed, encrypted, and encoded payload.","[S1183] StrelaStealer: StrelaStealer has been delivered via JScript files in a ZIP archive.","[S0559] SUNBURST: SUNBURST strings were compressed and encoded in Base64.","[S0665] ThreatNeedle: ThreatNeedle has been compressed and obfuscated.","[S1099] Samurai: Samurai can deliver its final payload as a compressed, encrypted and base64-encoded blob.","[S0141] Winnti for Windows: Winnti for Windows has the ability to encrypt and compress its payload.","[S0664] Pandora: Pandora has the ability to compress stings with QuickLZ.","[S1081] BADHATCH: BADHATCH can be compressed with the ApLib algorithm.","[G0126] Higaisa: Higaisa used Base64 encoded compressed payloads.","[S0697] HermeticWiper: HermeticWiper can compress 32-bit and 64-bit driver files with the Lempel-Ziv algorithm.","[S0444] ShimRat: ShimRat has been delivered as a package that includes compressed DLL and shellcode payloads within a .dat file.","[S0662] RCSession: RCSession can compress and obfuscate its strings to evade detection on a compromised host.","[S0585] Kerrdown: Kerrdown can encrypt, encode, and compress multiple layers of shellcode.","[S0695] Donut: Donut can generate encrypted, compressed/encoded, or otherwise obfuscated code modules.","[G1018] TA2541: TA2541 has used compressed and char-encoded scripts in operations.","[G0103] Mofang: Mofang has compressed the ShimRat executable within malicious email attachments.","[S1100] Ninja: Ninja has compressed its data with the LZSS algorithm.","[G0065] Leviathan: Leviathan has obfuscated code using gzip compression.","[S0666] Gelsemium: Gelsemium has the ability to compress its components.","[S1124] SocGholish: The SocGholish JavaScript payload has been delivered within a compressed ZIP archive."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.016","technique_name":"Obfuscated Files or Information: Junk Code Insertion","description":"Adversaries may use junk code / dead code to obfuscate a malware’s functionality. Junk code is code that either does not execute, or if it does execute, does not change the functionality of the code. Junk code makes analysis more difficult and time-consuming, as the analyst steps through non-functional code instead of analyzing the main code. It also may hinder detections that rely on static code analysis due to the use of benign functionality, especially when combined with Compression or Software Packing. No-Operation (NOP) instructions are an example of dead code commonly used in x86 assembly language. They are commonly used as the 0x90 opcode. When NOPs are added to malware, the disassembler may show the NOP instructions, leading to the analyst needing to step through them. The use of junk / dead code insertion is distinct from Binary Padding because the purpose is to obfuscate the functionality of the code, rather than simply to change the malware’s signature.","detection":null,"procedures":["[S0449] Maze: Maze has inserted large blocks of junk code, including some components to decrypt strings and other important information for later in the encryption process.","[S0117] XTunnel: A version of XTunnel introduced in July 2015 inserted junk code into the binary in a likely attempt to obfuscate it and bypass security products.","[S1183] StrelaStealer: StrelaStealer variants have included excessive mathematical functions padding the binary and slowing execution for anti-analysis and sandbox evasion purposes.","[G0046] FIN7: FIN7 has used random junk code to obfuscate malware code.","[G0047] Gamaredon Group: Gamaredon Group has obfuscated .NET executables by inserting junk code.","[S0248] yty: yty contains junk code in its binary, likely to confuse malware analysts.","[S0230] ZeroT: ZeroT has obfuscated DLLs and functions using dummy API calls inserted between real instructions.","[S0453] Pony: Pony obfuscates memory flow by adding junk instructions when executing to make analysis more difficult.","[S0370] SamSam: SamSam has used garbage code to pad some of its malware components.","[S0477] Goopy: Goopy's decrypter have been inflated with junk code in between legitimate API functions, and also included infinite loops to avoid analysis.","[S0612] WastedLocker: WastedLocker contains junk code to increase its entropy and hide the actual code.","[S0137] CORESHELL: CORESHELL contains unused machine instructions in a likely attempt to hinder analysis.","[S0182] FinFisher: FinFisher contains junk code in its functions in an effort to confuse disassembly programs.","[G0050] APT32: APT32 includes garbage code to mislead anti-malware software and researchers.","[G0129] Mustang Panda: Mustang Panda has used junk code within their DLL files to hinder analysis.","[S0666] Gelsemium: Gelsemium can use junk code to hide functions and evade detection.","[S0223] POWERSTATS: POWERSTATS has used useless code blocks to counter analysis.","[S0512] FatDuke: FatDuke has been packed with junk code and strings."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1027.017","technique_name":"Obfuscated Files or Information: SVG Smuggling","description":"Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign SVG files. SVGs, or Scalable Vector Graphics, are vector-based image files constructed using XML. As such, they can legitimately include `` tags that enable adversaries to include malicious JavaScript payloads. However, SVGs may appear less suspicious to users than other types of executable files, as they are often treated as image files. SVG smuggling can take a number of forms. For example, threat actors may include content that: * Assembles malicious payloads * Downloads malicious payloads * Redirects users to malicious websites * Displays interactive content to users, such as fake login forms and download buttons. SVG Smuggling may be used in conjunction with HTML Smuggling where an SVG with a malicious payload is included inside an HTML file. SVGs may also be included in other types of documents, such as PDFs.","detection":null,"procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1036.001","technique_name":"Masquerading: Invalid Code Signature","description":"Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files. Unlike Code Signing, this activity will not result in a valid signature.","detection":"Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment, look for invalid signatures as well as unusual certificate characteristics and outliers.","procedures":["[S0466] WindTail: WindTail has been incompletely signed with revoked certificates.","[S0128] BADNEWS: BADNEWS is sometimes signed with an invalid Authenticode certificate in an apparent effort to make it look more legitimate.","[S0019] Regin: Regin stage 1 modules for 64-bit systems have been found to be signed with fake certificates masquerading as originating from Microsoft Corporation and Broadcom Corporation.","[G0067] APT37: APT37 has signed its malware with an invalid digital certificates listed as “Tencent Technology (Shenzhen) Company Limited.”","[G0112] Windshift: Windshift has used revoked certificates to sign malware.","[S0198] NETWIRE: The NETWIRE client has been signed by fake and invalid digital certificates.","[S1050] PcShare: PcShare has used an invalid certificate in attempt to appear legitimate.","[S0666] Gelsemium: Gelsemium has used unverified signatures on malicious DLLs."],"tactics":"TA0005 - Defense Evasion"}