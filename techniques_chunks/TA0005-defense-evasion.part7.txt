{"technique_id":"T1553.006","technique_name":"Subvert Trust Controls: Code Signing Policy Modification","description":"Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS. Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions. Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory. Examples of commands that can modify the code signing policy of a system include bcdedit.exe -set TESTSIGNING ON on Windows and csrutil disable on macOS. Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts. To gain access to kernel memory to modify variables related to signature checks, such as modifying g_CiOptions to disable Driver Signature Enforcement, adversaries may conduct Exploitation for Privilege Escalation using a signed, but vulnerable driver.","detection":"Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as bcdedit.exe -set TESTSIGNING ON. Consider monitoring for modifications made to Registry keys associated with code signing policies, such as HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing. Modifications to the code signing policy of a system are likely to be rare.","procedures":["[G0087] APT39: APT39 has used malware to turn off the RequireSigned feature which ensures only signed DLLs can be run on Windows.","[S0089] BlackEnergy: BlackEnergy has enabled the TESTSIGNING boot configuration option to facilitate loading of a driver component.","[S0009] Hikit: Hikit has attempted to disable driver signing verification by tampering with several Registry keys prior to the loading of a rootkit driver component.","[S0664] Pandora: Pandora can use CVE-2017-15303 to disable Windows Driver Signature Enforcement (DSE) protection and load its driver.","[G0010] Turla: Turla has modified variables in kernel memory to turn off Driver Signature Enforcement after exploiting vulnerabilities that obtained kernel mode privileges."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.001","technique_name":"Modify Authentication Process: Domain Controller Authentication","description":"Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.","detection":"Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access).","procedures":["[G0114] Chimera: Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential.","[S0007] Skeleton Key: Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.002","technique_name":"Modify Authentication Process: Password Filter DLL","description":"Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.","detection":"Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.","procedures":["[S0125] Remsec: Remsec harvests plain-text credentials as a password filter registered on domain controllers.","[G0049] OilRig: OilRig has registered a password filter DLL in order to drop malware.","[G0041] Strider: Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.003","technique_name":"Modify Authentication Process: Pluggable Authentication Modules","description":"Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow. Adversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials. Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.","detection":"Monitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).","procedures":["[S0377] Ebury: Ebury can deactivate PAM modules to tamper with the sshd configuration.","[S0468] Skidmap: Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.004","technique_name":"Modify Authentication Process: Network Device Authentication","description":"Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices. Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password. The modification includes a specific password which is implanted in the operating system image via the patch. Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.","detection":"Consider verifying the checksum of the operating system file and verifying the image of the operating system in memory. Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.","procedures":["[S1104] SLOWPULSE: SLOWPULSE can modify LDAP and two factor authentication flows by inspecting login credentials and forcing successful authentication if the provided password matches a chosen backdoor password.","[S0519] SYNful Knock: SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.005","technique_name":"Modify Authentication Process: Reversible Encryption","description":"An adversary may abuse Active Directory authentication encryption properties to gain access to credentials on Windows systems. The AllowReversiblePasswordEncryption property specifies whether reversible password encryption for an account is enabled or disabled. By default this property is disabled (instead storing user credentials as the output of one-way hashing functions) and should not be enabled unless legacy or other software require it. If the property is enabled and/or a user changes their password after it is enabled, an adversary may be able to obtain the plaintext of passwords created/changed after the property was enabled. To decrypt the passwords, an adversary needs four components: 1. Encrypted password (G$RADIUSCHAP) from the Active Directory user-structure userParameters 2. 16 byte randomly-generated value (G$RADIUSCHAPKEY) also from userParameters 3. Global LSA secret (G$MSRADIUSCHAPKEY) 4. Static key hardcoded in the Remote Access Subauthentication DLL (RASSFM.DLL) With this information, an adversary may be able to reproduce the encryption key and subsequently decrypt the encrypted password value. An adversary may set this property at various scopes through Local Group Policy Editor, user properties, Fine-Grained Password Policy (FGPP), or via the ActiveDirectory PowerShell module. For example, an adversary may implement and apply a FGPP to users or groups if the Domain Functional Level is set to \"Windows Server 2008\" or higher. In PowerShell, an adversary may make associated changes to user settings using commands similar to Set-ADUser -AllowReversiblePasswordEncryption $true.","detection":"Monitor property changes in Group Policy: Computer Configuration\\Windows Settings\\Security Settings\\Account Policies\\Password Policy\\Store passwords using reversible encryption. By default, the property should be set to Disabled. Monitor command-line usage for -AllowReversiblePasswordEncryption $true or other actions that could be related to malicious tampering of user settings (i.e. Group Policy Modification). Furthermore, consider monitoring and/or blocking suspicious execution of Active Directory PowerShell modules, such as Set-ADUser and Set-ADAccountControl, that change account configurations. Monitor Fine-Grained Password Policies and regularly audit user accounts and group settings.","procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.006","technique_name":"Modify Authentication Process: Multi-Factor Authentication","description":"Adversaries may disable or modify multi-factor authentication (MFA) mechanisms to enable persistent access to compromised accounts. Once adversaries have gained access to a network by either compromising an account lacking MFA or by employing an MFA bypass method such as Multi-Factor Authentication Request Generation, adversaries may leverage their access to modify or completely disable MFA defenses. This can be accomplished by abusing legitimate features, such as excluding users from Azure AD Conditional Access Policies, registering a new yet vulnerable/adversary-controlled MFA method, or by manually patching MFA programs and configuration files to bypass expected functionality. For example, modifying the Windows hosts file (`C:\\windows\\system32\\drivers\\etc\\hosts`) to redirect MFA calls to localhost instead of an MFA server may cause the MFA process to fail. If a \"fail open\" policy is in place, any otherwise successful authentication attempt may be granted access without enforcing MFA. Depending on the scope, goals, and privileges of the adversary, MFA defenses may be disabled for individual accounts or for all accounts tied to a larger group, such as all domain accounts in a victim's network environment.","detection":null,"procedures":["[G1015] Scattered Spider: After compromising user accounts, Scattered Spider registers their own MFA tokens.","[S1104] SLOWPULSE: SLOWPULSE can insert malicious logic to bypass RADIUS and ACE two factor authentication (2FA) flows if a designated attacker-supplied password is provided.","[S0677] AADInternals: The AADInternals `Set-AADIntUserMFA` command can be used to disable MFA for a specified user."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.007","technique_name":"Modify Authentication Process: Hybrid Identity","description":"Adversaries may patch, modify, or otherwise backdoor cloud authentication processes that are tied to on-premises user identities in order to bypass typical authentication mechanisms, access credentials, and enable persistent access to accounts. Many organizations maintain hybrid user and device identities that are shared between on-premises and cloud-based environments. These can be maintained in a number of ways. For example, Microsoft Entra ID includes three options for synchronizing identities between Active Directory and Entra ID: * Password Hash Synchronization (PHS), in which a privileged on-premises account synchronizes user password hashes between Active Directory and Entra ID, allowing authentication to Entra ID to take place entirely in the cloud * Pass Through Authentication (PTA), in which Entra ID authentication attempts are forwarded to an on-premises PTA agent, which validates the credentials against Active Directory * Active Directory Federation Services (AD FS), in which a trust relationship is established between Active Directory and Entra ID AD FS can also be used with other SaaS and cloud platforms such as AWS and GCP, which will hand off the authentication process to AD FS and receive a token containing the hybrid users’ identity and privileges. By modifying authentication processes tied to hybrid identities, an adversary may be able to establish persistent privileged access to cloud resources. For example, adversaries who compromise an on-premises server running a PTA agent may inject a malicious DLL into the `AzureADConnectAuthenticationAgentService` process that authorizes all attempts to authenticate to Entra ID, as well as records user credentials. In environments using AD FS, an adversary may edit the `Microsoft.IdentityServer.Servicehost` configuration file to load a malicious DLL that generates authentication tokens for any user with any set of claims, thereby bypassing multi-factor authentication and defined AD FS policies. In some cases, adversaries may be able to modify the hybrid identity authentication process from the cloud. For example, adversaries who compromise a Global Administrator account in an Entra ID tenant may be able to register a new PTA agent via the web console, similarly allowing them to harvest credentials and log into the Entra ID environment as any user.","detection":null,"procedures":["[S0677] AADInternals: AADInternals can inject a malicious DLL (`PTASpy`) into the `AzureADConnectAuthenticationAgentService` to backdoor Azure AD Pass-Through Authentication.","[G0016] APT29: APT29 has edited the `Microsoft.IdentityServer.Servicehost.exe.config` file to load a malicious DLL into the AD FS process, thereby enabling persistent access to any service federated with AD FS for a user with a specified User Principal Name."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.008","technique_name":"Modify Authentication Process: Network Provider DLL","description":"Adversaries may register malicious network provider dynamic link libraries (DLLs) to capture cleartext user credentials during the authentication process. Network provider DLLs allow Windows to interface with specific network protocols and can also support add-on credential management functions. During the logon process, Winlogon (the interactive logon module) sends credentials to the local `mpnotify.exe` process via RPC. The `mpnotify.exe` process then shares the credentials in cleartext with registered credential managers when notifying that a logon event is happening. Adversaries can configure a malicious network provider DLL to receive credentials from `mpnotify.exe`. Once installed as a credential manager (via the Registry), a malicious DLL can receive and save credentials each time a user logs onto a Windows workstation or domain via the `NPLogonNotify()` function. Adversaries may target planting malicious network provider DLLs on systems known to have increased logon activity and/or administrator logon activity, such as servers and domain controllers.","detection":null,"procedures":null,"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1556.009","technique_name":"Modify Authentication Process: Conditional Access Policies","description":"Adversaries may disable or modify conditional access policies to enable persistent access to compromised accounts. Conditional access policies are additional verifications used by identity providers and identity and access management systems to determine whether a user should be granted access to a resource. For example, in Entra ID, Okta, and JumpCloud, users can be denied access to applications based on their IP address, device enrollment status, and use of multi-factor authentication. In some cases, identity providers may also support the use of risk-based metrics to deny sign-ins based on a variety of indicators. In AWS and GCP, IAM policies can contain `condition` attributes that verify arbitrary constraints such as the source IP, the date the request was made, and the nature of the resources or regions being requested. These measures help to prevent compromised credentials from resulting in unauthorized access to data or resources, as well as limit user permissions to only those required. By modifying conditional access policies, such as adding additional trusted IP ranges, removing Multi-Factor Authentication requirements, or allowing additional Unused/Unsupported Cloud Regions, adversaries may be able to ensure persistent access to accounts and circumvent defensive measures.","detection":null,"procedures":["[G1015] Scattered Spider: Scattered Spider has added additional trusted locations to Azure AD conditional access policies."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.001","technique_name":"Impair Defenses: Disable or Modify Tools","description":"Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems. Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to Indicator Blocking, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection. Alternatively, they may add new directories to an endpoint detection and response (EDR) tool’s exclusion list, enabling them to hide malicious files via File/Path Exclusions. Adversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational may be modified to tamper with and potentially disable Sysmon logging. On network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot. In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor. Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools. For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems. Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. Exploitation for Privilege Escalation), which may lead to bypassing anti-tampering features.","detection":"Monitor processes and command-line arguments to see if security tools/services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Monitoring for changes to other known features used by deployed security tools may also expose malicious activity. Lack of expected log events may be suspicious.","procedures":["[S0253] RunningRAT: RunningRAT kills antimalware running process.","[S0559] SUNBURST: SUNBURST attempted to disable software security services following checks against a FNV-1a + XOR hashed hardcoded blocklist.","[G1032] INC Ransom: INC Ransom can use SystemSettingsAdminFlows.exe, a native Windows utility, to disable Windows Defender.","[S0659] Diavol: Diavol can attempt to stop security software.","[G1018] TA2541: TA2541 has attempted to disable built-in security protections such as Windows AMSI.","[S0132] H1N1: H1N1 kills and disables services for Windows Security Center, and Windows Defender.","[G0010] Turla: Turla has used a AMSI bypass, which patches the in-memory amsi.dll, in PowerShell scripts to bypass Windows antimalware products.","[S0446] Ryuk: Ryuk has stopped services related to anti-virus.","[S0457] Netwalker: Netwalker can detect and terminate active security software-related processes on infected systems.","[C0035] KV Botnet Activity: KV Botnet Activity used various scripts to remove or disable security tools, such as http_watchdog and firewallsd, as well as tools related to other botnet infections, such as mips_ff, on victim devices.","[S0692] SILENTTRINITY: SILENTTRINITY's `amsiPatch.py` module can disable Antimalware Scan Interface (AMSI) functions.","[S0496] REvil: REvil can connect to and disable the Symantec server on the victim's network.","[S0154] Cobalt Strike: Cobalt Strike has the ability to use Smart Applet attacks to disable the Java SecurityManager sandbox.","[S0223] POWERSTATS: POWERSTATS can disable Microsoft Office Protected View by changing Registry keys.","[S0372] LockerGoga: LockerGoga installation has been immediately preceded by a \"task kill\" command in order to disable anti-virus.","[S0144] ChChes: ChChes can alter the victim's proxy configuration.","[S1207] XLoader: XLoader loads a copy of NTDLL to evade hooks from security monitoring tools on this library. XLoader can add the path of its executable to the Microsoft Defender exclusion list.","[G1047] Velvet Ant: Velvet Ant attempted to disable local security tools and endpoint detection and response (EDR) software during operations.","[G1030] Agrius: Agrius used several mechanisms to try to disable security tools. Agrius attempted to modify EDR-related services to disable auto-start on system reboot. Agrius used a publicly available driver, GMER64.sys typically used for anti-rootkit functionality, to selectively stop and remove security software processes.","[S0640] Avaddon: Avaddon looks for and attempts to stop anti-malware solutions.","[S0377] Ebury: Ebury can disable SELinux Role-Based Access Control and deactivate PAM modules.","[S0689] WhisperGate: WhisperGate can download and execute AdvancedRun.exe to disable the Windows Defender Theat Protection service and set an exclusion path for the C:\\ drive.","[G0069] MuddyWater: MuddyWater can disable the system's local proxy settings.","[S0611] Clop: Clop can uninstall or disable security products.","[S0228] NanHaiShu: NanHaiShu can change Internet Explorer settings to reduce warnings about malware activity.","[S0484] Carberp: Carberp has attempted to disable security software by creating a suspended process for the security software and injecting code to delete antivirus core files when the process is resumed.","[S1213] Lumma Stealer: Lumma Stealer has attempted to bypass Windows Antimalware Scan Interface (AMSI) by removing the string “AmsiScanBuffer” from the “clr.dll” module in memory to prevent it from being called.","[S1114] ZIPLINE: ZIPLINE can add itself to the exclusion list for the Ivanti Connect Secure Integrity Checker Tool if the `--exclude` parameter is passed by the `tar` process.","[S0670] WarzoneRAT: WarzoneRAT can disarm Windows Defender during the UAC process to evade detection.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used the service control manager on a remote system to disable services associated with security monitoring products.","[S0201] JPIN: JPIN can lower security settings by changing Registry keys.","[G0119] Indrik Spider: Indrik Spider used PsExec to leverage Windows Defender to disable scanning of all downloaded files and to restrict real-time monitoring. Indrik Spider has used `MpCmdRun` to revert the definitions in Microsoft Defender. Additionally, Indrik Spider has used WMI to stop or uninstall and reset anti-virus products and other defensive services.","[S0576] MegaCortex: MegaCortex was used to kill endpoint security processes.","[S0534] Bazar: Bazar has manually loaded ntdll from disk in order to identity and remove API hooks set by security products.","[S0583] Pysa: Pysa has the capability to stop antivirus services and disable Windows Defender.","[S1135] MultiLayer Wiper: MultiLayer Wiper removes the Volume Shadow Copy (VSS) service from infected devices along with all present shadow copies.","[S0491] StrongPity: StrongPity can add directories used by the malware to the Windows Defender exclusions list to prevent detection.","[G1040] Play: Play has used tools including GMER, IOBit, and PowerTool to disable antivirus software.","[S1111] DarkGate: DarkGate will terminate processes associated with several security software products if identified during execution.","[G0139] TeamTNT: TeamTNT has disabled and uninstalled security tools such as Alibaba, Tencent, and BMC cloud monitoring agents on cloud-based infrastructure.","[G0037] FIN6: FIN6 has deployed a utility script named kill.bat to disable anti-virus.","[S0061] HDoor: HDoor kills anti-virus found on the victim.","[G0092] TA505: TA505 has used malware to disable Windows Defender.","[G0047] Gamaredon Group: Gamaredon Group has delivered macros which can tamper with Microsoft Office security settings.","[S0601] Hildegard: Hildegard has modified DNS resolvers to evade DNS monitoring tools.","[S0531] Grandoreiro: Grandoreiro can hook APIs, kill processes, break file system paths, and change ACLs to prevent security tools from running.","[S1130] Raspberry Robin: Raspberry Robin can add an exception to Microsoft Defender that excludes the entire main drive from anti-malware scanning to evade detection.","[G1024] Akira: Akira has disabled or modified security tools for defense evasion.","[S0669] KOCTOPUS: KOCTOPUS will attempt to delete or disable all Registry keys and scheduled tasks related to Microsoft Security Defender and Security Essentials.","[S0688] Meteor: Meteor can attempt to uninstall Kaspersky Antivirus or remove the Kaspersky license; it can also add all files and folders related to the attack to the Windows Defender exclusion list.","[S0477] Goopy: Goopy has the ability to disable Microsoft Outlook's security policies to disable macro warnings.","[S0595] ThiefQuest: ThiefQuest uses the function kill_unwanted to obtain a list of running processes and kills each process matching a list of security related processes.","[S0266] TrickBot: TrickBot can disable Windows Defender.","[S1178] ShrinkLocker: ShrinkLocker disables protectors used to secure the BitLocker encryption key on victim systems.","[G0060] BRONZE BUTLER: BRONZE BUTLER has incorporated code into several tools that attempts to terminate anti-virus processes.","[S0400] RobbinHood: RobbinHood will search for Windows services that are associated with antivirus software on the system and kill the process.","[G0078] Gorgon Group: Gorgon Group malware can attempt to disable security features in Microsoft Office and Windows Defender using the taskkill command.","[G0024] Putter Panda: Malware used by Putter Panda attempts to terminate processes corresponding to two components of Sophos Anti-Virus (SAVAdminService.exe and SavService.exe).","[G0059] Magic Hound: Magic Hound has disabled antivirus services on targeted systems in order to upload malicious payloads.","[G0143] Aquatic Panda: Aquatic Panda has attempted to stop endpoint detection and response (EDR) tools on compromised systems.","[S0638] Babuk: Babuk can stop anti-virus services on a compromised host.","[S0455] Metamorfo: Metamorfo has a function to kill processes associated with defenses and can prevent certain processes from launching.","[S1202] LockBit 3.0: LockBit 3.0 can disable security tools to evade detection including Windows Defender.","[C0038] HomeLand Justice: During HomeLand Justice, threat actors modified and disabled components of endpoint detection and response (EDR) solutions including Microsoft Defender Antivirus.","[S0249] Gold Dragon: Gold Dragon terminates anti-malware processes if they’re found running on the system.","[S0605] EKANS: EKANS stops processes related to security and management software.","[G0032] Lazarus Group: Lazarus Group malware TangoDelta attempts to terminate various processes associated with McAfee. Additionally, Lazarus Group malware SHARPKNOT disables the Microsoft Windows System Event Notification and Alerter services..","[S0554] Egregor: Egregor has disabled Windows Defender to evade protections.","[S1199] LockBit 2.0: LockBit 2.0 can disable firewall rules and anti-malware and monitoring software including Windows Defender.","[C0046] ArcaneDoor: ArcaneDoor modified the Authentication, Authorization, and Accounting (AAA) function of targeted Cisco ASA appliances to allow the threat actor to bypass normal AAA operations.","[G1043] BlackByte: BlackByte disabled security tools such as Windows Defender and the Raccine anti-ransomware tool during operations.","[G1003] Ember Bear: Ember Bear uses the NirSoft AdvancedRun utility to disable Microsoft Defender Antivirus through stopping the WinDefend service on victim machines. Ember Bear disables Windows Defender via registry key changes.","[S0058] SslMM: SslMM identifies and kills anti-malware processes.","[S0331] Agent Tesla: Agent Tesla has the capability to kill any running analysis processes and AV software.","[S1169] Mango: Mango contains an unused capability to block endpoint security solutions from loading user-mode code hooks via a DLL in a specified process by using the `UpdateProcThreadAttribute API` to set the `PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY` to `PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON` for an identified process.","[S0004] TinyZBot: TinyZBot can disable Avira anti-virus.","[S0334] DarkComet: DarkComet can disable Security Center functions like anti-virus.","[S0412] ZxShell: ZxShell can kill AV products' processes.","[S0336] NanoCore: NanoCore can modify the victim's anti-virus.","[G0094] Kimsuky: Kimsuky has been observed turning off Windows Security Center and can hide the AV software window from the view of the infected user.","[S0608] Conficker: Conficker terminates various services related to system security and Windows.","[G0106] Rocke: Rocke used scripts which detected and uninstalled antivirus software.","[S0481] Ragnar Locker: Ragnar Locker has attempted to terminate/stop processes and services associated with endpoint security products.","[G0082] APT38: APT38 has unhooked DLLs to disable endpoint detection and response (EDR) or anti-virus (AV) tools.","[S0695] Donut: Donut can patch Antimalware Scan Interface (AMSI), Windows Lockdown Policy (WLDP), as well as exit-related Native API functions to avoid process termination.","[S1180] BlackByte Ransomware: BlackByte Ransomware adds .JS and .EXE extensions to the Microsoft Defender exclusion list. BlackByte Ransomware terminates and removes the Raccine anti-ransomware utility.","[G1031] Saint Bear: Saint Bear will modify registry entries and scheduled task objects associated with Windows Defender to disable its functionality.","[G0102] Wizard Spider: Wizard Spider has shut down or uninstalled security applications on victim systems that might prevent ransomware from executing.","[S0449] Maze: Maze has disabled dynamic analysis and other security tools including IDA debugger, x32dbg, and OllyDbg. It has also disabled Windows Defender's Real-Time Monitoring feature and attempted to disable endpoint protection services.","[C0029] Cutting Edge: During Cutting Edge, threat actors disabled logging and modified the `compcheckresult.cgi` component to edit the Ivanti Connect Secure built-in Integrity Checker exclusion list to evade detection.","[S1048] macOS.OSAMiner: macOS.OSAMiner has searched for the Activity Monitor process in the System Events process list and kills the process if running. macOS.OSAMiner also searches the operating system's `install.log` for apps matching its hardcoded list, killing all matching process names.","[S0279] Proton: Proton kills security tools like Wireshark that are running.","[S0468] Skidmap: Skidmap has the ability to set SELinux to permissive mode.","[C0028] 2015 Ukraine Electric Power Attack: During the 2015 Ukraine Electric Power Attack, Sandworm Team modified in-registry internet settings to lower internet security.","[S0252] Brave Prince: Brave Prince terminates antimalware processes.","[S0650] QakBot: QakBot has the ability to modify the Registry to add its binaries to the Windows Defender exclusion list.","[C0002] Night Dragon: During Night Dragon, threat actors disabled anti-virus and anti-spyware tools in some instances on the victim’s machines. The actors also disabled proxy settings to allow direct communication from victims to the Internet.","[S0130] Unknown Logger: Unknown Logger has functionality to disable security tools, including Kaspersky, BitDefender, and MalwareBytes.","[S0482] Bundlore: Bundlore can change browser security settings to enable extensions to be installed. Bundlore uses the pkill cfprefsd command to prevent users from inspecting processes.","[S0434] Imminent Monitor: Imminent Monitor has a feature to disable Windows Task Manager."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.002","technique_name":"Impair Defenses: Disable Windows Event Logging","description":"Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more. This data is used by security tools and analysts to generate detections. The EventLog service maintains event logs from various system components and applications. By default, the service automatically starts when a system powers on. An audit policy, maintained by the Local Security Policy (secpol.msc), defines which system events the EventLog service logs. Security audit policy settings can be changed by running secpol.msc, then navigating to Security Settings\\Local Policies\\Audit Policy for basic audit policy settings or Security Settings\\Advanced Audit Policy Configuration for advanced audit policy settings. auditpol.exe may also be used to set audit policies. Adversaries may target system-wide logging or just that of a particular application. For example, the Windows EventLog service may be disabled using the Set-Service -Name EventLog -Status Stopped or sc config eventlog start=disabled commands (followed by manually stopping the service using Stop-Service -Name EventLog). Additionally, the service may be disabled by modifying the “Start” value in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog then restarting the system for the change to take effect. There are several ways to disable the EventLog service via registry key modification. First, without Administrator privileges, adversaries may modify the \"Start\" value in the key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Security, then reboot the system to disable the Security EventLog. Second, with Administrator privilege, adversaries may modify the same values in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-System and HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Application to disable the entire EventLog. Additionally, adversaries may use auditpol and its sub-commands in a command prompt to disable auditing or clear the audit policy. To enable or disable a specified setting or audit category, adversaries may use the /success or /failure parameters. For example, auditpol /set /category:”Account Logon” /success:disable /failure:disable turns off auditing for the Account Logon category. To clear the audit policy, adversaries may run the following lines: auditpol /clear /y or auditpol /remove /allusers. By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.","detection":"Monitor processes and command-line arguments for commands that can be used to disable logging. For example, Wevtutil, `auditpol`, `sc stop EventLog`, and offensive tooling (such as Mimikatz and `Invoke-Phant0m`) may be used to clear logs. In Event Viewer, Event ID 1102 under the “Security” Windows Log and Event ID 104 under the “System” Windows Log both indicate logs have been cleared. `Service Control Manager Event ID 7035` in Event Viewer may indicate the termination of the EventLog service. Additionally, gaps in the logs, e.g. non-sequential Event Record IDs, may indicate that the logs may have been tampered. Monitor the addition of the MiniNT registry key in `HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control`, which may disable Event Viewer.","procedures":["[S0645] Wevtutil: Wevtutil can be used to disable specific event logs on the system.","[G0027] Threat Group-3390: Threat Group-3390 has used appcmd.exe to disable logging on a victim server.","[G0059] Magic Hound: Magic Hound has executed scripts to disable the event log service.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29, used `AUDITPOL` to prevent the collection of audit logs.","[C0038] HomeLand Justice: During HomeLand Justice, threat actors deleted Windows events and application logs.","[C0025] 2016 Ukraine Electric Power Attack: During the 2016 Ukraine Electric Power Attack, Sandworm Team disabled event logging on compromised systems."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.003","technique_name":"Impair Defenses: Impair Command History Logging","description":"Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. On Linux and macOS, command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected. The `HISTFILE` environment variable is also used in some ESXi systems. Adversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally, HISTCONTROL can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. On Windows systems, the PSReadLine module tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). Adversaries may change where these logs are saved using Set-PSReadLineOption -HistorySavePath {File Path}. This will cause ConsoleHost_history.txt to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command Set-PSReadlineOption -HistorySaveStyle SaveNothing. Adversaries may also leverage a Network Device CLI on network devices to disable historical command logging (e.g. no logging).","detection":"Correlating a user session with a distinct lack of new commands in their .bash_history can be a clue to suspicious behavior. Additionally, users checking or changing their HISTCONTROL, HISTFILE, or HISTFILESIZE environment variables may be suspicious. Monitor for modification of PowerShell command history settings through processes being created with -HistorySaveStyle SaveNothing command-line arguments and use of the PowerShell commands Set-PSReadlineOption -HistorySaveStyle SaveNothing and Set-PSReadLineOption -HistorySavePath {File Path}. Further, Network Device CLI commands may also be used to clear or disable historical log data with built-in features native to the network device platform. Monitor such command activity for unexpected or unauthorized use of commands being run by non-standard users from non-standard locations.","procedures":["[S1186] Line Dancer: Line Dancer can disable syslog on compromised devices.","[G1041] Sea Turtle: Sea Turtle unset the Bash and MySQL history files on victim systems.","[S1161] BPFDoor: BPFDoor sets the `MYSQL_HISTFILE` and `HISTFILE` to `/dev/null` preventing the shell and MySQL from logging history in `/proc//environ`.","[C0046] ArcaneDoor: ArcaneDoor included disabling logging on targeted Cisco ASA appliances.","[G0082] APT38: APT38 has prepended a space to all of their terminal commands to operate without leaving traces in the HISTCONTROL environment.","[S0692] SILENTTRINITY: SILENTTRINITY can bypass ScriptBlock logging to execute unmanaged PowerShell code from memory."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.004","technique_name":"Impair Defenses: Disable or Modify System Firewall","description":"Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel. Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. Non-Standard Port). Adversaries may also modify host networking settings that indirectly manipulate system firewalls, such as interface bandwidth or network connection request thresholds. Settings related to enabling abuse of various Remote Services may also indirectly modify firewall rules. In ESXi, firewall rules may be modified directly via the esxcli command line interface (e.g., via `esxcli network firewall set`) or via the vCenter user interface.","detection":"Monitor processes and command-line arguments to see if firewalls are disabled or modified. Monitor Registry edits to keys that manage firewalls.","procedures":["[S0260] InvisiMole: InvisiMole has a command to disable routing and the Firewall on the victim’s machine.","[S1211] Hannotog: Hannotog can modify local firewall settings via `netsh` commands to open a listening UDP port.","[G0008] Carbanak: Carbanak may use netsh to add local firewall rule exceptions.","[G1045] Salt Typhoon: Salt Typhoon has made changes to the Access Control List (ACL) and loopback interface address on compromised devices.","[S0336] NanoCore: NanoCore can modify the victim's firewall.","[S0245] BADCALL: BADCALL disables the Windows firewall before binding to a port.","[G0106] Rocke: Rocke used scripts which killed processes and added firewall rules to block traffic related to other cryptominers.","[G0139] TeamTNT: TeamTNT has disabled iptables.","[S1181] BlackByte 2.0 Ransomware: BlackByte 2.0 Ransomware modifies the Windows firewall during execution.","[S1178] ShrinkLocker: ShrinkLocker turns on the system firewall and deletes all of its rules during execution.","[S0132] H1N1: H1N1 kills and disables services for Windows Firewall.","[S0263] TYPEFRAME: TYPEFRAME can open the Windows Firewall on the victim’s machine to allow incoming connections.","[G0035] Dragonfly: Dragonfly has disabled host-based firewalls. The group has also globally opened port 3389.","[C0051] APT28 Nearest Neighbor Campaign: During APT28 Nearest Neighbor Campaign, APT28 added rules to a victim's Windows firewall to set up a series of port-forwards allowing traffic to target systems.","[S0108] netsh: netsh can be used to disable local firewall settings.","[S1032] PyDCrypt: PyDCrypt has modified firewall rules to allow incoming SMB, NetBIOS, and RPC connections using `netsh.exe` on remote machines.","[S0687] Cyclops Blink: Cyclops Blink can modify the Linux iptables firewall to enable C2 communication on network devices via a stored list of port numbers.","[G1009] Moses Staff: Moses Staff has used batch scripts that can disable the Windows firewall on specific remote machines.","[S0385] njRAT: njRAT has modified the Windows firewall to allow itself to communicate through the firewall.","[S0531] Grandoreiro: Grandoreiro can block the Deibold Warsaw GAS Tecnologia security tool at the firewall level.","[S0125] Remsec: Remsec can add or remove applications or ports on the Windows firewall or disable it entirely.","[S0013] PlugX: PlugX has modified local firewall rules on victim machines to enable a random, high-number listening port for subsequent access and C2 activity.","[G1022] ToddyCat: Prior to executing a backdoor ToddyCat has run `cmd /c start /b netsh advfirewall firewall add rule name=\"SGAccessInboundRule\" dir=in protocol=udp action=allow localport=49683` to allow the targeted system to receive UDP packets on port 49683.","[S0412] ZxShell: ZxShell can disable the firewall by modifying the registry key HKLM\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\StandardProfile.","[S1161] BPFDoor: BPFDoor starts a shell on a high TCP port starting at 42391 up to 43391, then changes the local `iptables` rules to redirect all packets from the attacker to the shell port.","[G0049] OilRig: OilRig has modified Windows firewall rules to enable remote access.","[S0334] DarkComet: DarkComet can disable Security Center functions like the Windows Firewall.","[S0492] CookieMiner: CookieMiner has checked for the presence of \"Little Snitch\", macOS network monitoring and application firewall software, stopping and exiting if it is found.","[G0059] Magic Hound: Magic Hound has added the following rule to a victim's Windows firewall to allow RDP traffic - `\"netsh\" advfirewall firewall add rule name=\"Terminal Server\" dir=in action=allow protocol=TCP localport=3389`.","[C0014] Operation Wocao: During Operation Wocao, threat actors used PowerShell to add and delete rules in the Windows firewall.","[G0032] Lazarus Group: Various Lazarus Group malware modifies the Windows firewall to allow incoming connections or disable it entirely using netsh.","[G0082] APT38: APT38 have created firewall exemptions on specific ports, including ports 443, 6443, 8443, and 9443.","[G0094] Kimsuky: Kimsuky has been observed disabling the system firewall.","[C0049] Leviathan Australian Intrusions: Leviathan modified system firewalls to add two open listening ports on 9998 and 9999 during Leviathan Australian Intrusions.","[S0376] HOPLIGHT: HOPLIGHT has modified the firewall using netsh.","[G1047] Velvet Ant: Velvet Ant modified system firewall settings during PlugX installation using `netsh.exe` to open a listening, random high number port on victim devices.","[S0246] HARDRAIN: HARDRAIN opens the Windows Firewall to modify incoming connections.","[S0031] BACKSPACE: The \"ZR\" variant of BACKSPACE will check to see if known host-based firewalls are installed on the infected systems. BACKSPACE will attempt to establish a C2 channel, then will examine open windows to identify a pop-up from the firewall software and will simulate a mouse-click to allow the connection to proceed.","[S0088] Kasidet: Kasidet has the ability to change firewall settings to allow a plug-in to be downloaded.","[G1043] BlackByte: BlackByte modified firewall rules on victim machines to enable remote system discovery.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used `netsh` to configure firewall rules that limited certain UDP outbound packets."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.006","technique_name":"Impair Defenses: Indicator Blocking","description":"An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting or even disabling host-based sensors, such as Event Tracing for Windows (ETW), by tampering settings that control the collection and flow of event telemetry. These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as PowerShell or Windows Management Instrumentation. For example, adversaries may modify the `File` value in HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Security to hide their malicious actions in a new or different .evtx log file. This action does not require a system reboot and takes effect immediately. ETW interruption can be achieved multiple ways, however most directly by defining conditions using the PowerShell Set-EtwTraceProvider cmdlet or by interfacing directly with the Registry to make alterations. In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. In Linux environments, adversaries may disable or reconfigure log processing tools such as syslog or nxlog to inhibit detection and monitoring capabilities to facilitate follow on behaviors. ESXi also leverages syslog, which can be reconfigured via commands such as `esxcli system syslog config set` and `esxcli system syslog config reload`.","detection":"Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data. Depending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked. For example, Sysmon will log when its configuration state has changed (Event ID 16) and Windows Management Instrumentation (WMI) may be used to subscribe ETW providers that log any provider removal from a specific trace session. To detect changes in ETW you can also monitor the registry key which contains configurations for all ETW event providers: HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME\\{PROVIDER_GUID}","procedures":["[S0697] HermeticWiper: HermeticWiper has the ability to set the `HKLM:\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\CrashControl\\CrashDumpEnabled` Registry key to `0` in order to disable crash dumps.","[G0096] APT41: APT41 developed a custom injector that enables an Event Tracing for Windows (ETW) bypass, making malicious processes invisible to Windows logging.","[S1065] Woody RAT: Woody RAT has suppressed all error reporting by calling `SetErrorMode` with 0x8007 as a parameter.","[G1023] APT5: APT5 has used the CLEANPULSE utility to insert command line strings into a targeted process to prevent certain log events from occurring.","[S1097] HUI Loader: HUI Loader has the ability to disable Windows Event Tracing for Windows (ETW) and Antimalware Scan Interface (AMSI) functions.","[S1063] Brute Ratel C4: Brute Ratel C4 has the ability to hide memory artifacts and to patch Event Tracing for Windows (ETW) and the Anti Malware Scan Interface (AMSI).","[S0377] Ebury: Ebury hooks system functions to prevent the user from seeing malicious files (`readdir`, `realpath`, `readlink`, `stat`, `open`, and variants), hide process activity (`ps` and `readdir64`), and socket activity (`open` and `fopen`).","[S1184] BOLDMOVE: BOLDMOVE can disable the Fortinet daemons `moglogd` and `syslogd` to evade detection and logging.","[S1200] StealBit: StealBit can configure processes to not display certain Windows error messages by through use of the `NtSetInformationProcess`.","[S0579] Waterbear: Waterbear can hook the ZwOpenProcess and GetExtendedTcpTable APIs called by the process of a security product to hide PIDs and TCP records from detection."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.007","technique_name":"Impair Defenses: Disable or Modify Cloud Firewall","description":"Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in Disable or Modify System Firewall. Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary with appropriate permissions may introduce new firewall rules or policies to allow access into a victim cloud environment and/or move laterally from the cloud control plane to the data plane. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups (or creates new security groups entirely) to allow any TCP/IP connectivity to a cloud-hosted instance. They may also remove networking limitations to support traffic associated with malicious activity (such as cryptomining). Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. It may also be used to open up resources for Brute Force or Endpoint Denial of Service.","detection":"Monitor cloud logs for modification or creation of new security groups or firewall rules.","procedures":["[S1091] Pacu: Pacu can allowlist IP addresses in AWS GuardDuty."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.008","technique_name":"Impair Defenses: Disable or Modify Cloud Logs","description":"An adversary may disable or modify cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an adversary has sufficient permissions, they can disable or modify logging to avoid detection of their activities. For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity. They may alternatively tamper with logging functionality – for example, by removing any associated SNS topics, disabling multi-region logging, or disabling settings that validate and/or encrypt log files. In Office 365, an adversary may disable logging on mail collection activities for specific users by using the `Set-MailboxAuditBypassAssociation` cmdlet, by disabling M365 Advanced Auditing for the user, or by downgrading the user’s license from an Enterprise E5 to an Enterprise E3 license.","detection":"Monitor logs for API calls to disable logging. In AWS, monitor for: StopLogging and DeleteTrail. In GCP, monitor for: google.logging.v2.ConfigServiceV2.UpdateSink. In Azure, monitor for az monitor diagnostic-settings delete. Additionally, a sudden loss of a log source may indicate that it has been disabled.","procedures":["[S1091] Pacu: Pacu can disable or otherwise restrict various AWS logging services, such as AWS CloudTrail and VPC flow logs.","[G0016] APT29: APT29 has disabled Purview Audit on targeted accounts prior to stealing emails from Microsoft 365 tenants."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.009","technique_name":"Impair Defenses: Safe Mode Boot","description":"Adversaries may abuse Windows safe mode to disable endpoint defenses. Safe mode starts up the Windows operating system with a limited set of drivers and services. Third-party security software such as endpoint detection and response (EDR) tools may not start after booting Windows in safe mode. There are two versions of safe mode: Safe Mode and Safe Mode with Networking. It is possible to start additional services after a safe mode boot. Adversaries may abuse safe mode to disable endpoint defenses that may not start with a limited boot. Hosts can be forced into safe mode after the next reboot via modifications to Boot Configuration Data (BCD) stores, which are files that manage boot application settings. Adversaries may also add their malicious applications to the list of minimal services that start in safe mode by modifying relevant Registry values (i.e. Modify Registry). Malicious Component Object Model (COM) objects may also be registered and loaded in safe mode.","detection":"Monitor Registry modification and additions for services that may start on safe mode. For example, a program can be forced to start on safe mode boot by adding a \\* in front of the \"Startup\" value name: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\[\"\\*Startup\"=\"{Path}\"] or by adding a key to HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal. Monitor execution of processes and commands associated with making configuration changes to boot settings, such as bcdedit.exe and bootcfg.exe.","procedures":["[S0496] REvil: REvil can force a reboot in safe mode with networking.","[S1212] RansomHub: RansomHub can reboot targeted systems into Safe Mode prior to encryption.","[S1070] Black Basta: Black Basta can reboot victim machines in safe mode with networking via `bcdedit /set safeboot network`.","[S1202] LockBit 3.0: LockBit 3.0 can reboot the infected host into Safe Mode.","[S1053] AvosLocker: AvosLocker can restart a compromised machine in safe mode."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.010","technique_name":"Impair Defenses: Downgrade Attack","description":"Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls. Downgrade attacks typically take advantage of a system’s backward compatibility to force it into less secure modes of operation. Adversaries may downgrade and use various less-secure versions of features of a system, such as Command and Scripting Interpreters or even network protocols that can be abused to enable Adversary-in-the-Middle or Network Sniffing. For example, PowerShell versions 5+ includes Script Block Logging (SBL), which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to Impair Defenses while running malicious scripts that may have otherwise been detected. Adversaries may similarly target network traffic to downgrade from an encrypted HTTPS connection to an unsecured HTTP connection that exposes network data in clear text. On Windows systems, adversaries may downgrade the boot manager to a vulnerable version that bypasses Secure Boot, granting the ability to disable various operating system security mechanisms.","detection":"Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: powershell –v 2). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment. Monitor for Windows event ID (EID) 400, specifically the EngineVersion field which shows the version of PowerShell running and may highlight a malicious downgrade attack. Monitor network data to detect cases where HTTP is used instead of HTTPS. Monitor executed commands and arguments that may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. Bitlocker can be disabled by calling DisableKeyProtectors and setting DisableCount to 0. Monitor for newly constructed files that may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Adversaries can construct new files in the EFI System Partition. Monitor for changes made to Windows Registry keys and/or values related to services and startup programs that correspond to security tools such as HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender. HVCI (Hypervisor-Protected Code Integrity) can be disabled by modifying the registry key to 0, allowing the system to run custom unsigned kernel code.","procedures":["[C0041] FrostyGoop Incident: During FrostyGoop Incident, the adversary downgraded firmware on victim devices in order to impair visibility into the process environment.","[S1180] BlackByte Ransomware: BlackByte Ransomware enables SMBv1 during execution.","[S0692] SILENTTRINITY: SILENTTRINITY can downgrade NTLM to capture NTLM hashes."],"tactics":"TA0005 - Defense Evasion"}
{"technique_id":"T1562.011","technique_name":"Impair Defenses: Spoof Security Alerting","description":"Adversaries may spoof security alerting from tools, presenting false evidence to impair defenders’ awareness of malicious activity. Messages produced by defensive tools contain information about potential security events as well as the functioning status of security software and the system. Security reporting messages are important for monitoring the normal operation of a system and identifying important events that can signal a security incident. Rather than or in addition to Indicator Blocking, an adversary can spoof positive affirmations that security tools are continuing to function even after legitimate security tools have been disabled (e.g., Disable or Modify Tools). An adversary can also present a “healthy” system status even after infection. This can be abused to enable further malicious activity by delaying defender responses. For example, adversaries may show a fake Windows Security GUI and tray icon with a “healthy” system status after Windows Defender and other system tools have been disabled.","detection":null,"procedures":null,"tactics":"TA0005 - Defense Evasion"}