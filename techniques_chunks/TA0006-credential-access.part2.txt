{"technique_id":"T1528","technique_name":"Steal Application Access Token","description":"Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources. Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS). Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment. For example, in Kubernetes environments, processes running inside a container may communicate with the Kubernetes API server using service account tokens. If a container is compromised, an adversary may be able to steal the container’s token and thereby gain access to Kubernetes API commands. Similarly, instances within continuous-development / continuous-integration (CI/CD) pipelines will often use API tokens to authenticate to other services for testing and deployment. If these pipelines are compromised, adversaries may be able to steal these tokens and leverage their privileges. In Azure, an adversary who compromises a resource with an attached Managed Identity, such as an Azure VM, can request short-lived tokens through the Azure Instance Metadata Service (IMDS). These tokens can then facilitate unauthorized actions or further access to other Azure services, bypassing typical credential-based authentication. Token theft can also occur through social engineering, in which case user action may be required to grant access. OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token. Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.","detection":"Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a “High severity app permissions” policy that generates alerts if apps request high severity permissions or send permissions requests for too many users. Security analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app’s purpose, or apps with old “Last authorized” fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps. Administrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.","procedures":["[G0016] APT29: APT29 uses stolen tokens to access victim accounts, without needing a password.","[S0683] Peirates: Peirates gathers Kubernetes service account tokens using a variety of techniques.","[S0677] AADInternals: AADInternals can steal users’ access tokens via phishing emails containing malicious links.","[G0007] APT28: APT28 has used several malicious applications to steal user OAuth access tokens including applications masquerading as \"Google Defender\" \"Google Email Protection,\" and \"Google Scanner\" for Gmail users. They also targeted Yahoo users with applications masquerading as \"Delivery Service\" and \"McAfee Email Protection\".","[C0049] Leviathan Australian Intrusions: Leviathan abused access to compromised appliances to collect JSON Web Tokens (JWTs), used for creating virtual desktop sessions, during Leviathan Australian Intrusions."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1539","technique_name":"Steal Web Session Cookie","description":"An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website. Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols. There are several examples of malware targeting cookies from web browsers on the local system. Adversaries may also steal cookies by injecting malicious JavaScript content into websites or relying on User Execution by tricking victims into running malicious JavaScript in their browser. There are also open source frameworks such as `Evilginx2` and `Muraena` that can gather session cookies through a malicious proxy (e.g., Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns. After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application.","detection":"Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.","procedures":["[G1014] LuminousMoth: LuminousMoth has used an unnamed post-exploitation tool to steal cookies from the Chrome browser.","[G0094] Kimsuky: Kimsuky has used malware, such as TRANSLATEXT, to steal and exfiltrate browser cookies.","[G0034] Sandworm Team: Sandworm Team used information stealer malware to collect browser session cookies.","[S0531] Grandoreiro: Grandoreiro can steal the victim's cookies to use for duplicating the active session from another device.","[S1207] XLoader: XLoader can capture web session cookies and session information from victim browsers.","[G1015] Scattered Spider: Scattered Spider retrieves browser cookies via Raccoon Stealer.","[G0120] Evilnum: Evilnum can steal cookies and session information from browsers.","[S0492] CookieMiner: CookieMiner can steal Google Chrome and Apple Safari browser cookies from the victim’s machine.","[G1033] Star Blizzard: Star Blizzard has used EvilGinx to steal the session cookies of victims directed to phishing domains.","[G0030] Lotus Blossom: Lotus Blossom has used publicly-available tools to steal cookies from browsers such as Chrome.","[S1140] Spica: Spica has the ability to steal cookies from Chrome, Firefox, Opera, and Edge browsers.","[S0650] QakBot: QakBot has the ability to capture web session cookies.","[S0568] EVILNUM: EVILNUM can harvest cookies and upload them to the C2 server.","[S1201] TRANSLATEXT: TRANSLATEXT has exfiltrated updated cookies from Google, Naver, Kakao or Daum to the C2 server.","[S0631] Chaes: Chaes has used a script that extracts the web session cookie and sends it to the C2 server.","[S0657] BLUELIGHT: BLUELIGHT can harvest cookies from Internet Explorer, Edge, Chrome, and Naver Whale browsers.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 stole Chrome browser cookies by copying the Chrome profile directories of targeted users.","[S1146] MgBot: MgBot includes modules that can steal cookies from Firefox, Chrome, and Edge web browsers.","[S0658] XCSSET: XCSSET uses scp to access the ~/Library/Cookies/Cookies.binarycookies file.","[S0467] TajMahal: TajMahal has the ability to steal web session cookies from Internet Explorer, Netscape Navigator, FireFox and RealNetworks applications.","[S1111] DarkGate: DarkGate attempts to steal Opera cookies, if present, after terminating the related process.","[S1148] Raccoon Stealer: Raccoon Stealer attempts to steal cookies and related information in browser history.","[S1213] Lumma Stealer: Lumma Stealer has harvested cookies from various browsers.","[G1044] APT42: APT42 has used custom malware to steal login and cookie data from common browsers."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.001","technique_name":"Unsecured Credentials: Credentials In Files","description":"Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords. It is possible to extract passwords from backups or saved virtual machines through OS Credential Dumping. Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files. They may also be found as parameters to deployment commands in container logs. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.","detection":"While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.","procedures":["[S0117] XTunnel: XTunnel is capable of accessing locally stored passwords on victims.","[S0192] Pupy: Pupy can use Lazagne for harvesting credentials.","[S0367] Emotet: Emotet has been observed leveraging a module that retrieves passwords stored on a system for the current logged-on user.","[S0378] PoshC2: PoshC2 contains modules for searching for passwords in local and remote files.","[S0226] Smoke Loader: Smoke Loader searches for files named logins.json to parse for credentials.","[G0064] APT33: APT33 has used a variety of publicly available tools like LaZagne to gather credentials.","[S0331] Agent Tesla: Agent Tesla has the ability to extract credentials from configuration or support files.","[S0349] LaZagne: LaZagne can obtain credentials from chats, databases, mail, and WiFi.","[S0363] Empire: Empire can use various modules to search for files containing passwords.","[C0049] Leviathan Australian Intrusions: Leviathan gathered credentials stored in files related to Building Management System (BMS) operations during Leviathan Australian Intrusions.","[S0344] Azorult: Azorult can steal credentials in files belonging to common software such as Skype, Telegram, and Steam.","[S0583] Pysa: Pysa has extracted credentials from the password database before encrypting the files.","[G0117] Fox Kitten: Fox Kitten has accessed files to gain valid credentials.","[S0601] Hildegard: Hildegard has searched for SSH keys, Docker credentials, and Kubernetes service tokens.","[G0092] TA505: TA505 has used malware to gather credentials from FTP clients and Outlook.","[S0266] TrickBot: TrickBot can obtain passwords stored in files from several applications such as Outlook, Filezilla, OpenSSH, OpenVPN and WinSCP. Additionally, it searches for the \".vnc.lnk\" affix to steal VNC credentials.","[S0677] AADInternals: AADInternals can gather unsecured credentials for Azure AD services, such as Azure AD Connect, from a local machine.","[G1016] FIN13: FIN13 has obtained administrative credentials by browsing through local files on a compromised machine.","[G0119] Indrik Spider: Indrik Spider has searched files to obtain and exfiltrate credentials.","[G0022] APT3: APT3 has a tool that can locate credentials in files on the file system such as those from Firefox or Chrome.","[G0077] Leafminer: Leafminer used several tools for retrieving login and password information, including LaZagne.","[S0262] QuasarRAT: QuasarRAT can obtain passwords from FTP clients.","[S0067] pngdowner: If an initial connectivity check fails, pngdowner attempts to extract proxy details and credentials from Windows Protected Storage and from the IE Credentials Store. This allows the adversary to use the proxy credentials for subsequent requests if they enable outbound HTTP access.","[G0094] Kimsuky: Kimsuky has used tools that are capable of obtaining credentials from saved mail.","[S0089] BlackEnergy: BlackEnergy has used a plug-in to gather credentials stored in files on the host by various software programs, including The Bat! email client, Outlook, and Windows Credential Store.","[S0283] jRAT: jRAT can capture passwords from common chat applications such as MSN Messenger, AOL, Instant Messenger, and and Google Talk.","[G1039] RedCurl: RedCurl used LaZagne to obtain passwords in files.","[G0049] OilRig: OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access.","[G1003] Ember Bear: Ember Bear has dumped configuration settings in accessed IP cameras including plaintext credentials.","[S1183] StrelaStealer: StrelaStealer searches for and if found collects the contents of files such as `logins.json` and `key4.db` in the `$APPDATA%\\Thunderbird\\Profiles\\` directory, associated with the Thunderbird email application.","[G0139] TeamTNT: TeamTNT has searched for unsecured AWS credentials and Docker API credentials.","[G0069] MuddyWater: MuddyWater has run a tool that steals passwords saved in victim email.","[G1015] Scattered Spider: Scattered Spider Spider searches for credential storage documentation on a compromised host."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.002","technique_name":"Unsecured Credentials: Credentials in Registry","description":"Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons. Example commands to find Registry keys related to password information: * Local Machine Hive: reg query HKLM /f password /t REG_SZ /s * Current User Hive: reg query HKCU /f password /t REG_SZ /s","detection":"Monitor processes for applications that can be used to query the Registry, such as Reg, and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.","procedures":["[S0075] Reg: Reg may be used to find credentials in the Windows Registry.","[S0194] PowerSploit: PowerSploit has several modules that search the Windows Registry for stored credentials: Get-UnattendedInstallFile, Get-Webconfig, Get-ApplicationHost, Get-SiteListPassword, Get-CachedGPPPassword, and Get-RegistryAutoLogon.","[G0050] APT32: APT32 used Outlook Credential Dumper to harvest credentials stored in Windows registry.","[S1022] IceApple: IceApple can harvest credentials from local and remote host registries.","[S1183] StrelaStealer: StrelaStealer enumerates the registry key `HKCU\\SOFTWARE\\Microsoft\\Office\\16.0\\Outlook\\Profiles\\Outlook\\9375CFF0413111d3B88A00104B2A6676\\` to identify the values for \"IMAP User,\" \"IMAP Server,\" and \"IMAP Password\" associated with the Outlook email application.","[S0266] TrickBot: TrickBot has retrieved PuTTY credentials by querying the Software\\SimonTatham\\Putty\\Sessions registry key","[S0476] Valak: Valak can use the clientgrabber module to steal e-mail credentials from the Registry.","[G1039] RedCurl: RedCurl used LaZagne to obtain passwords in the Registry.","[S0331] Agent Tesla: Agent Tesla has the ability to extract credentials from the Registry."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.003","technique_name":"Unsecured Credentials: Bash History","description":"Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Adversaries can abuse this by looking through the file for potential credentials.","detection":"Monitoring when the user's .bash_history is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like cat ~/.bash_history.","procedures":["[S0599] Kinsing: Kinsing has searched bash_history for credentials."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.004","technique_name":"Unsecured Credentials: Private Keys","description":"Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:&#92;Users&#92;(username)&#92;.ssh&#92; on Windows. Adversary tools may also search compromised systems for file extensions relating to cryptographic keys and certificates. When a device is registered to Entra ID, a device key and a transport key are generated and used to verify the device’s identity. An adversary with access to the device may be able to export the keys in order to impersonate the device. On network devices, private keys may be exported via Network Device CLI commands such as `crypto pki export`. Some private keys require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line. These private keys can be used to authenticate to Remote Services like SSH or for use in decrypting other collected files such as email.","detection":"Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication. For network infrastructure devices, collect AAA logging to monitor for private keys being exported.","procedures":["[S0409] Machete: Machete has scanned and looked for cryptographic keys and certificate file extensions.","[S0002] Mimikatz: Mimikatz's CRYPTO::Extract module can extract keys by interacting with Windows cryptographic application programming interface (API) functions.","[C0014] Operation Wocao: During Operation Wocao, threat actors used Mimikatz to dump certificates and private keys from the Windows certificate store.","[S0599] Kinsing: Kinsing has searched for private keys.","[S0601] Hildegard: Hildegard has searched for private keys in .ssh.","[S1060] Mafalda: Mafalda can collect a Chrome encryption key used to protect browser cookies.","[G1015] Scattered Spider: Scattered Spider enumerate and exfiltrate code-signing certificates from a compromised host.","[S1196] Troll Stealer: Troll Stealer collects all data in victim `.ssh` folders by creating a compressed copy that is subsequently exfiltrated to command and control infrastructure. Troll Stealer also collects key information associated with the Government Public Key Infrastructure (GPKI) service for South Korean government information systems.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 obtained PKI keys, certificate files, and the private encryption key from an Active Directory Federation Services (AD FS) container to decrypt corresponding SAML signing certificates.","[S0661] FoggyWeb: FoggyWeb can retrieve token signing certificates and token decryption certificates from a compromised AD FS server.","[G0139] TeamTNT: TeamTNT has searched for unsecured SSH keys.","[S0363] Empire: Empire can use modules like Invoke-SessionGopher to extract private key and session information.","[S0677] AADInternals: AADInternals can gather encryption keys from Azure AD services such as ADSync and Active Directory Federated Services servers.","[G0106] Rocke: Rocke has used SSH private keys on the infected machine to spread its coinminer throughout a network.","[S0377] Ebury: Ebury has intercepted unencrypted private keys as well as private key pass-phrases.","[G1017] Volt Typhoon: Volt Typhoon has accessed a Local State file that contains the AES key used to encrypt passwords stored in the Chrome browser.","[S0283] jRAT: jRAT can steal keys for VPNs and cryptocurrency wallets."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.005","technique_name":"Unsecured Credentials: Cloud Instance Metadata API","description":"Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data. Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance. A cloud metadata API has been used in at least one high profile compromise. If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, adversaries may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows them to gain access to the sensitive information via a request to the Instance Metadata API. The de facto standard across cloud service providers is to host the Instance Metadata API at http[:]//169.254.169.254.","detection":"Monitor access to the Instance Metadata API and look for anomalous queries. It may be possible to detect adversary use of credentials they have obtained such as in Valid Accounts.","procedures":["[G0139] TeamTNT: TeamTNT has queried the AWS instance metadata service for credentials.","[S0683] Peirates: Peirates can query the query AWS and GCP metadata APIs for secrets.","[S0601] Hildegard: Hildegard has queried the Cloud Instance Metadata API for cloud credentials."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.006","technique_name":"Unsecured Credentials: Group Policy Preferences","description":"Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts. These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public). The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files: * Metasploit’s post exploitation module: post/windows/gather/credentials/gpp * Get-GPPPassword * gpprefdecrypt.py On the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: dir /s * .xml","detection":"Monitor for attempts to access SYSVOL that involve searching for XML files. Deploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors.","procedures":["[S0692] SILENTTRINITY: SILENTTRINITY has a module that can extract cached GPP passwords.","[S0194] PowerSploit: PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Group Policy Preferences.","[G0064] APT33: APT33 has used a variety of publicly available tools like Gpppassword to gather credentials.","[G0102] Wizard Spider: Wizard Spider has used PowerShell cmdlets `Get-GPPPassword` and `Find-GPOPassword` to find unsecured credentials in a compromised network group policy."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.007","technique_name":"Unsecured Credentials: Container API","description":"Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components. An adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment. An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.","detection":"Establish centralized logging for the activity of container and Kubernetes cluster components. Monitor logs for actions that could be taken to gather credentials to container and cloud infrastructure, including the use of discovery API calls by new or unexpected users and APIs that access Docker logs. It may be possible to detect adversary use of credentials they have obtained such as in Valid Accounts.","procedures":["[S0683] Peirates: Peirates can query the Kubernetes API for secrets."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1552.008","technique_name":"Unsecured Credentials: Chat Messages","description":"Adversaries may directly collect unsecured credentials stored or passed through user communication services. Credentials may be sent and stored in user chat communication applications such as email, chat services like Slack or Teams, collaboration tools like Jira or Trello, and any other services that support user communication. Users may share various forms of credentials (such as usernames and passwords, API keys, or authentication tokens) on private or public corporate internal communications channels. Rather than accessing the stored chat logs (i.e., Credentials In Files), adversaries may directly access credentials within these services on the user endpoint, through servers hosting the services, or through administrator portals for cloud hosted services. Adversaries may also compromise integration tools like Slack Workflows to automatically search through messages to extract user credentials. These credentials may then be abused to perform follow-on activities such as lateral movement or privilege escalation .","detection":null,"procedures":["[G1004] LAPSUS$: LAPSUS$ has targeted various collaboration tools like Slack, Teams, JIRA, Confluence, and others to hunt for exposed credentials to support privilege escalation and lateral movement."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.001","technique_name":"Credentials from Password Stores: Keychain","description":"Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. Keychains can be viewed and edited through the Keychain Access application or using the command-line utility security. Keychain files are located in ~/Library/Keychains/, /Library/Keychains/, and /Network/Library/Keychains/. Adversaries may gather user credentials from Keychain storage/memory. For example, the command security dump-keychain –d will dump all Login Keychain credentials from ~/Library/Keychains/login.keychain-db. Adversaries may also directly read Login Keychain credentials from the ~/Library/Keychains/login.keychain file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.","detection":"Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.","procedures":["[S1185] LightSpy: LightSpy performs an in-memory keychain query via `SecItemCopyMatching()` then formats the retrieved data as a JSON blob for exfiltration.","[S0690] Green Lambert: Green Lambert can use Keychain Services API functions to find and collect passwords, such as `SecKeychainFindInternetPassword` and `SecKeychainItemCopyAttributesAndData`.","[S0279] Proton: Proton gathers credentials in files for keychains.","[S1016] MacMa: MacMa can dump credentials from the macOS keychain.","[S0349] LaZagne: LaZagne can obtain credentials from macOS Keychains.","[S0274] Calisto: Calisto collects Keychain storage data and copies those passwords/tokens to a file.","[S1153] Cuckoo Stealer: Cuckoo Stealer can capture files from a targeted user's keychain directory.","[S0278] iKitten: iKitten collects the keychains on the system."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.002","technique_name":"Credentials from Password Stores: Securityd Memory","description":"An adversary with root access may gather credentials by reading `securityd`’s memory. `securityd` is a service/daemon responsible for implementing security protocols such as encryption and authorization. A privileged adversary may be able to scan through `securityd`'s memory to find the correct sequence of keys to decrypt the user’s logon keychain. This may provide the adversary with various plaintext passwords, such as those for users, WiFi, mail, browsers, certificates, secure notes, etc. In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. Apple’s `securityd` utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an adversary need only iterate over the other values to unlock the final password.","detection":"Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.","procedures":["[S0276] Keydnap: Keydnap uses the keychaindump project to read securityd memory."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.003","technique_name":"Credentials from Password Stores: Credentials from Web Browsers","description":"Adversaries may acquire credentials from web browsers by reading files specific to the target browser. Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers. For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim’s cached logon credentials as the decryption key. Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the Windows Credential Manager. Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials. After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).","detection":"Identify web browser files that contain credentials such as Google Chrome’s Login Data database file: AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data. Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).","procedures":["[S0385] njRAT: njRAT has a module that steals passwords saved in victim web browsers.","[S0089] BlackEnergy: BlackEnergy has used a plug-in to gather credentials from web browsers including FireFox, Google Chrome, and Internet Explorer.","[S0132] H1N1: H1N1 dumps usernames and passwords from Firefox, Internet Explorer, and Outlook.","[S1122] Mispadu: Mispadu can steal credentials from Google Chrome.","[S0434] Imminent Monitor: Imminent Monitor has a PasswordRecoveryPacket module for recovering browser passwords.","[S0365] Olympic Destroyer: Olympic Destroyer contains a module that tries to obtain stored credentials from web browsers.","[S0528] Javali: Javali can capture login credentials from open browsers including Firefox, Chrome, Internet Explorer, and Edge.","[S0492] CookieMiner: CookieMiner can steal saved usernames and passwords in Chrome as well as credit card credentials.","[G0040] Patchwork: Patchwork dumped the login data database from \\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data.","[S1042] SUGARDUMP: SUGARDUMP variants have harvested credentials from browsers such as Firefox, Chrome, Opera, and Edge.","[S1213] Lumma Stealer: Lumma Stealer has gathered credential and other information from multiple browsers.","[G0096] APT41: APT41 used BrowserGhost, a tool designed to obtain credentials from browsers, to retrieve information from password stores.","[S0670] WarzoneRAT: WarzoneRAT has the capability to grab passwords from numerous web browsers as well as from Outlook and Thunderbird email clients.","[S1201] TRANSLATEXT: TRANSLATEXT has stolen credentials stored in Chrome.","[G0128] ZIRCONIUM: ZIRCONIUM has used a tool to steal credentials from installed web browsers including Microsoft Internet Explorer and Google Chrome.","[S0356] KONNI: KONNI can steal profiles (containing credential information) from Firefox, Chrome, and Opera.","[G1026] Malteiro: Malteiro has stolen credentials stored in the victim’s browsers via software tool NirSoft WebBrowserPassView.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 stole users' saved passwords from Chrome.","[S0240] ROKRAT: ROKRAT can steal credentials stored in Web browsers by querying the sqlite database.","[S0262] QuasarRAT: QuasarRAT can obtain passwords from common web browsers.","[G0022] APT3: APT3 has used tools to dump passwords from browsers.","[S0349] LaZagne: LaZagne can obtain credentials from web browsers such as Google Chrome, Internet Explorer, and Firefox.","[G0064] APT33: APT33 has used a variety of publicly available tools like LaZagne to gather credentials.","[S0153] RedLeaves: RedLeaves can gather browser usernames and passwords.","[G0038] Stealth Falcon: Stealth Falcon malware gathers passwords from multiple sources, including Internet Explorer, Firefox, and Chrome.","[S1146] MgBot: MgBot includes modules for stealing credentials from various browsers and applications, including Chrome, Opera, Firefox, Foxmail, QQBrowser, FileZilla, and WinSCP.","[S0436] TSCookie: TSCookie has the ability to steal saved passwords from the Internet Explorer, Edge, Firefox, and Chrome browsers.","[S0226] Smoke Loader: Smoke Loader searches for credentials stored from web browsers.","[S0331] Agent Tesla: Agent Tesla can gather credentials from a number of browsers.","[S0192] Pupy: Pupy can use Lazagne for harvesting credentials.","[S0409] Machete: Machete collects stored credentials from several web browsers.","[S0344] Azorult: Azorult can steal credentials from the victim's browser.","[S0113] Prikormka: A module in Prikormka gathers logins and passwords stored in applications on the victims, including Google Chrome, Mozilla Firefox, and several other browsers.","[S0094] Trojan.Karagany: Trojan.Karagany can steal data and credentials from browsers.","[S1156] Manjusaka: Manjusaka gathers credentials from Chromium-based browsers.","[S0526] KGH_SPY: KGH_SPY has the ability to steal data from the Chrome, Edge, Firefox, Thunderbird, and Opera browsers.","[G0077] Leafminer: Leafminer used several tools for retrieving login and password information, including LaZagne.","[G0067] APT37: APT37 has used a credential stealer known as ZUMKONG that can harvest usernames and passwords stored in browsers.","[S0050] CosmicDuke: CosmicDuke collects user credentials, including passwords, for various programs including Web browsers.","[G0034] Sandworm Team: Sandworm Team's CredRaptor tool can collect saved passwords from various internet browsers.","[S0138] OLDBAIT: OLDBAIT collects credentials from Internet Explorer, Mozilla Firefox, and Eudora.","[S0629] RainyDay: RainyDay can use tools to collect credentials from web browsers.","[S0002] Mimikatz: Mimikatz performs credential dumping to obtain account and password information useful in gaining access to additional systems and enterprise network resources. It contains functionality to acquire information about credentials in many ways, including from DPAPI.","[S0367] Emotet: Emotet has been observed dropping browser password grabber modules.","[S1148] Raccoon Stealer: Raccoon Stealer collects passwords, cookies, and autocomplete information from various popular web browsers.","[G0069] MuddyWater: MuddyWater has run tools including Browser64 to steal passwords saved in victim web browsers.","[S0283] jRAT: jRAT can capture passwords from common web browsers such as Internet Explorer, Google Chrome, and Firefox.","[S0692] SILENTTRINITY: SILENTTRINITY can collect clear text web credentials for Internet Explorer/Edge.","[S0198] NETWIRE: NETWIRE has the ability to steal credentials from web browsers including Internet Explorer, Opera, Yandex, and Chrome.","[S0530] Melcoz: Melcoz has the ability to steal credentials from web browsers.","[S1207] XLoader: XLoader can gather credentials from several web browsers.","[G1004] LAPSUS$: LAPSUS$ has obtained passwords and session tokens with the use of the Redline password stealer.","[S0657] BLUELIGHT: BLUELIGHT can collect passwords stored in web browers, including Internet Explorer, Edge, Chrome, and Naver Whale.","[S0144] ChChes: ChChes steals credentials stored inside Internet Explorer.","[S0279] Proton: Proton gathers credentials for Google Chrome.","[G1001] HEXANE: HEXANE has used a Mimikatz-based tool and a PowerShell script to steal passwords from Google Chrome.","[G0092] TA505: TA505 has used malware to gather credentials from Internet Explorer.","[G0021] Molerats: Molerats used the public tool BrowserPasswordDump10 to dump passwords saved in browsers on victims.","[S0130] Unknown Logger: Unknown Logger is capable of stealing usernames and passwords from browsers on the victim machine.","[G0130] Ajax Security Team: Ajax Security Team has used FireMalv custom-developed malware, which collected passwords from the Firefox browser storage.","[G0100] Inception: Inception used a browser plugin to steal passwords and sessions from Internet Explorer, Chrome, Opera, Firefox, Torch, and Yandex.","[S0093] Backdoor.Oldrea: Some Backdoor.Oldrea samples contain a publicly available Web browser password recovery tool.","[G1017] Volt Typhoon: Volt Typhoon has targeted network administrator browser data including browsing history and stored credentials.","[G0094] Kimsuky: Kimsuky has used browser extensions including Google Chrome to steal passwords and cookies from browsers. Kimsuky has also used Nirsoft's WebBrowserPassView tool to dump the passwords obtained from victims.","[S0363] Empire: Empire can use modules that extract passwords from common web browsers such as Firefox and Chrome.","[S0161] XAgentOSX: XAgentOSX contains the getFirefoxPassword function to attempt to locate Firefox passwords.","[S0681] Lizar: Lizar has a module to collect usernames and passwords stored in browsers.","[S0048] PinchDuke: PinchDuke steals credentials from compromised hosts. PinchDuke's credential stealing functionality is believed to be based on the source code of the Pinch credential stealing malware (also known as LdPinch). Credentials targeted by PinchDuke include ones associated with many sources such as Netscape Navigator, Mozilla Firefox, Mozilla Thunderbird, and Internet Explorer.","[G0049] OilRig: OilRig has used credential dumping tools such as LaZagne to steal credentials to accounts logged into the compromised system and to Outlook Web Access. OilRig has also used tool named PICKPOCKET to dump passwords from web browsers.","[G1039] RedCurl: RedCurl used LaZagne to obtain passwords from web browsers.","[S0387] KeyBoy: KeyBoy attempts to collect passwords from browsers.","[S0531] Grandoreiro: Grandoreiro can steal cookie data and credentials from Google Chrome.","[S0650] QakBot: QakBot has collected usernames and passwords from Firefox and Chrome.","[S0115] Crimson: Crimson contains a module to steal credentials from Web browsers on the victim machine.","[G0037] FIN6: FIN6 has used the Stealer One credential stealer to target web browsers.","[S0266] TrickBot: TrickBot can obtain passwords stored in files from web browsers such as Chrome, Firefox, Internet Explorer, and Microsoft Edge, sometimes using esentutl.","[S0435] PLEAD: PLEAD can harvest saved credentials from browsers such as Google Chrome, Microsoft Internet Explorer, and Mozilla Firefox.","[S0428] PoetRAT: PoetRAT has used a Python tool named Browdec.exe to steal browser credentials.","[S0631] Chaes: Chaes can steal login credentials and stored financial information from the browser.","[S0484] Carberp: Carberp's passw.plug plugin can gather passwords saved in Opera, Internet Explorer, Safari, Firefox, and Chrome.","[G1044] APT42: APT42 has used custom malware to steal credentials.","[S0251] Zebrocy: Zebrocy has the capability to upload dumper tools that extract credentials from web browsers and store them in database files.","[C0044] Juicy Mix: During Juicy Mix, OilRig used the CDumper (Chrome browser) and EDumper (Edge browser) to collect credentials.","[S0447] Lokibot: Lokibot has demonstrated the ability to steal credentials from multiple applications and data sources including Safari and the Chromium and Mozilla Firefox-based web browsers."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.004","technique_name":"Credentials from Password Stores: Windows Credential Manager","description":"Adversaries may acquire credentials from the Windows Credential Manager. The Credential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos in Credential Lockers (previously known as Windows Vaults). The Windows Credential Manager separates website credentials from application or network credentials in two lockers. As part of Credentials from Web Browsers, Internet Explorer and Microsoft Edge website credentials are managed by the Credential Manager and are stored in the Web Credentials locker. Application and network credentials are stored in the Windows Credentials locker. Credential Lockers store credentials in encrypted `.vcrd` files, located under `%Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\`. The encryption key can be found in a file named Policy.vpol, typically located in the same folder as the credentials. Adversaries may list credentials managed by the Windows Credential Manager through several mechanisms. vaultcmd.exe is a native Windows executable that can be used to enumerate credentials stored in the Credential Locker through a command-line interface. Adversaries may also gather credentials by directly reading files located inside of the Credential Lockers. Windows APIs, such as CredEnumerateA, may also be absued to list credentials managed by the Credential Manager. Adversaries may also obtain credentials from credential backups. Credential backups and restorations may be performed by running rundll32.exe keymgr.dll KRShowKeyMgr then selecting the “Back up...” button on the “Stored User Names and Passwords” GUI. Password recovery tools may also obtain plain text passwords from the Credential Manager.","detection":"Monitor process and command-line parameters of vaultcmd.exe for suspicious activity, such as listing credentials from the Windows Credentials locker (i.e., vaultcmd /listcreds:“Windows Credentials”). Consider monitoring API calls such as CredEnumerateA that may list credentials from the Windows Credential Manager. Consider monitoring file reads to Vault locations, %Systemdrive%\\Users\\\\[Username]\\AppData\\Local\\Microsoft\\\\[Vault/Credentials]\\, for suspicious activity.","procedures":["[G0049] OilRig: OilRig has used credential dumping tool named VALUEVAULT to steal credentials from the Windows Credential Manager.","[G0038] Stealth Falcon: Stealth Falcon malware gathers passwords from the Windows Credential Vault.","[S0476] Valak: Valak can use a .NET compiled module named exchgrabber to enumerate credentials from the Credential Manager.","[G0010] Turla: Turla has gathered credentials from the Windows Credential Manager tool.","[S0349] LaZagne: LaZagne can obtain credentials from Vault files.","[S0681] Lizar: Lizar has a plugin that can retrieve credentials from Internet Explorer and Microsoft Edge using `vaultcmd.exe` and another that can collect RDP access credentials using the `CredEnumerateW` function.","[S0240] ROKRAT: ROKRAT can steal credentials by leveraging the Windows Vault mechanism.","[S0629] RainyDay: RainyDay can use the QuarksPwDump tool to obtain local passwords and domain cached credentials.","[S0692] SILENTTRINITY: SILENTTRINITY can gather Windows Vault credentials.","[C0044] Juicy Mix: During Juicy Mix, OilRig used a Windows Credential Manager stealer for credential access.","[S0002] Mimikatz: Mimikatz contains functionality to acquire credentials from the Windows Credential Manager.","[S0526] KGH_SPY: KGH_SPY can collect credentials from the Windows Credential Manager.","[S0194] PowerSploit: PowerSploit contains a collection of Exfiltration modules that can harvest credentials from Windows vault credential objects.","[G0102] Wizard Spider: Wizard Spider has used PowerShell cmdlet `Invoke-WCMDump` to enumerate Windows credentials in the Credential Manager in a compromised network."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.005","technique_name":"Credentials from Password Stores: Password Managers","description":"Adversaries may acquire user credentials from third-party password managers. Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk. Adversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory. Adversaries may extract credentials from memory via Exploitation for Credential Access. Adversaries may also try brute forcing via Password Guessing to obtain the master password of a password manager.","detection":"Consider monitoring API calls, file read events, and processes for suspicious activity that could indicate searching in process memory of password managers. Consider monitoring file reads surrounding known password manager applications.","procedures":["[C0014] Operation Wocao: During Operation Wocao, threat actors accessed and collected credentials from password managers.","[G0027] Threat Group-3390: Threat Group-3390 obtained a KeePass database from a compromised host.","[G0119] Indrik Spider: Indrik Spider has accessed and exported passwords from password managers.","[G0117] Fox Kitten: Fox Kitten has used scripts to access credential information from the KeePass database.","[S0652] MarkiRAT: MarkiRAT can gather information from the Keepass password manager.","[S0279] Proton: Proton gathers credentials in files for 1password.","[S0266] TrickBot: TrickBot can steal passwords from the KeePass open source password manager.","[G1004] LAPSUS$: LAPSUS$ has accessed local password managers and databases to obtain further credentials from a compromised network."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1555.006","technique_name":"Credentials from Password Stores: Cloud Secrets Management Stores","description":"Adversaries may acquire credentials from cloud-native secret management solutions such as AWS Secrets Manager, GCP Secret Manager, Azure Key Vault, and Terraform Vault. Secrets managers support the secure centralized management of passwords, API keys, and other credential material. Where secrets managers are in use, cloud services can dynamically acquire credentials via API requests rather than accessing secrets insecurely stored in plain text files or environment variables. If an adversary is able to gain sufficient privileges in a cloud environment – for example, by obtaining the credentials of high-privileged Cloud Accounts or compromising a service that has permission to retrieve secrets – they may be able to request secrets from the secrets manager. This can be accomplished via commands such as `get-secret-value` in AWS, `gcloud secrets describe` in GCP, and `az key vault secret show` in Azure. **Note:** this technique is distinct from Cloud Instance Metadata API in that the credentials are being directly requested from the cloud secrets manager, rather than through the medium of the instance metadata API.","detection":null,"procedures":["[G0125] HAFNIUM: HAFNIUM has moved laterally from on-premises environments to steal passwords from Azure key vaults.","[S1091] Pacu: Pacu can retrieve secrets from the AWS Secrets Manager via the enum_secrets module."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.001","technique_name":"Modify Authentication Process: Domain Controller Authentication","description":"Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: Skeleton Key). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.","detection":"Monitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll). Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g. a user has an active login session but has not entered the building or does not have VPN access).","procedures":["[G0114] Chimera: Chimera's malware has altered the NTLM authentication program on domain controllers to allow Chimera to login without a valid credential.","[S0007] Skeleton Key: Skeleton Key is used to patch an enterprise domain controller authentication process with a backdoor password. It allows adversaries to bypass the standard authentication system to use a defined password for all accounts authenticating to that domain controller."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.002","technique_name":"Modify Authentication Process: Password Filter DLL","description":"Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.","detection":"Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference. Password filters will also show up as an autorun and loaded DLL in lsass.exe.","procedures":["[S0125] Remsec: Remsec harvests plain-text credentials as a password filter registered on domain controllers.","[G0049] OilRig: OilRig has registered a password filter DLL in order to drop malware.","[G0041] Strider: Strider has registered its persistence module on domain controllers as a Windows LSA (Local System Authority) password filter to acquire credentials any time a domain, local user, or administrator logs in or changes a password."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.003","technique_name":"Modify Authentication Process: Pluggable Authentication Modules","description":"Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow. Adversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials. Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.","detection":"Monitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).","procedures":["[S0377] Ebury: Ebury can deactivate PAM modules to tamper with the sshd configuration.","[S0468] Skidmap: Skidmap has the ability to replace the pam_unix.so file on an infected machine with its own malicious version that accepts a specific backdoor password for all users."],"tactics":"TA0006 - Credential Access"}
{"technique_id":"T1556.004","technique_name":"Modify Authentication Process: Network Device Authentication","description":"Adversaries may use Patch System Image to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices. Modify System Image may include implanted code to the operating system for network devices to provide access for adversaries using a specific password. The modification includes a specific password which is implanted in the operating system image via the patch. Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.","detection":"Consider verifying the checksum of the operating system file and verifying the image of the operating system in memory. Detection of this behavior may be difficult, detection efforts may be focused on closely related adversary behaviors, such as Modify System Image.","procedures":["[S1104] SLOWPULSE: SLOWPULSE can modify LDAP and two factor authentication flows by inspecting login credentials and forcing successful authentication if the provided password matches a chosen backdoor password.","[S0519] SYNful Knock: SYNful Knock has the capability to add its own custom backdoor password when it modifies the operating system of the affected network device."],"tactics":"TA0006 - Credential Access"}