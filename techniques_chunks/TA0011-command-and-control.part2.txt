{"technique_id":"T1132.001","technique_name":"Data Encoding: Standard Encoding","description":"Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME. Some data encoding systems may also result in data compression, such as gzip.","detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.","procedures":["[S0610] SideTwist: SideTwist has used Base64 for encoded C2 traffic.","[S0410] Fysbis: Fysbis can use Base64 to encode its C2 traffic.","[S1021] DnsSystem: DnsSystem can Base64 encode data sent to C2.","[S0045] ADVSTORESHELL: C2 traffic from ADVSTORESHELL is encrypted, then encoded with Base64 encoding.","[S0696] Flagpro: Flagpro has encoded bidirectional data communications between a target system and C2 server using Base64.","[S0603] Stuxnet: Stuxnet transforms encrypted binary data into an ASCII string in order to use it as a URL parameter value.","[S0053] SeaDuke: SeaDuke C2 traffic is base64-encoded.","[S1160] Latrodectus: Latrodectus has Base64-encoded the message body of a HTTP request sent to C2.","[S1196] Troll Stealer: Troll Stealer performs XOR encryption and Base64 encoding of data prior to sending to command and control infrastructure.","[G0034] Sandworm Team: Sandworm Team's BCS-server tool uses base64 encoding and HTML tags for the communication traffic between the C2 server.","[S0663] SysUpdate: SysUpdate has used Base64 to encode its C2 traffic.","[S0631] Chaes: Chaes has used Base64 to encode C2 communications.","[S1020] Kevin: Kevin can Base32 encode chunks of output files during exfiltration.","[S0472] down_new: down_new has the ability to base64 encode C2 communications.","[G0040] Patchwork: Patchwork used Base64 to encode C2 traffic.","[S0678] Torisma: Torisma has encoded C2 communications with Base64.","[S0044] JHUHUGIT: A JHUHUGIT variant encodes C2 POST data base64.","[S0559] SUNBURST: SUNBURST used Base64 encoding in its C2 traffic.","[S1060] Mafalda: Mafalda can encode data using Base64 prior to exfiltration.","[S0649] SMOKEDHAM: SMOKEDHAM has encoded its C2 traffic with Base64.","[S1110] SLIGHTPULSE: SLIGHTPULSE can base64 encode all incoming and outgoing C2 messages.","[S0137] CORESHELL: CORESHELL C2 messages are Base64-encoded.","[S0269] QUADAGENT: QUADAGENT encodes C2 communications with base64.","[S0373] Astaroth: Astaroth encodes data using Base64 before sending it to the C2 server.","[G1044] APT42: APT42 has encoded C2 traffic with Base64.","[S0144] ChChes: ChChes can encode C2 data with a custom technique that utilizes Base64.","[S1078] RotaJakiro: RotaJakiro uses ZLIB Compression to compresses data sent to the C2 server in the `payload` section network communication packet.","[S0520] BLINDINGCAN: BLINDINGCAN has encoded its C2 traffic with Base64.","[S1193] TAMECAT: TAMECAT has encoded C2 traffic with Base64.","[S0367] Emotet: Emotet has used Google’s Protobufs to serialize data sent to and from the C2 server. Additionally, Emotet has used Base64 to encode data before sending to the C2 server.","[S0340] Octopus: Octopus has encoded C2 communications in Base64.","[S0187] Daserf: Daserf uses custom base64 encoding to obfuscate HTTP traffic.","[S0495] RDAT: RDAT can communicate with the C2 via base32-encoded subdomains.","[S0124] Pisloader: Responses from the Pisloader C2 server are base32-encoded.","[S0632] GrimAgent: GrimAgent can base64 encode C2 replies.","[S1112] STEADYPULSE: STEADYPULSE can transmit URL encoded data over C2.","[G0060] BRONZE BUTLER: Several BRONZE BUTLER tools encode data with base64 when posting it to a C2 server.","[S0543] Spark: Spark has encoded communications with the C2 server with base64.","[S0459] MechaFlounder: MechaFlounder has the ability to use base16 encoded strings in C2.","[S0354] Denis: Denis encodes the data sent to the server in Base64.","[S0264] OopsIE: OopsIE encodes data in hexadecimal format over the C2 channel.","[S0265] Kazuar: Kazuar encodes communications to the C2 server in Base64.","[S0409] Machete: Machete has used base64 encoding.","[S1031] PingPull: PingPull can encode C2 traffic with Base64.","[C0044] Juicy Mix: During Juicy Mix, OilRig used a VBS script to send the Base64-encoded name of the compromised computer to C2.","[G0127] TA551: TA551 has used encoded ASCII text for initial C2 communications.","[S0379] Revenge RAT: Revenge RAT uses Base64 to encode information sent to the C2 server.","[S1198] Gomir: Gomir uses Base64-encoded content in HTTP communications to command and control infrastructure.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D has used `zlib` to compress all data after 0x52 for the custom TCP C2 protocol.","[S0223] POWERSTATS: POWERSTATS encoded C2 traffic with base64.","[S0093] Backdoor.Oldrea: Some Backdoor.Oldrea samples use standard Base64 + bzip2, and some use standard Base64 + reverse XOR + RSA-2048 to decrypt data received from C2 servers.","[S0376] HOPLIGHT: HOPLIGHT has utilized Zlib compression to obfuscate the communications payload.","[S0439] Okrum: Okrum has used base64 to encode C2 communication.","[S1030] Squirrelwaffle: Squirrelwaffle has encoded its communications to C2 servers using Base64.","[S0128] BADNEWS: BADNEWS encodes C2 traffic with base64.","[S1039] Bumblebee: Bumblebee has the ability to base64 encode C2 server responses.","[S0385] njRAT: njRAT uses Base64 encoding for C2 traffic.","[S0266] TrickBot: TrickBot can Base64-encode C2 commands.","[S0084] Mis-Type: Mis-Type uses Base64 encoding for C2 traffic.","[S0129] AutoIt backdoor: AutoIt backdoor has sent a C2 response that was base64-encoded.","[S0085] S-Type: S-Type uses Base64 encoding for C2 traffic.","[G0032] Lazarus Group: A Lazarus Group malware sample encodes data with base64.","[S0673] DarkWatchman: DarkWatchman encodes data using hexadecimal representation before sending it to the C2 server.","[S0200] Dipsind: Dipsind encodes C2 traffic with base64.","[S0270] RogueRobin: RogueRobin base64 encodes strings that are sent to the C2 over its DNS tunnel.","[S0514] WellMess: WellMess has used Base64 encoding to uniquely identify communication to and from the C2.","[S1108] PULSECHECK: PULSECHECK can base-64 encode encrypted data sent through C2.","[S1183] StrelaStealer: StrelaStealer utilizes a hard-coded XOR key to encrypt the content of HTTP POST requests to command and control infrastructure.","[S0487] Kessel: Kessel has exfiltrated data via hexadecimal-encoded subdomain fields of DNS queries.","[G0081] Tropic Trooper: Tropic Trooper has used base64 encoding to hide command strings delivered from the C2.","[S0414] BabyShark: BabyShark has encoded data using certutil before exfiltration.","[S0015] Ixeshe: Ixeshe uses custom Base64 encoding schemes to obfuscate command and control traffic in the message body of HTTP requests.","[S1190] Kapeka: Kapeka utilizes JSON objects to send and receive information from command and control nodes.","[S1024] CreepySnail: CreepySnail can use Base64 to encode its C2 traffic.","[S0441] PowerShower: PowerShower has the ability to encode C2 communications with base64 encoding.","[S0113] Prikormka: Prikormka encodes C2 traffic with Base64.","[S0356] KONNI: KONNI has used a custom base64 key to encode stolen data before exfiltration.","[S0268] Bisonal: Bisonal has encoded binary data with Base64 and ASCII.","[S1202] LockBit 3.0: LockBit 3.0 can Base64-encode C2 communication.","[S0083] Misdat: Misdat network traffic is Base64-encoded plaintext.","[G0069] MuddyWater: MuddyWater has used tools to encode C2 communications including Base64 encoding.","[S1166] Solar: Solar can Base64-encode and gzip compress C2 communications including command outputs.","[S0338] Cobian RAT: Cobian RAT obfuscates communications with the C2 server using Base64 encoding.","[S0014] BS2005: BS2005 uses Base64 encoding for communication in the message body of an HTTP request.","[S1026] Mongall: Mongall can use Base64 to encode information sent to its C2.","[S0284] More_eggs: More_eggs has used basE91 encoding, along with encryption, for C2 communication.","[S1085] Sardonic: Sardonic can encode client ID data in 32 uppercase hex characters and transfer to the actor-controlled C2 server.","[S1138] Gootloader: Gootloader can retrieve a Base64 encoded stager from C2.","[S1099] Samurai: Samurai can base64 encode data sent in C2 communications prior to its encryption.","[S1145] Pikabot: Pikabot uses base64 encoding in conjunction with symmetric encryption mechanisms to obfuscate command and control communications.","[S1156] Manjusaka: Manjusaka communication includes a client-created session cookie with base64-encoded information representing information from the victim system.","[S0653] xCaon: xCaon has used Base64 to encode its C2 traffic.","[S1115] WIREFIRE: WIREFIRE can Base64 encode process output sent to C2.","[S0184] POWRUNER: POWRUNER can use base64 encoded C2 communications.","[S0171] Felismus: Some Felismus samples use a custom method for C2 traffic that utilizes Base64.","[S0476] Valak: Valak has returned C2 data as encoded ASCII.","[S0374] SpeakUp: SpeakUp encodes C&C communication using Base64.","[S1047] Mori: Mori can use Base64 encoded JSON libraries used in C2.","[S0377] Ebury: Ebury has encoded C2 traffic in hexadecimal format.","[S1169] Mango: Mango can receive Base64-encoded commands from C2.","[S0032] gh0st RAT: gh0st RAT has used Zlib to compress C2 communications data before encrypting it.","[S0081] Elise: Elise exfiltrates data using cookie values that are Base64-encoded.","[S0154] Cobalt Strike: Cobalt Strike can use Base64, URL-safe Base64, or NetBIOS encoding in its C2 traffic.","[G0073] APT19: An APT19 HTTP malware variant used Base64 to encode communications to the C2 server.","[S0650] QakBot: QakBot can Base64 encode system information sent to C2.","[S0251] Zebrocy: Zebrocy has used URL/Percent Encoding on data exfiltrated via HTTP POST requests.","[S0030] Carbanak: Carbanak encodes the message body of HTTP traffic with Base64.","[S0633] Sliver: Sliver can use standard encoding techniques like gzip and hex to ASCII to encode the C2 communication payload.","[S1116] WARPWIRE: WARPWIRE can Base64 encode captured credentials with `btoa()` prior to sending to C2.","[G0064] APT33: APT33 has used base64 to encode command and control traffic.","[S1141] LunarWeb: LunarWeb can use Base64 encoding to obfuscate C2 commands.","[S1037] STARWHALE: STARWHALE has the ability to hex-encode collected data from an infected host.","[S0674] CharmPower: CharmPower can send additional modules over C2 encoded with base64.","[S0170] Helminth: For C2 over HTTP, Helminth encodes data with base64 and sends it via the \"Cookie\" field of HTTP requests. For C2 over DNS, Helminth converts ASCII characters into their hexadecimal values and sends the data in cleartext.","[S1018] Saint Bot: Saint Bot has used Base64 to encode its C2 communications.","[S1076] QUIETCANARY: QUIETCANARY can base64 encode C2 communications.","[S0458] Ramsay: Ramsay has used base64 to encode its C2 traffic.","[G0125] HAFNIUM: HAFNIUM has used ASCII encoding for C2 traffic.","[S1117] GLASSTOKEN: GLASSTOKEN has hexadecimal and Base64 encoded C2 content."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1132.002","technique_name":"Data Encoding: Non-Standard Encoding","description":"Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.","detection":"Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.","procedures":["[S0346] OceanSalt: OceanSalt can encode data with a NOT operation before sending the data to the control server.","[S1035] Small Sieve: Small Sieve can use a custom hex byte swapping encoding scheme to obfuscate tasking traffic.","[S1090] NightClub: NightClub has used a non-standard encoding in DNS tunneling removing any `=` from the result of base64 encoding, and replacing `/` characters with `-s` and `+` characters with `-p`.","[S0495] RDAT: RDAT can communicate with the C2 via subdomains that utilize base64 with character substitutions.","[S0260] InvisiMole: InvisiMole can use a modified base32 encoding to encode data within the subdomain of C2 requests.","[S0022] Uroburos: Uroburos can use a custom base62 and a de-facto base32 encoding that uses digits 0-9 and lowercase letters a-z in C2 communications.","[S1189] Neo-reGeorg: Neo-reGeorg can use modified Base64 encoding to obfuscate communications.","[S0031] BACKSPACE: Newer variants of BACKSPACE will encode C2 communications with a custom system.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can use a custom Base64 alphabet for encoding C2.","[S0239] Bankshot: Bankshot encodes commands from the control server using a range of characters and gzip.","[S0596] ShadowPad: ShadowPad has encoded data as readable Latin characters.","[S0687] Cyclops Blink: Cyclops Blink can use a custom binary scheme to encode messages with specific commands and parameters to be executed.","[S1100] Ninja: Ninja can encode C2 communications with a base64 algorithm using a custom alphabet.","[S1046] PowGoop: PowGoop can use a modified Base64 encoding mechanism to send data to and from the C2 server."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1205.001","technique_name":"Traffic Signaling: Port Knocking","description":"Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software. This technique has been observed both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system. The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.","detection":"Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.","procedures":["[S1060] Mafalda: Mafalda can use port-knocking to authenticate itself to another implant called Cryshell to establish an indirect connection to the C2 server.","[G0056] PROMETHIUM: PROMETHIUM has used a script that configures the knockd service and firewall to only accept C2 connections from systems that use a specified sequence of knock ports.","[S1204] cd00r: cd00r can monitor for a single TCP-SYN packet to be sent in series to a configurable set of ports (200, 80, 22, 53 and 3 in the original code) before opening a port for communication.","[S1059] metaMain: metaMain has authenticated itself to a different implant, Cryshell, through a port knocking and handshake procedure."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1205.002","technique_name":"Traffic Signaling: Socket Filters","description":"Adversaries may attach filters to a network socket to monitor then activate backdoors used for persistence or command and control. With elevated permissions, adversaries can use features such as the `libpcap` library to open sockets and install filters to allow or disallow certain types of data to come through the socket. The filter may apply to all traffic passing through the specified network interface (or every interface if not specified). When the network interface receives a packet matching the filter criteria, additional actions can be triggered on the host, such as activation of a reverse shell. To establish a connection, an adversary sends a crafted packet to the targeted host that matches the installed filter criteria. Adversaries have used these socket filters to trigger the installation of implants, conduct ping backs, and to invoke command shells. Communication with these socket filters may also be used in conjunction with Protocol Tunneling. Filters can be installed on any Unix-like platform with `libpcap` installed or on Windows hosts using `Winpcap`. Adversaries may use either `libpcap` with `pcap_setfilter` or the standard library function `setsockopt` with `SO_ATTACH_FILTER` options. Since the socket connection is not active until the packet is received, this behavior may be difficult to detect due to the lack of activity on a host, low CPU overhead, and limited visibility into raw socket usage.","detection":"Identify running processes with raw sockets. Ensure processes listed have a need for an open raw socket and are in accordance with enterprise policy.","procedures":["[S1161] BPFDoor: BPFDoor uses BPF bytecode to attach a filter to a network socket to view ICMP, UDP, or TCP packets coming through ports 22 (ssh), 80 (http), and 443 (https). When BPFDoor finds a packet containing its “magic” bytes, it parses out two fields and forks itself. The parent process continues to monitor filtered traffic while the child process executes the instructions from the parsed fields.","[S1123] PITSTOP: PITSTOP can listen and evaluate incoming commands on the domain socket, created by PITHOOK malware, located at `/data/runtime/cockpit/wd.fd` for a predefined magic byte sequence. PITSTOP can then duplicate the socket for further communication over TLS.","[S0587] Penquin: Penquin installs a `TCP` and `UDP` filter on the `eth0` interface."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1219.001","technique_name":"Remote Access Tools: IDE Tunneling","description":"Adversaries may abuse Integrated Development Environment (IDE) software with remote development features to establish an interactive command and control channel on target systems within a network. IDE tunneling combines SSH, port forwarding, file sharing, and debugging into a single secure connection, letting developers work on remote systems as if they were local. Unlike SSH and port forwarding, IDE tunneling encapsulates an entire session and may use proprietary tunneling protocols alongside SSH, allowing adversaries to blend in with legitimate development workflows. Some IDEs, like Visual Studio Code, also provide CLI tools (e.g., `code tunnel`) that adversaries may use to programmatically establish tunnels and generate web-accessible URLs for remote access. These tunnels can be authenticated through accounts such as GitHub, enabling the adversary to control the compromised system via a legitimate developer portal. Additionally, adversaries may use IDE tunneling for persistence. Some IDEs, such as Visual Studio Code and JetBrains, support automatic reconnection. Adversaries may configure the IDE to auto-launch at startup, re-establishing the tunnel upon execution. Compromised developer machines may also be exploited as jump hosts to move further into the network. IDE tunneling tools may be built-in or installed as IDE Extensions.","detection":null,"procedures":null,"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1219.002","technique_name":"Remote Access Tools: Remote Desktop Software","description":"An adversary may use legitimate desktop support software to establish an interactive command and control channel to target systems within networks. Desktop support software provides a graphical interface for remotely controlling another computer, transmitting the display output, keyboard input, and mouse control between devices using various protocols. Desktop support software, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment. Remote access modules/features may also exist as part of otherwise existing software such as Zoom or Google Chrome’s Remote Desktop.","detection":null,"procedures":["[G0120] Evilnum: EVILNUM has used the malware variant, TerraTV, to run a legitimate TeamViewer application to connect to compromised machines.","[G1046] Storm-1811: Storm-1811 has abused multiple types of legitimate remote access software and tools, such as ScreenConnect, NetSupport Manager, and AnyDesk.","[G0129] Mustang Panda: Mustang Panda has installed TeamViewer on targeted systems.","[C0018] C0018: During C0018, the threat actors used AnyDesk to transfer tools between systems.","[G0094] Kimsuky: Kimsuky has used a modified TeamViewer client as a command and control channel.","[G0076] Thrip: Thrip used a cloud-based remote access software called LogMeIn for their attacks.","[G0048] RTM: RTM has used a modified version of TeamViewer and Remote Utilities for remote access.","[C0015] C0015: During C0015, the threat actors installed the AnyDesk remote desktop application onto the compromised network."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1219.003","technique_name":"Remote Access Tools: Remote Access Hardware","description":"An adversary may use legitimate remote access hardware to establish an interactive command and control channel to target systems within networks. These services, including IP-based keyboard, video, or mouse (KVM) devices such as TinyPilot and PiKVM, are commonly used as legitimate tools and may be allowed by peripheral device policies within a target environment. Remote access hardware may be physically installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote session with the target system. Using hardware-based remote access tools may allow threat actors to bypass software security solutions and gain more control over the compromised device(s).","detection":null,"procedures":null,"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1568.001","technique_name":"Dynamic Resolution: Fast Flux DNS","description":"Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record. The simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution. In contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.","detection":"In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.","procedures":["[S1025] Amadey: Amadey has used fast flux DNS for its C2.","[G0045] menuPass: menuPass has used dynamic DNS service providers to host malicious domains.","[G0092] TA505: TA505 has used fast flux to mask botnets by distributing payloads across multiple IPs.","[S0032] gh0st RAT: gh0st RAT operators have used dynamic DNS to mask the true location of their C2 behind rapidly changing IP addresses.","[G0047] Gamaredon Group: Gamaredon Group has used fast flux DNS to mask their command and control channel behind rotating IP addresses.","[S0385] njRAT: njRAT has used a fast flux DNS for C2 IP resolution."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1568.002","technique_name":"Dynamic Resolution: Domain Generation Algorithms","description":"Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders to block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions. DGAs can take the form of apparently random or “gibberish” strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders. Adversaries may use DGAs for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.","detection":"Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more. CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains. Machine learning approaches to detecting DGA domains have been developed and have seen success in applications. One approach is to use N-Gram methods to determine a randomness score for strings used in the domain name. If the randomness score is high, and the domains are not whitelisted (CDN, etc), then it may be determined if a domain is related to a legitimate host or DGA. Another approach is to use deep learning to classify domains as DGA-generated.","procedures":["[S0456] Aria-body: Aria-body has the ability to use a DGA for C2 communications.","[S0650] QakBot: QakBot can use domain generation algorithms in C2 communication.","[S0600] Doki: Doki has used the DynDNS service and a DGA based on the Dogecoin blockchain to generate C2 domains.","[S0051] MiniDuke: MiniDuke can use DGA to generate new Twitter URLs for C2.","[S0150] POSHSPY: POSHSPY uses a DGA to derive command and control URLs from a word list.","[S0673] DarkWatchman: DarkWatchman has used a DGA to generate a domain name for C2.","[S0360] BONDUPDATER: BONDUPDATER uses a DGA to communicate with command and control servers.","[G0096] APT41: APT41 has used DGAs to change their C2 servers monthly.","[G0127] TA551: TA551 has used a DGA to generate URLs from executed macros.","[S0608] Conficker: Conficker has used a DGA that seeds with the current UTC victim system date to generate domains.","[S0023] CHOPSTICK: CHOPSTICK can use a DGA for Fallback Channels, domains are generated by concatenating words from lists.","[S0508] ngrok: ngrok can provide DGA for C2 servers through the use of random URL strings that change every 12 hours.","[S0386] Ursnif: Ursnif has used a DGA to generate domain names for C2.","[S1015] Milan: Milan can use hardcoded domains as an input for domain generation algorithms.","[S0615] SombRAT: SombRAT can use a custom DGA to generate a subdomain for C2.","[S0222] CCBkdr: CCBkdr can use a DGA for Fallback Channels if communications with the primary command and control server are lost.","[S0531] Grandoreiro: Grandoreiro can use a DGA for hiding C2 addresses, including use of an algorithm with a user-specific key that changes daily.","[S0596] ShadowPad: ShadowPad uses a DGA that is based on the day of the month for C2 servers.","[S0373] Astaroth: Astaroth has used a DGA in C2 communications.","[S0534] Bazar: Bazar can implement DGA using the current date as a seed variable.","[S1019] Shark: Shark can send DNS C2 communications using a unique domain generation algorithm.","[S0377] Ebury: Ebury has used a DGA to generate a domain name for C2."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1568.003","technique_name":"Dynamic Resolution: DNS Calculation","description":"Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel. One implementation of DNS Calculation is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.","detection":"Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.","procedures":["[G0005] APT12: APT12 has used multiple variants of DNS Calculation including multiplying the first two octets of an IP address and adding the third octet to that value in order to get a resulting command and control port."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1571","technique_name":"Non-Standard Port","description":"Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data. Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings.","detection":"Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.","procedures":["[G0090] WIRTE: WIRTE has used HTTPS over ports 2083 and 2087 for C2.","[S1211] Hannotog: Hannotog uses non-standard listening ports, such as UDP 5900, for command and control purposes.","[G0091] Silence: Silence has used port 444 when sending data about the system from the client to the server.","[S1031] PingPull: PingPull can use HTTPS over port 8080 for C2.","[G1042] RedEcho: RedEcho has used non-standard ports such as TCP 8080 for HTTP communication.","[S0367] Emotet: Emotet has used HTTP over ports such as 20, 22, 443, 7080, and 50000, in addition to using ports commonly associated with HTTP/S.","[S0491] StrongPity: StrongPity has used HTTPS over port 1402 in C2 communication.","[S0428] PoetRAT: PoetRAT used TLS to encrypt communications over port 143","[S0493] GoldenSpy: GoldenSpy has used HTTP over ports 9005 and 9006 for network traffic, 9002 for C2 requests, 33666 as a WebSocket, and 8090 to download files.","[S1155] Covenant: Covenant listeners and controllers can be configured to use non-standard ports.","[S1049] SUGARUSH: SUGARUSH has used port 4585 for a TCP connection to its C2.","[S1130] Raspberry Robin: Raspberry Robin will communicate via HTTP over port 8080 for command and control traffic.","[C0014] Operation Wocao: During Operation Wocao, the threat actors used uncommon high ports for its backdoor C2, including ports 25667 and 47000.","[S0515] WellMail: WellMail has been observed using TCP port 25, without using SMTP, to leverage an open port for secure command and control communications.","[S0376] HOPLIGHT: HOPLIGHT has connected outbound over TCP port 443 with a FakeTLS method.","[S0412] ZxShell: ZxShell can use ports 1985 and 1986 in HTTP/S communication.","[G1003] Ember Bear: Ember Bear has used various non-standard ports for C2 communication.","[S0149] MoonWind: MoonWind communicates over ports 80, 443, 53, and 8080 via raw sockets instead of the protocols usually associated with the ports.","[G0050] APT32: An APT32 backdoor can use HTTP over a non-standard TCP port (e.g 14146) which is specified in the backdoor configuration.","[C0018] C0018: During C0018, the threat actors opened a variety of ports, including ports 28035, 32467, 41578, and 46892, to establish RDP connections.","[G1047] Velvet Ant: Velvet Ant has used random high number ports for PlugX listeners on victim devices.","[S0246] HARDRAIN: HARDRAIN binds and listens on port 443 with a FakeTLS method.","[S1145] Pikabot: Pikabot uses non-standard ports, such as 2967, 2223, and others, for HTTPS command and control communication.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D has used a custom binary protocol over TCP port 443 for C2.","[S0455] Metamorfo: Metamorfo has communicated with hosts over raw TCP on port 9999.","[C0032] C0032: During the C0032 campaign, TEMP.Veles used port-protocol mismatches on ports such as 443, 4444, 8531, and 50501 during C2.","[S0574] BendyBear: BendyBear has used a custom RC4 and XOR encrypted protocol over port 443 for C2.","[G0034] Sandworm Team: Sandworm Team has used port 6789 to accept connections on the group's SSH server.","[G0032] Lazarus Group: Some Lazarus Group malware uses a list of ordered port numbers to choose a port for C2 traffic, creating port-protocol mismatches.","[S0385] njRAT: njRAT has used port 1177 for HTTP C2 communications.","[G0046] FIN7: FIN7 has used port-protocol mismatches on ports such as 53, 80, 443, and 8080 during C2.","[S1085] Sardonic: Sardonic has the ability to connect with actor-controlled C2 servers using a custom binary protocol over port 443.","[S1016] MacMa: MacMa has used TCP port 5633 for C2 Communication.","[S0021] Derusbi: Derusbi has used unencrypted HTTP on port 443 for C2.","[S1078] RotaJakiro: RotaJakiro uses a custom binary protocol over TCP port 443.","[S0148] RTM: RTM used Port 44443 for its VNC module.","[G0059] Magic Hound: Magic Hound malware has communicated with its C2 server over TCP ports 4443 and 10151 using HTTP.","[S0266] TrickBot: Some TrickBot samples have used HTTP over ports 447 and 8082 for C2. Newer versions of TrickBot have been known to use a custom communication protocol which sends the data unencrypted over port 443.","[S0262] QuasarRAT: QuasarRAT can use port 4782 on the compromised host for TCP callbacks.","[S0245] BADCALL: BADCALL communicates on ports 443 and 8000 with a FakeTLS method.","[S0013] PlugX: PlugX has used random, high-number, non-standard ports to listen for subsequent actions and C2 activities.","[G0105] DarkVishnya: DarkVishnya used ports 5190 and 7900 for shellcode listeners, and 4444, 4445, 31337 for shellcode C2.","[C0043] Indian Critical Infrastructure Intrusions: During Indian Critical Infrastructure Intrusions, RedEcho used non-standard ports such as TCP 8080 for HTTP communication.","[S0263] TYPEFRAME: TYPEFRAME has used ports 443, 8080, and 8443 with a FakeTLS method.","[C0035] KV Botnet Activity: KV Botnet Activity generates a random port number greater than 30,000 to serve as the listener for subsequent command and control activity.","[G0099] APT-C-36: APT-C-36 has used port 4050 for C2 communications.","[S0237] GravityRAT: GravityRAT has used HTTP over a non-standard port, such as TCP port 46769.","[G0064] APT33: APT33 has used HTTP over TCP ports 808 and 880 for command and control.","[S0239] Bankshot: Bankshot binds and listens on port 1058 for HTTP traffic while also utilizing a FakeTLS method.","[S0153] RedLeaves: RedLeaves can use HTTP over non-standard ports, such as 995, for C2.","[S0687] Cyclops Blink: Cyclops Blink can use non-standard ports for C2 not typically associated with HTTP or HTTPS traffic.","[G0106] Rocke: Rocke's miner connects to a C2 server using port 51640."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1572","technique_name":"Protocol Tunneling","description":"Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. Protocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. Adversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol or Service Impersonation to further conceal C2 communications and infrastructure.","detection":"Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.","procedures":["[C0027] C0027: During C0027, Scattered Spider used SSH tunneling in targeted environments.","[S1189] Neo-reGeorg: Neo-reGeorg can tunnel data in and out of targeted networks.","[G1016] FIN13: FIN13 has utilized web shells and Java tools for tunneling capabilities to and from compromised assets.","[C0032] C0032: During the C0032 campaign, TEMP.Veles used encrypted SSH-based PLINK tunnels to transfer tools and enable RDP connections throughout the environment.","[S1027] Heyoka Backdoor: Heyoka Backdoor can use spoofed DNS requests to create a bidirectional tunnel between a compromised host and its C2 servers.","[G0059] Magic Hound: Magic Hound has used Plink to tunnel RDP over SSH.","[G0037] FIN6: FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.","[G1045] Salt Typhoon: Salt Typhoon has modified device configurations to create and use Generic Routing Encapsulation (GRE) tunnels.","[S1187] reGeorg: reGeorg can tunnel TCP sessions including RDP, SSH, and SMB through HTTP.","[S1141] LunarWeb: LunarWeb can run a custom binary protocol under HTTPS for C2.","[S0038] Duqu: Duqu uses a custom command and control protocol that communicates over commonly used ports, and is frequently encapsulated by application layer protocols.","[S1044] FunnyDream: FunnyDream can connect to HTTP proxies via TCP to create a tunnel to C2.","[G1003] Ember Bear: Ember Bear has used ProxyChains to tunnel protocols to internal networks.","[S1020] Kevin: Kevin can use a custom protocol tunneled through DNS or HTTP.","[S0604] Industroyer: Industroyer attempts to perform an HTTP CONNECT via an internal proxy to establish a tunnel.","[S1144] FRP: FRP can tunnel SSH and Unix Domain Socket communications over TCP between external nodes and exposed resources behind firewalls or NAT.","[C0034] 2022 Ukraine Electric Power Attack: During the 2022 Ukraine Electric Power Attack, Sandworm Team deployed the GOGETTER tunneler software to establish a “Yamux” TLS-based C2 channel with an external server(s).","[S1063] Brute Ratel C4: Brute Ratel C4 can use DNS over HTTPS for C2.","[G0114] Chimera: Chimera has encapsulated Cobalt Strike's C2 protocol in DNS and HTTPS.","[S1015] Milan: Milan can use a custom protocol tunneled through DNS or HTTP.","[C0029] Cutting Edge: During Cutting Edge, threat actors used Iodine to tunnel IPv4 traffic over DNS.","[S0022] Uroburos: Uroburos has the ability to communicate over custom communications methodologies that ride over common network protocols including raw TCP and UDP sockets, HTTP, SMTP, and DNS.","[G0049] OilRig: OilRig has used the Plink utility and other tools to create tunnels to C2 servers.","[S0154] Cobalt Strike: Cobalt Strike uses a custom command and control protocol that is encapsulated in HTTP, HTTPS, or DNS. In addition, it conducts peer-to-peer communication over Windows named pipes encapsulated in the SMB protocol. All protocols use their standard assigned ports.","[G0117] Fox Kitten: Fox Kitten has used protocol tunneling for communication and RDP activity on compromised hosts through the use of open source tools such as ngrok and custom tool SSHMinion.","[G0080] Cobalt Group: Cobalt Group has used the Plink utility to create SSH tunnels.","[G1021] Cinnamon Tempest: Cinnamon Tempest has used the Iox and NPS proxy and tunneling tools in combination create multiple connections through a single tunnel.","[S0508] ngrok: ngrok can tunnel RDP and other services securely over internet connections.","[S0699] Mythic: Mythic can use SOCKS proxies to tunnel traffic through another protocol.","[C0004] CostaRicto: During CostaRicto, the threat actors set up remote SSH tunneling into the victim's environment from a malicious domain.","[S0173] FLIPSIDE: FLIPSIDE uses RDP to tunnel traffic from a victim environment.","[S0650] QakBot: The QakBot proxy module can encapsulate SOCKS5 protocol within its own proxy protocol.","[S0687] Cyclops Blink: Cyclops Blink can use DNS over HTTPS (DoH) to resolve C2 nodes.","[G0065] Leviathan: Leviathan has used protocol tunneling to further conceal C2 communications and infrastructure."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1573.001","technique_name":"Encrypted Channel: Symmetric Cryptography","description":"Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.","detection":"With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.","procedures":["[S0384] Dridex: Dridex has encrypted traffic with RC4.","[S0649] SMOKEDHAM: SMOKEDHAM has encrypted its C2 traffic with RC4.","[S0260] InvisiMole: InvisiMole uses variations of a simple XOR encryption routine for C&C communications.","[S0663] SysUpdate: SysUpdate has used DES to encrypt all C2 communications.","[S0367] Emotet: Emotet is known to use RSA keys for encrypting C2 traffic.","[S0113] Prikormka: Prikormka encrypts some C2 traffic with the Blowfish cipher.","[S0066] 3PARA RAT: 3PARA RAT command and control commands are encrypted within the HTTP C2 channel using the DES algorithm in CBC mode with a key derived from the MD5 hash of the string HYF54&%9&jkMCXuiS. 3PARA RAT will use an 8-byte XOR key derived from the string HYF54&%9&jkMCXuiS if the DES decoding fails","[S1202] LockBit 3.0: LockBit 3.0 can encrypt C2 communications with AES.","[S0034] NETEAGLE: NETEAGLE will decrypt resources it downloads with HTTP requests by using RC4 with the key \"ScoutEagle.\"","[S0409] Machete: Machete has used AES to exfiltrate documents.","[S0344] Azorult: Azorult can encrypt C2 traffic using XOR.","[S0268] Bisonal: Bisonal variants reported on in 2014 and 2015 used a simple XOR cipher for C2. Some Bisonal samples encrypt C2 communications with RC4.","[S0060] Sys10: Sys10 uses an XOR 0x1 loop to encrypt its C2 domain.","[S0081] Elise: Elise encrypts exfiltrated data with RC4.","[S0141] Winnti for Windows: Winnti for Windows can XOR encrypt C2 traffic.","[S0664] Pandora: Pandora has the ability to encrypt communications with D3DES.","[S0128] BADNEWS: BADNEWS encrypts C2 data with a ROR by 3 and an XOR by 0x23.","[S0272] NDiskMonitor: NDiskMonitor uses AES to encrypt certain information sent over its C2 channel.","[G0129] Mustang Panda: Mustang Panda has encrypted C2 communications with RC4.","[S1076] QUIETCANARY: QUIETCANARY can RC4 encrypt C2 communications.","[S1085] Sardonic: Sardonic has the ability to use an RC4 key to encrypt communications to and from actor-controlled C2 servers.","[G0012] Darkhotel: Darkhotel has used AES-256 and 3DES for C2 communications.","[S0438] Attor: Attor has encrypted data symmetrically using a randomly generated Blowfish (OFB) key which is encrypted with a public RSA key.","[S0010] Lurid: Lurid performs XOR encryption.","[S1034] StrifeWater: StrifeWater can encrypt C2 traffic using XOR with a hard coded key.","[S0220] Chaos: Chaos provides a reverse shell connection on 8338/TCP, encrypted via AES.","[S0371] POWERTON: POWERTON has used AES for encrypting C2 traffic.","[S0559] SUNBURST: SUNBURST encrypted C2 traffic using a single-byte-XOR cipher.","[S0284] More_eggs: More_eggs has used an RC4-based encryption method for its C2 communications.","[S0009] Hikit: Hikit performs XOR encryption.","[S0198] NETWIRE: NETWIRE can use AES encryption for C2 data transferred.","[S0170] Helminth: Helminth encrypts data sent to its C2 server over HTTP with RC4.","[S0262] QuasarRAT: QuasarRAT uses AES with a hardcoded pre-shared key to encrypt network communication.","[S0431] HotCroissant: HotCroissant has compressed network communications and encrypted them with a custom stream cipher.","[S0486] Bonadan: Bonadan can XOR-encrypt C2 communications.","[S0532] Lucifer: Lucifer can perform a decremental-xor encryption on the initial C2 request before sending it over the wire.","[S0011] Taidoor: Taidoor uses RC4 to encrypt the message body of HTTP content.","[S0087] Hi-Zor: Hi-Zor encrypts C2 traffic with a double XOR using two distinct single-byte keys.","[S0181] FALLCHILL: FALLCHILL encrypts C2 data with RC4 encryption.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group used an AES key to communicate with their C2 server.","[S0256] Mosquito: Mosquito uses a custom encryption algorithm, which consists of XOR and a stream that is similar to the Blum Blum Shub algorithm.","[S0200] Dipsind: Dipsind encrypts C2 data with AES256 in ECB mode.","[S0674] CharmPower: CharmPower can send additional modules over C2 encrypted with a simple substitution cipher.","[S0245] BADCALL: BADCALL encrypts C2 traffic using an XOR/ADD cipher.","[S0670] WarzoneRAT: WarzoneRAT can encrypt its C2 with RC4 with the password `warzone160\\x00`.","[S0037] HAMMERTOSS: Before being appended to image files, HAMMERTOSS commands are encrypted with a key composed of both a hard-coded value and a string contained on that day's tweet. To decrypt the commands, an investigator would need access to the intended malware sample, the day's tweet, and the image file containing the command.","[S1169] Mango: Mango can receive XOR-encrypted commands from C2.","[S1141] LunarWeb: LunarWeb can send AES encrypted C2 commands.","[S0022] Uroburos: Uroburos can encrypt the data beneath its http2 or tcp encryption at the session layer with CAST-128, using a different key for incoming and outgoing data.","[S0610] SideTwist: SideTwist can encrypt C2 communications with a randomly generated key.","[S0352] OSX_OCEANLOTUS.D: OSX_OCEANLOTUS.D encrypts data sent back to the C2 using AES in CBC mode with a null initialization vector (IV) and a key sent from the server that is padded to 32 bytes.","[S0082] Emissary: The C2 server response to a beacon sent by a variant of Emissary contains a 36-character GUID value that is used as an encryption key for subsequent network communications. Some variants of Emissary use various XOR operations to encrypt C2 data.","[S0076] FakeM: The original variant of FakeM encrypts C2 traffic using a custom encryption cipher that uses an XOR key of “YHCRA” and bit rotation between each XOR operation. Some variants of FakeM use RC4 to encrypt C2 traffic.","[S0650] QakBot: QakBot can RC4 encrypt strings in C2 communication.","[G0032] Lazarus Group: Several Lazarus Group malware families encrypt C2 traffic using custom code that uses XOR with an ADD operation and XOR with a SUB operation. Another Lazarus Group malware sample XORs C2 traffic. Other Lazarus Group malware uses Caracachs encryption to encrypt C2 payloads. Lazarus Group has also used AES to encrypt C2 traffic.","[S1026] Mongall: Mongall has the ability to RC4 encrypt C2 communications.","[S0348] Cardinal RAT: Cardinal RAT uses a secret key with a series of XOR and addition operations to encrypt C2 traffic.","[S0074] Sakula: Sakula encodes C2 traffic with single-byte XOR keys.","[G0128] ZIRCONIUM: ZIRCONIUM has used AES encrypted communications in C2.","[S1193] TAMECAT: TAMECAT has used AES to encrypt C2 traffic.","[G1017] Volt Typhoon: Volt Typhoon has used a version of the Awen web shell that employed AES encryption and decryption for C2 communications.","[S0180] Volgmer: Volgmer uses a simple XOR cipher to encrypt traffic and files.","[S0068] httpclient: httpclient encrypts C2 content with XOR using a single byte, 0x12.","[S1119] LIGHTWIRE: LIGHTWIRE can RC4 encrypt C2 commands.","[S0394] HiddenWasp: HiddenWasp uses an RC4-like algorithm with an already computed PRGA generated key-stream for network communication.","[S0149] MoonWind: MoonWind encrypts C2 traffic using RC4 with a static key.","[S1100] Ninja: Ninja can XOR and AES encrypt C2 messages.","[S1145] Pikabot: Earlier Pikabot variants use a custom encryption procedure leveraging multiple mechanisms including AES with multiple rounds of Base64 encoding for its command and control communication. Later Pikabot variants eliminate the use of AES and instead use RC4 encryption for transmitted information.","[S0632] GrimAgent: GrimAgent can use an AES key to encrypt C2 communications.","[S0275] UPPERCUT: Some versions of UPPERCUT have used the hard-coded string “this is the encrypt key” for Blowfish encryption when communicating with a C2. Later versions have hard-coded keys uniquely for each C2 address.","[S0065] 4H RAT: 4H RAT obfuscates C2 communication using a 1-byte XOR with the key 0xBE.","[S0430] Winnti for Linux: Winnti for Linux has used a custom TCP protocol with four-byte XOR for command and control (C2).","[G1039] RedCurl: RedCurl has used AES-128 CBC to encrypt C2 communications.","[S0266] TrickBot: TrickBot uses a custom crypter leveraging Microsoft’s CryptoAPI to encrypt C2 traffic.Newer versions of TrickBot have been known to use `bcrypt` to encrypt and digitally sign responses to their C2 server.","[G0038] Stealth Falcon: Stealth Falcon malware encrypts C2 traffic using RC4 with a hard-coded key.","[S0603] Stuxnet: Stuxnet encodes the payload of system information sent to the command and control servers using a one byte 0xFF XOR key. Stuxnet also uses a 31-byte long static byte string to XOR data sent to command and control servers. The servers use a different static key to encrypt replies to the implant.","[S0678] Torisma: Torisma has encrypted its C2 communications using XOR and VEST-32.","[S0377] Ebury: Ebury has encrypted C2 traffic using the client IP address, then encoded it as a hexadecimal string.","[S0495] RDAT: RDAT has used AES ciphertext to encode C2 communications.","[S0658] XCSSET: XCSSET uses RC4 encryption over TCP to communicate with its C2 server.","[S1099] Samurai: Samurai can encrypt C2 communications with AES.","[S1114] ZIPLINE: ZIPLINE can use AES-128-CBC to encrypt data for both upload and download.","[S0534] Bazar: Bazar can send C2 communications with XOR encryption.","[S0038] Duqu: The Duqu command and control protocol's data stream can be encrypted with AES-CBC.","[S0433] Rifdoor: Rifdoor has encrypted command and control (C2) communications with a stream cipher.","[S0203] Hydraq: Hydraq C2 traffic is encrypted using bitwise NOT and XOR operations.","[S0127] BBSRAT: BBSRAT uses a custom encryption algorithm on data sent back to the C2 server over HTTP.","[G0069] MuddyWater: MuddyWater has used AES to encrypt C2 responses.","[S0045] ADVSTORESHELL: A variant of ADVSTORESHELL encrypts some C2 with 3DES.","[S0395] LightNeuron: LightNeuron uses AES to encrypt C2 traffic.","[S0569] Explosive: Explosive has encrypted communications with the RC4 method.","[S0148] RTM: RTM encrypts C2 traffic with a custom RC4 variant.","[S1166] Solar: Solar can XOR encrypt C2 communications.","[S0582] LookBack: LookBack uses a modified version of RC4 for data transfer.","[S0586] TAINTEDSCRIBE: TAINTEDSCRIBE uses a Linear Feedback Shift Register (LFSR) algorithm for network encryption.","[S0641] Kobalos: Kobalos's post-authentication communication channel uses a 32-byte-long password with RC4 for inbound and outbound traffic.","[S0032] gh0st RAT: gh0st RAT uses RC4 and XOR to encrypt C2 traffic.","[S1060] Mafalda: Mafalda can encrypt its C2 traffic with RC4.","[S0615] SombRAT: SombRAT has encrypted its C2 communications with AES.","[S0514] WellMess: WellMess can encrypt HTTP POST data using RC6 and a dynamically generated AES key encrypted with a hard coded RSA public key.","[S0134] Downdelph: Downdelph uses RC4 to encrypt C2 responses.","[S0244] Comnie: Comnie encrypts command and control communications with RC4.","[S0574] BendyBear: BendyBear communicates to a C2 server over port 443 using modified RC4 and XOR-encrypted chunks.","[S0501] PipeMon: PipeMon communications are RC4 encrypted.","[S0537] HyperStack: HyperStack has used RSA encryption for C2 communications.","[S0168] Gazer: Gazer uses custom encryption for C2 that uses 3DES.","[S1144] FRP: FRP can use STCP (Secret TCP) with a preshared key to encrypt services exposed to public networks.","[S1106] NGLite: NGLite will use an AES encrypted channel for command and control purposes, in one case using the key WHATswrongwithUu.","[S0336] NanoCore: NanoCore uses DES to encrypt the C2 traffic.","[S0021] Derusbi: Derusbi obfuscates C2 traffic with variable 4-byte XOR keys.","[S1110] SLIGHTPULSE: SLIGHTPULSE can RC4 encrypt all incoming and outgoing C2 messages.","[S0030] Carbanak: Carbanak encrypts the message body of HTTP traffic with RC2 (in CBC mode). Carbanak also uses XOR with random keys for its communications.","[S0653] xCaon: xCaon has encrypted data sent to the C2 server using a XOR key.","[S0439] Okrum: Okrum uses AES to encrypt network traffic. The key can be hardcoded or negotiated with the C2 server in the registration phase.","[G0126] Higaisa: Higaisa used AES-128 to encrypt C2 traffic.","[S0012] PoisonIvy: PoisonIvy uses the Camellia cipher to encrypt communications.","[S1039] Bumblebee: Bumblebee can encrypt C2 requests and responses with RC4","[S0342] GreyEnergy: GreyEnergy encrypts communications using AES256.","[S0633] Sliver: Sliver can use AES-GCM-256 to encrypt a session key for C2 message exchange.","[S0627] SodaMaster: SodaMaster can use RC4 to encrypt C2 communications.","[S0153] RedLeaves: RedLeaves has encrypted C2 traffic with RC4, previously using keys of 88888888 and babybear.","[S0381] FlawedAmmyy: FlawedAmmyy has used SEAL encryption during the initial C2 handshake.","[S0091] Epic: Epic encrypts commands from the C2 server using a hardcoded key.","[S1160] Latrodectus: Latrodectus can send RC4 encrypted data over C2 channels.","[S0077] CallMe: CallMe uses AES to encrypt C2 traffic.","[S0436] TSCookie: TSCookie has encrypted network communications with RC4.","[S0162] Komplex: The Komplex C2 channel uses an 11-byte XOR algorithm to hide data.","[S0013] PlugX: PlugX can use RC4 encryption in C2 communications.","[S1115] WIREFIRE: WIREFIRE can AES encrypt process output sent from compromised devices to C2.","[S0154] Cobalt Strike: Cobalt Strike has the ability to use AES-256 symmetric encryption in CBC mode with HMAC-SHA-256 to encrypt task commands and XOR to encrypt shell code and configuration data.","[S0053] SeaDuke: SeaDuke C2 traffic has been encrypted with RC4 and AES.","[S0003] RIPTIDE: APT12 has used the RIPTIDE RAT, which communicates over HTTP with a payload encrypted with RC4.","[S0132] H1N1: H1N1 encrypts C2 traffic using an RC4 key.","[G0100] Inception: Inception has encrypted network communications with AES.","[S0356] KONNI: KONNI has used AES to encrypt C2 traffic.","[S0187] Daserf: Daserf uses RC4 encryption to obfuscate HTTP traffic.","[S0230] ZeroT: ZeroT has used RC4 to encrypt C2 traffic.","[S1196] Troll Stealer: Troll Stealer encrypts data sent to command and control infrastructure using a combination of RC4 and RSA-4096 algorithms.","[S0512] FatDuke: FatDuke can AES encrypt C2 communications.","[S0271] KEYMARBLE: KEYMARBLE uses a customized XOR algorithm to encrypt C2 communications.","[S0234] Bandook: Bandook has used AES encryption for C2 communication.","[S1022] IceApple: The IceApple Result Retriever module can AES encrypt C2 responses.","[G0064] APT33: APT33 has used AES for encryption of command and control traffic.","[S0629] RainyDay: RainyDay can use RC4 to encrypt C2 communications.","[S0254] PLAINTEE: PLAINTEE encodes C2 beacons using XOR.","[S0661] FoggyWeb: FoggyWeb has used a dynamic XOR key and custom XOR methodology for C2 communications.","[S0520] BLINDINGCAN: BLINDINGCAN has encrypted its C2 traffic with RC4.","[S0144] ChChes: ChChes can encrypt C2 traffic with AES or RC4.","[S1059] metaMain: metaMain can encrypt the data that it sends and receives from the C2 server using an RC4 encryption algorithm.","[S0333] UBoatRAT: UBoatRAT encrypts instructions in its C2 network payloads using a simple XOR cipher.","[G0007] APT28: APT28 installed a Delphi backdoor that used a custom algorithm for C2 communications.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used RC4 encryption (for Datper malware) and AES (for xxmm malware) to obfuscate HTTP traffic. BRONZE BUTLER has also used a tool called RarStar that encodes data with a custom XOR algorithm when posting it to a C2 server.","[S0455] Metamorfo: Metamorfo has encrypted C2 commands with AES-256.","[S0159] SNUGRIDE: SNUGRIDE encrypts C2 traffic using AES with a static key.","[S0435] PLEAD: PLEAD has used RC4 encryption to download modules.","[S0023] CHOPSTICK: CHOPSTICK encrypts C2 communications with RC4.","[S0137] CORESHELL: CORESHELL C2 messages are encrypted with custom stream ciphers using six-byte or eight-byte keys.","[S1078] RotaJakiro: RotaJakiro encrypts C2 communication using a combination of AES, XOR, ROTATE encryption, and ZLIB compression.","[S0472] down_new: down_new has the ability to AES encrypt C2 communications.","[S0171] Felismus: Some Felismus samples use a custom encryption method for C2 traffic that utilizes AES and multiple keys.","[C0001] Frankenstein: During Frankenstein, the threat actors communicated with C2 via an encrypted RC4 byte stream and AES-CBC.","[S0630] Nebulae: Nebulae can use RC4 and XOR to encrypt C2 communications.","[S1065] Woody RAT: Woody RAT can use AES-CBC to encrypt data sent to its C2 server.","[S0050] CosmicDuke: CosmicDuke contains a custom version of the RC4 algorithm that includes a programming error.","[S1031] PingPull: PingPull can use AES, in cipher block chaining (CBC) mode padded with PKCS5, to encrypt C2 server communications."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1573.002","technique_name":"Encrypted Channel: Asymmetric Cryptography","description":"Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal. For efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as Asymmetric Cryptography.","detection":"SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.","procedures":["[S0615] SombRAT: SombRAT can SSL encrypt C2 traffic.","[S0022] Uroburos: Uroburos has used a combination of a Diffie-Hellman key exchange mixed with a pre-shared key (PSK) to encrypt its top layer of C2 communications.","[S0687] Cyclops Blink: Cyclops Blink can encrypt C2 messages with AES-256-CBC sent underneath TLS. OpenSSL library functions are also used to encrypt each message using a randomly generated key and IV, which are then encrypted using a hard-coded RSA public key.","[S1123] PITSTOP: PITSTOP has the ability to communicate over TLS.","[G1018] TA2541: TA2541 has used TLS encrypted C2 communications including for campaigns using AsyncRAT.","[C0014] Operation Wocao: During Operation Wocao, threat actors' proxy implementation \"Agent\" upgraded the socket in use to a TLS socket.","[S0455] Metamorfo: Metamorfo's C2 communication has been encrypted using OpenSSL.","[S0018] Sykipot: Sykipot uses SSL for encrypting C2 communications.","[S0534] Bazar: Bazar can use TLS in C2 communications.","[S0668] TinyTurla: TinyTurla has the ability to encrypt C2 traffic with SSL/TLS.","[S1141] LunarWeb: LunarWeb can send short C2 commands, up to 512 bytes, encrypted with RSA-4096.","[S0627] SodaMaster: SodaMaster can use a hardcoded RSA key to encrypt some of its C2 traffic.","[S0126] ComRAT: ComRAT can use SSL/TLS encryption for its HTTP-based C2 channel. ComRAT has used public key cryptography with RSA and AES encrypted email attachments for its Gmail C2 channel.","[S0496] REvil: REvil has encrypted C2 communications with the ECIES algorithm.","[S0168] Gazer: Gazer uses custom encryption for C2 that uses RSA.","[S0556] Pay2Key: Pay2Key has used RSA encrypted communications with C2.","[S0531] Grandoreiro: Grandoreiro can use SSL in C2 communication.","[S0192] Pupy: Pupy's default encryption for its C2 communication channel is SSL, but it also has transport options for RSA and AES.","[S0382] ServHelper: ServHelper may set up a reverse SSH tunnel to give the attacker access to services running on the victim, such as RDP.","[S0699] Mythic: Mythic supports SSL encrypted C2.","[S0632] GrimAgent: GrimAgent can use a hardcoded server public RSA key to encrypt the first request to C2.","[S0438] Attor: Attor's Blowfish key is encrypted with a public RSA key.","[S0600] Doki: Doki has used the embedTLS library for network communications.","[S1169] Mango: Mango can use TLS to encrypt C2 communications.","[S1203] J-magic: J-magic can communicate back to send a challenge to C2 infrastructure over SSL.","[G1047] Velvet Ant: Velvet Ant has used a reverse SSH shell to securely communicate with victim devices.","[S0384] Dridex: Dridex has encrypted traffic with RSA.","[S0514] WellMess: WellMess can communicate to C2 with mutual TLS where client and server mutually check certificates.","[G0081] Tropic Trooper: Tropic Trooper has used SSL to connect to C2 servers.","[S1035] Small Sieve: Small Sieve can use SSL/TLS for its HTTPS Telegram Bot API-based C2 channel.","[C0039] Versa Director Zero Day Exploitation: Versa Director Zero Day Exploitation used HTTPS for command and control of compromised Versa Director servers.","[S1121] LITTLELAMB.WOOLTEA: LITTLELAMB.WOOLTEA can communicate over SSL using the private key from the Ivanti Connect Secure web server.","[S0335] Carbon: Carbon has used RSA encryption for C2 communications.","[S0183] Tor: Tor encapsulates traffic in multiple layers of encryption, using TLS by default.","[S1144] FRP: FRP can be configured to only accept TLS connections.","[S0588] GoldMax: GoldMax has RSA-encrypted its communication with the C2 server.","[S0633] Sliver: Sliver can use mutual TLS and RSA cryptography to exchange a session key.","[G1039] RedCurl: RedCurl has used HTTPS for C2 communication.","[S1184] BOLDMOVE: BOLDMOVE uses the WolfSSL library to implement SSL encryption for command and control communication.","[S1065] Woody RAT: Woody RAT can use RSA-4096 to encrypt data sent to its C2 server.","[S1163] SnappyTCP: SnappyTCP can use OpenSSL and TLS certificates to encrypt traffic.","[S0342] GreyEnergy: GreyEnergy encrypts communications using RSA-2048.","[S1081] BADHATCH: BADHATCH can beacon to a hardcoded C2 IP address using TLS encryption every 5 minutes.","[S0673] DarkWatchman: DarkWatchman can use TLS to encrypt its C2 channel.","[S1105] COATHANGER: COATHANGER connects to command and control infrastructure using SSL.","[G1042] RedEcho: RedEcho uses SSL for network communication.","[S0094] Trojan.Karagany: Trojan.Karagany can secure C2 communications with SSL and TLS.","[G0049] OilRig: OilRig used the PowerExchange utility and other tools to create tunnels to C2 servers.","[S0587] Penquin: Penquin can encrypt communications using the BlowFish algorithm and a symmetric key exchanged with Diffie Hellman.","[S0409] Machete: Machete has used TLS-encrypted FTP to exfiltrate data.","[S0154] Cobalt Strike: Cobalt Strike can use RSA asymmetric encryption with PKCS1 padding to encrypt data sent to the C2 server.","[S0180] Volgmer: Some Volgmer variants use SSL to encrypt C2 communications.","[S0087] Hi-Zor: Hi-Zor encrypts C2 traffic with TLS.","[S0491] StrongPity: StrongPity has encrypted C2 traffic using SSL/TLS.","[S0448] Rising Sun: Rising Sun variants can use SSL for encrypting C2 communications.","[S0150] POSHSPY: POSHSPY encrypts C2 traffic with AES and RSA.","[S0117] XTunnel: XTunnel uses SSL/TLS and RC4 to encrypt traffic.","[C0043] Indian Critical Infrastructure Intrusions: During Indian Critical Infrastructure Intrusions, RedEcho used SSL for network communication.","[S1210] Sagerunex: Sagerunex uses HTTPS for command and control communication.","[C0021] C0021: During C0021, the threat actors used SSL via TCP port 443 for C2 communications.","[S1051] KEYPLUG: KEYPLUG can use TLS-encrypted WebSocket Protocol (WSS) for C2.","[S0223] POWERSTATS: POWERSTATS has encrypted C2 traffic with RSA.","[S0251] Zebrocy: Zebrocy uses SSL and AES ECB for encrypting C2 communications.","[S0428] PoetRAT: PoetRAT used TLS to encrypt command and control (C2) communications.","[G0080] Cobalt Group: Cobalt Group has used the Plink utility to create SSH tunnels.","[S1192] NICECURL: NICECURL has used HTTPS for C2 communications.","[G1044] APT42: APT42 has used tools such as NICECURL with command and control communication taking place over HTTPS.","[S0045] ADVSTORESHELL: A variant of ADVSTORESHELL encrypts some C2 with RSA.","[S1122] Mispadu: Mispadu contains a copy of the OpenSSL library to encrypt C2 traffic.","[S1085] Sardonic: Sardonic has the ability to send a random 64-byte RC4 key to communicate with actor-controlled C2 servers by using an RSA public key.","[S0250] Koadic: Koadic can use SSL and TLS for communications.","[S0366] WannaCry: WannaCry uses Tor for command and control traffic and routes a custom cryptographic protocol over the Tor circuit.","[S1213] Lumma Stealer: Lumma Stealer has used HTTPS for command and control purposes.","[G0037] FIN6: FIN6 used the Plink command-line utility to create SSH tunnels to C2 servers.","[C0040] APT41 DUST: APT41 DUST used HTTPS for command and control.","[S0363] Empire: Empire can use TLS to encrypt its C2 channel.","[G0061] FIN8: FIN8 has used the Plink utility to tunnel RDP back to C2 infrastructure.","[S0017] BISCUIT: BISCUIT uses SSL for encrypting C2 communications.","[S0202] adbupd: adbupd contains a copy of the OpenSSL library to encrypt C2 traffic.","[S0641] Kobalos: Kobalos's authentication and key exchange is performed using RSA-512.","[S1155] Covenant: Covenant can utilize SSL to encrypt command and control traffic.","[S0515] WellMail: WellMail can use hard coded client and certificate authority certificates to communicate with C2 over mutual TLS.","[S1172] OilBooster: OilBooster can use the OpenSSL library to encrypt C2 communications.","[S0023] CHOPSTICK: CHOPSTICK encrypts C2 communications with TLS.","[S0483] IcedID: IcedID has used SSL and TLS in communications with C2.","[S1198] Gomir: Gomir uses reverse proxy functionality that employs SSL to encrypt communications."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1659","technique_name":"Content Injection","description":"Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems. Adversaries may inject content to victim systems in various ways, including: * From the middle, where the adversary is in-between legitimate online client-server communications (**Note:** this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment) * From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\"","detection":null,"procedures":["[S1088] Disco: Disco has achieved initial access and execution through content injection into DNS, HTTP, and SMB replies to targeted hosts that redirect them to download malicious files.","[G1019] MoustachedBouncer: MoustachedBouncer has injected content into DNS, HTTP, and SMB replies to redirect specifically-targeted victims to a fake Windows Update page to download malware."],"tactics":"TA0011 - Command And Control"}
{"technique_id":"T1665","technique_name":"Hide Infrastructure","description":"Adversaries may manipulate network traffic in order to hide and evade detection of their C2 infrastructure. This can be accomplished in various ways including by identifying and filtering traffic from defensive tools, masking malicious domains to obfuscate the true destination from both automated scanning tools and security researchers, and otherwise hiding malicious artifacts to delay discovery and prolong the effectiveness of adversary infrastructure that could otherwise be identified, blocked, or taken down entirely. C2 networks may include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections. For example, an adversary may use a virtual private cloud to spoof their IP address to closer align with a victim's IP address ranges. This may also bypass security measures relying on geolocation of the source IP address. Adversaries may also attempt to filter network traffic in order to evade defensive tools in numerous ways, including blocking/redirecting common incident responder or security appliance user agents. Filtering traffic based on IP and geo-fencing may also avoid automated sandboxing or researcher activity (i.e., Virtualization/Sandbox Evasion). Hiding C2 infrastructure may also be supported by Resource Development activities such as Acquire Infrastructure and Compromise Infrastructure. For example, using widely trusted hosting services or domains such as prominent URL shortening providers or marketing services for C2 networks may enable adversaries to present benign content that later redirects victims to malicious web pages or infrastructure once specific conditions are met.","detection":null,"procedures":["[G0128] ZIRCONIUM: ZIRCONIUM has utilized an ORB (operational relay box) network – consisting compromised devices such as small office and home office (SOHO) routers, IoT devices, and leased virtual private servers (VPS) – to obfuscate the origin of C2 traffic.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 set the hostnames of their C2 infrastructure to match legitimate hostnames in the victim environment. They also used IP addresses originating from the same country as the victim for their VPN infrastructure.","[S1206] JumbledPath: JumbledPath can use a chain of jump hosts to communicate with compromised devices to obscure actor infrastructure.","[S1111] DarkGate: DarkGate command and control includes hard-coded domains in the malware masquerading as legitimate services such as Akamai CDN or Amazon Web Services.","[G0016] APT29: APT29 uses compromised residential endpoints, typically within the same ISP IP address range, as proxies to hide the true source of C2 traffic.","[S1164] UPSTYLE: UPSTYLE attempts to retrieve a non-existent webpage from the command and control server resulting in hidden commands sent via resulting error messages."],"tactics":"TA0011 - Command And Control"}