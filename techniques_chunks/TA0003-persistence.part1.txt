{"technique_id":"T1037.001","technique_name":"Boot or Logon Initialization Scripts: Logon Script (Windows)","description":"Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key. Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.","detection":"Monitor for changes to Registry values associated with Windows logon scrips, nameley HKCU\\Environment\\UserInitMprLogonScript. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","procedures":["[G0007] APT28: An APT28 loader Trojan adds the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.","[S0438] Attor: Attor's dispatcher can establish persistence via adding a Registry key with a logon script HKEY_CURRENT_USER\\Environment \"UserInitMprLogonScript\" .","[S0044] JHUHUGIT: JHUHUGIT has registered a Windows shell script under the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.","[S0526] KGH_SPY: KGH_SPY has the ability to set the HKCU\\Environment\\UserInitMprLogonScript Registry key to execute logon scripts.","[S0251] Zebrocy: Zebrocy performs persistence with a logon script via adding to the Registry key HKCU\\Environment\\UserInitMprLogonScript.","[G0080] Cobalt Group: Cobalt Group has added persistence by registering the file name for the next stage malware under HKCU\\Environment\\UserInitMprLogonScript."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1037.002","technique_name":"Boot or Logon Initialization Scripts: Login Hook","description":"Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. Adversaries can add or insert a path to a malicious script in the com.apple.loginwindow.plist file, using the LoginHook or LogoutHook key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time. **Note:** Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent","detection":"Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1037.003","technique_name":"Boot or Logon Initialization Scripts: Network Logon Script","description":"Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.","detection":"Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1037.004","technique_name":"Boot or Logon Initialization Scripts: RC Scripts","description":"Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify. Adversaries may establish persistence by adding a malicious binary path or shell commands to rc.local, rc.common, and other RC scripts specific to the Unix-like distribution. Upon reboot, the system executes the script's contents as root, resulting in persistence. Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems. As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging `/etc/rc.local.d/local.sh` is one of the few mechanisms for enabling persistence across reboots. Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of Launchd. This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts. To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.","detection":"Monitor for unexpected changes to RC scripts in the /etc/ directory. Monitor process execution resulting from RC scripts for unusual or unknown applications or behavior. Monitor for /etc/rc.local file creation. Although types of RC scripts vary for each Unix-like distribution, several execute /etc/rc.local if present.","procedures":["[G1047] Velvet Ant: Velvet Ant used a modified `/etc/rc.local` file on compromised F5 BIG-IP devices to maintain persistence.","[S0394] HiddenWasp: HiddenWasp installs reboot persistence by adding itself to /etc/rc.local.","[G0016] APT29: APT29 has installed a run command on a compromised system to enable malware execution on system startup.","[S0690] Green Lambert: Green Lambert can add init.d and rc.d files in the /etc folder to establish persistence.","[S0687] Cyclops Blink: Cyclops Blink has the ability to execute on device startup, using a modified RC script named S51armled.","[S0278] iKitten: iKitten adds an entry to the rc.common file for persistence."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1037.005","technique_name":"Boot or Logon Initialization Scripts: Startup Items","description":"Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.","detection":"The /Library/StartupItems folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist. Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.","procedures":["[S0283] jRAT: jRAT can list and manage startup entries."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1053.002","technique_name":"Scheduled Task/Job: At","description":"Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the `at` command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation `Win32_ScheduledJob` WMI class. On Linux and macOS, at may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke at. If the at.deny exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at. Adversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). In Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.","detection":"Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. Several events will then be logged on scheduled task activity, including: * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the atq command and ensure IP addresses stored in the SSH_CONNECTION and SSH_CLIENT variables, machines that created the jobs, are trusted hosts. All at jobs are stored in /var/spool/cron/atjobs/. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[G0027] Threat Group-3390: Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network.","[S0488] CrackMapExec: CrackMapExec can set a scheduled task on the target system to execute commands remotely using at.","[G0026] APT18: APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used at to register a scheduled task to execute malware during lateral movement.","[S0233] MURKYTOP: MURKYTOP has the capability to schedule remote AT jobs.","[S0110] at: at can be used to schedule a task on a system to be executed at a specific date or time."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1053.003","technique_name":"Scheduled Task/Job: Cron","description":"Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems. The crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths. An adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence. In ESXi environments, cron jobs must be created directly via the crontab file (e.g., `/var/spool/cron/crontabs/root`).","detection":"Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[S0374] SpeakUp: SpeakUp uses cron tasks to ensure persistence.","[S0504] Anchor: Anchor can install itself as a cron job.","[S0163] Janicab: Janicab used a cron job for persistence on Mac devices.","[S0468] Skidmap: Skidmap has installed itself via crontab.","[G0106] Rocke: Rocke installed a cron job that downloaded and executed files from the C2.","[S0341] Xbash: Xbash can create a cronjob for persistence if it determines it is on a Linux system.","[S0198] NETWIRE: NETWIRE can use crontabs to establish persistence.","[S0588] GoldMax: The GoldMax Linux variant has used a crontab entry with a @reboot line to gain persistence.","[S1198] Gomir: Gomir will configure a crontab for process execution to start the backdoor on reboot if it is not initially running under group 0 privileges.","[S0587] Penquin: Penquin can use Cron to create periodic and pre-scheduled background jobs.","[C0048] Operation MidnightEclipse: During Operation MidnightEclipse, threat actors configured cron jobs to retrieve payloads from actor-controlled infrastructure.","[G1023] APT5: APT5 has made modifications to the crontab file including in `/var/cron/tabs/`.","[S0599] Kinsing: Kinsing has used crontab to download and run shell scripts every minute to ensure persistence.","[G0082] APT38: APT38 has used cron to create pre-scheduled and periodic background jobs on a Linux system.","[S0401] Exaramel for Linux: Exaramel for Linux uses crontab for persistence if it does not have root privileges.","[S1107] NKAbuse: NKAbuse uses a Cron job to establish persistence when infecting Linux hosts."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1053.005","technique_name":"Scheduled Task/Job: Scheduled Task","description":"Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path. An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes. Adversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.","detection":"Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. Several events will then be logged on scheduled task activity, including: * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.","procedures":["[S0588] GoldMax: GoldMax has used scheduled tasks to maintain persistence.","[S0648] JSS Loader: JSS Loader has the ability to launch scheduled tasks to establish persistence.","[S0414] BabyShark: BabyShark has used scheduled tasks to maintain persistence.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used `scheduler` and `schtasks` to create new tasks on remote host as part of their lateral movement. They manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted.","[S1014] DanBot: DanBot can use a scheduled task for installation.","[S0170] Helminth: Helminth has used a scheduled task for persistence.","[G0022] APT3: An APT3 downloader creates persistence by creating the following scheduled task: schtasks /create /tn \"mysc\" /tr C:\\Users\\Public\\test.exe /sc ONLOGON /ru \"System\".","[S1015] Milan: Milan can establish persistence on a targeted host with scheduled tasks.","[S0697] HermeticWiper: HermeticWiper has the ability to use scheduled tasks for execution.","[S1166] Solar: Solar can create scheduled tasks named Earth and Venus, which run every 30 and 40 seconds respectively, to support C2 and exfiltration.","[S0266] TrickBot: TrickBot creates a scheduled task on the system that provides persistence.","[S0335] Carbon: Carbon creates several tasks for later execution to continue persistence on the victim’s machine.","[S0126] ComRAT: ComRAT has used a scheduled task to launch its PowerShell loader.","[S0044] JHUHUGIT: JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in.","[G0080] Cobalt Group: Cobalt Group has created Windows tasks to establish persistence.","[G0091] Silence: Silence has used scheduled tasks to stage its operation.","[G0114] Chimera: Chimera has used scheduled tasks to invoke Cobalt Strike including through batch script schtasks /create /ru \"SYSTEM\" /tn \"update\" /tr \"cmd /c c:\\windows\\temp\\update.bat\" /sc once /f /st and to maintain persistence.","[S1199] LockBit 2.0: LockBit 2.0 can be executed via scheduled task.","[G0040] Patchwork: A Patchwork file stealer can run a TaskScheduler DLL to add persistence.","[G1034] Daggerfly: Daggerfly has attempted to use scheduled tasks for persistence in victim environments.","[S0248] yty: yty establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR “ + path_file + “/ST 09:30“.","[G0046] FIN7: FIN7 malware has created scheduled tasks to establish persistence.","[S0589] Sibot: Sibot has been executed via a scheduled task.","[S0504] Anchor: Anchor can create a scheduled task for persistence.","[S0632] GrimAgent: GrimAgent has the ability to set persistence using the Task Scheduler.","[G1018] TA2541: TA2541 has used scheduled tasks to establish persistence for installed tools.","[G0093] GALLIUM: GALLIUM established persistence for PoisonIvy by created a scheduled task.","[G0034] Sandworm Team: Sandworm Team leveraged SHARPIVORY, a .NET dropper that writes embedded payload to disk and uses scheduled tasks to persist on victim machines.","[S1064] SVCReady: SVCReady can create a scheduled task named `RecoveryExTask` to gain persistence.","[G1043] BlackByte: BlackByte created scheduled tasks for payload execution.","[S0409] Machete: The different components of Machete are executed by Windows Task Scheduler.","[G1001] HEXANE: HEXANE has used a scheduled task to establish persistence for a keylogger.","[G0129] Mustang Panda: Mustang Panda has created a scheduled task to execute additional malicious software, as well as maintain persistence.","[S0546] SharpStage: SharpStage has a persistence component to write a scheduled task for the payload.","[S0368] NotPetya: NotPetya creates a task to reboot the system one hour after infection.","[G0059] Magic Hound: Magic Hound has used scheduled tasks to establish persistence and execution.","[C0034] 2022 Ukraine Electric Power Attack: During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Scheduled Tasks through a Group Policy Object (GPO) to execute CaddyWiper at a predetermined time.","[S1160] Latrodectus: Latrodectus can create scheduled tasks for persistence.","[S1147] Nightdoor: Nightdoor uses scheduled tasks for persistence to load the final malware payload into memory.","[S0350] zwShell: zwShell has used SchTasks for execution.","[S0375] Remexi: Remexi utilizes scheduled tasks as a persistence mechanism.","[S1058] Prestige: Prestige has been executed on a target system through a scheduled task created by Sandworm Team using Impacket.","[C0017] C0017: During C0017, APT41 used the following Windows scheduled tasks for DEADEYE dropper persistence on US state government networks: `\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor`, `\\Microsoft\\Windows\\Ras\\ManagerMobility`, `\\Microsoft\\Windows\\WDI\\SrvSetupResults`, and `\\Microsoft\\Windows\\WDI\\USOShared`.","[G1016] FIN13: FIN13 has created scheduled tasks in the `C:\\Windows` directory of the compromised network.","[C0001] Frankenstein: During Frankenstein, the threat actors established persistence through a scheduled task using the command: `/Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR`, named \"WinUpdate\"","[S1081] BADHATCH: BADHATCH can use `schtasks.exe` to gain persistence.","[S0384] Dridex: Dridex can maintain persistence via the creation of scheduled tasks within system directories such as `windows\\system32\\`, `windows\\syswow64,` `winnt\\system32`, and `winnt\\syswow64`.","[G1022] ToddyCat: ToddyCat has used scheduled tasks to execute discovery commands and scripts for collection.","[G0108] Blue Mockingbird: Blue Mockingbird has used Windows Scheduled Tasks to establish persistence on local and remote hosts.","[G0021] Molerats: Molerats has created scheduled tasks to persistently run VBScripts.","[S0439] Okrum: Okrum's installer can attempt to achieve persistence by creating a scheduled task.","[S0458] Ramsay: Ramsay can schedule tasks via the Windows COM API to maintain persistence.","[S0538] Crutch: Crutch has the ability to persist using scheduled tasks.","[S0671] Tomiris: Tomiris has used `SCHTASKS /CREATE /SC DAILY /TN StartDVL /TR \"[path to self]\" /ST 10:00` to establish persistence.","[C0044] Juicy Mix: During Juicy Mix, OilRig used VBS droppers to schedule tasks for persistence.","[S0606] Bad Rabbit: Bad Rabbit’s infpub.dat file creates a scheduled task to launch a malicious executable.","[S0483] IcedID: IcedID has created a scheduled task to establish persistence.","[G0016] APT29: APT29 has used named and hijacked scheduled tasks to establish persistence.","[S1207] XLoader: XLoader can create scheduled tasks for persistence.","[S1089] SharpDisco: SharpDisco can create scheduled tasks to execute reverse shells that read and write data to and from specified SMB shares.","[S0527] CSPY Downloader: CSPY Downloader can use the schtasks utility to bypass UAC.","[S0128] BADNEWS: BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute.","[G0087] APT39: APT39 has created scheduled tasks for persistence.","[G0061] FIN8: FIN8 has used scheduled tasks to maintain RDP backdoors.","[S0024] Dyre: Dyre has the ability to achieve persistence by adding a new task in the task scheduler to run every minute.","[G0102] Wizard Spider: Wizard Spider has used scheduled tasks to establish persistence for TrickBot and other malware.","[S1013] ZxxZ: ZxxZ has used scheduled tasks for persistence and execution.","[C0030] Triton Safety Instrumented System Attack: In the Triton Safety Instrumented System Attack, TEMP.Veles installed scheduled tasks defined in XML files.","[S0532] Lucifer: Lucifer has established persistence by creating the following scheduled task schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\\%USERPROFILE%\\Downloads\\spread.exe /F.","[S1018] Saint Bot: Saint Bot has created a scheduled task named \"Maintenance\" to establish persistence.","[G0126] Higaisa: Higaisa dropped and added officeupdate.exe to scheduled tasks.","[S0237] GravityRAT: GravityRAT creates a scheduled task to ensure it is re-executed everyday.","[S1182] MagicRAT: MagicRAT can persist via scheduled tasks.","[S1140] Spica: Spica has created a scheduled task named `CalendarChecker` to establish persistence.","[S1190] Kapeka: Kapeka persists via scheduled tasks.","[G0096] APT41: APT41 used a compromised account to create a scheduled task on a system.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can use the Windows `SilentCleanup` scheduled task to enable payload execution.","[S0516] SoreFang: SoreFang can gain persistence through use of scheduled tasks.","[G0075] Rancor: Rancor launched a scheduled task to gain persistence using the schtasks /create /sc command.","[S0360] BONDUPDATER: BONDUPDATER persists using a scheduled task that executes every minute.","[S0447] Lokibot: Lokibot embedded the commands schtasks /Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I inside a batch script.","[G1003] Ember Bear: Ember Bear uses remotely scheduled tasks to facilitate remote command execution on victim machines.","[S0367] Emotet: Emotet has maintained persistence through a scheduled task, e.g. though a .dll file in the Registry.","[S0688] Meteor: Meteor execution begins from a scheduled task named `Microsoft\\Windows\\Power Efficiency Diagnostics\\AnalyzeAll` and it creates a separate scheduled task called `mstask` to run the wiper only once at 23:55:00.","[C0004] CostaRicto: During CostaRicto, the threat actors used scheduled tasks to download backdoor tools.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group created scheduled tasks to set a periodic execution of a remote XSL script.","[S1011] Tarrask: Tarrask is able to create “hidden” scheduled tasks for persistence.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: `SCHTASKS /Create /S /U /p /SC ONCE /TN test /TR /ST /RU SYSTEM.`","[G0095] Machete: Machete has created scheduled tasks to maintain Machete's persistence.","[S1180] BlackByte Ransomware: BlackByte Ransomware creates a schedule task to execute remotely deployed ransomware payloads.","[G1044] APT42: APT42 has used scheduled tasks for persistence.","[S0148] RTM: RTM tries to add a scheduled task to establish persistence.","[S1042] SUGARDUMP: SUGARDUMP has created scheduled tasks called `MicrosoftInternetExplorerCrashRepoeterTaskMachineUA` and `MicrosoftEdgeCrashRepoeterTaskMachineUA`, which were configured to execute `CrashReporter.exe` during user logon.","[G0051] FIN10: FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.","[G0019] Naikon: Naikon has used schtasks.exe for lateral movement in compromised networks.","[S0140] Shamoon: Shamoon copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware.","[S0581] IronNetInjector: IronNetInjector has used a task XML file named mssch.xml to run an IronPython script when a user logs in or when specific system events are created.","[G1039] RedCurl: RedCurl has created scheduled tasks for persistence.","[S0194] PowerSploit: PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task/Job.","[S0331] Agent Tesla: Agent Tesla has achieved persistence via scheduled tasks.","[G1036] Moonstone Sleet: Moonstone Sleet used scheduled tasks for program execution during initial access to victim machines.","[G0050] APT32: APT32 has used scheduled tasks to persist on victim systems.","[S0438] Attor: Attor's installer plugin can schedule a new task that loads the dispatcher on boot/logon.","[G0117] Fox Kitten: Fox Kitten has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary.","[G0064] APT33: APT33 has created a scheduled task to execute a .vbe file multiple times a day.","[S0446] Ryuk: Ryuk can remotely create a scheduled task to execute itself on a system.","[S0396] EvilBunny: EvilBunny has executed commands via scheduled tasks.","[G0049] OilRig: OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines.","[G0082] APT38: APT38 has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence. Additionally, APT38 has used living-off-the-land scripts to execute a malicious script via a scheduled task.","[S0449] Maze: Maze has created scheduled tasks using name variants such as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\", to launch Maze at a specific time.","[G0045] menuPass: menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.","[G0099] APT-C-36: APT-C-36 has used a macro function to set scheduled tasks, disguised as those used by Google.","[S0166] RemoteCMD: RemoteCMD can execute commands remotely by creating a new schedule task on the remote system","[S0584] AppleJeus: AppleJeus has created a scheduled SYSTEM task that runs when a user logs in.","[S0046] CozyCar: One persistence mechanism used by CozyCar is to register itself as a scheduled task.","[G0037] FIN6: FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS.","[S0629] RainyDay: RainyDay can use scheduled tasks to achieve persistence.","[G1014] LuminousMoth: LuminousMoth has created scheduled tasks to establish persistence for their tools.","[S1043] ccf32: ccf32 can run on a daily basis using a scheduled task.","[C0014] Operation Wocao: During Operation Wocao, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems.","[S0223] POWERSTATS: POWERSTATS has established persistence through a scheduled task using the command ”C:\\Windows\\system32\\schtasks.exe” /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR “c:\\Windows\\system32\\wscript.exe C:\\Windows\\temp\\Windows.vbe”.","[S0476] Valak: Valak has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host.","[G0032] Lazarus Group: Lazarus Group has used schtasks for persistence including through the periodic execution of a remote XSL script or a dropped VBS payload.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used schtasks to register a scheduled task to execute malware during lateral movement.","[S0500] MCMD: MCMD can use scheduled tasks for persistence.","[G1035] Winter Vivern: Winter Vivern executed PowerShell scripts that would subsequently attempt to establish persistence by creating scheduled tasks objects to periodically retrieve and execute remotely-hosted payloads.","[S0038] Duqu: Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.","[G0035] Dragonfly: Dragonfly has used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.","[S0475] BackConfig: BackConfig has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host.","[S0198] NETWIRE: NETWIRE can create a scheduled task to establish persistence.","[S1133] Apostle: Apostle achieves persistence by creating a scheduled task, such as MicrosoftCrashHandlerUAC.","[S0363] Empire: Empire has modules to interact with the Windows task scheduler.","[C0032] C0032: During the C0032 campaign, TEMP.Veles used scheduled task XML triggers.","[G0069] MuddyWater: MuddyWater has used scheduled tasks to establish persistence.","[S0390] SQLRat: SQLRat has created scheduled tasks in %appdata%\\Roaming\\Microsoft\\Templates\\.","[S0264] OopsIE: OopsIE creates a scheduled task to run itself every three minutes.","[S1039] Bumblebee: Bumblebee can achieve persistence by copying its DLL to a subdirectory of %APPDATA% and creating a Visual Basic Script that will load the DLL via a scheduled task.","[S0534] Bazar: Bazar can create a scheduled task for persistence.","[S0167] Matryoshka: Matryoshka can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\".","[S0417] GRIFFON: GRIFFON has used sctasks for persistence.","[S1135] MultiLayer Wiper: MultiLayer Wiper creates a malicious scheduled task that launches a batch file to remove Windows Event Logs.","[S0382] ServHelper: ServHelper contains modules that will use schtasks to carry out malicious operations.","[S1088] Disco: Disco can create a scheduled task to run every minute for persistence.","[G0047] Gamaredon Group: Gamaredon Group has created scheduled tasks to launch executables after a designated number of minutes have passed.","[S0673] DarkWatchman: DarkWatchman has created a scheduled task for persistence.","[G0094] Kimsuky: Kimsuky has downloaded additional malware with scheduled tasks.","[S0147] Pteranodon: Pteranodon schedules tasks to invoke its components in order to establish persistence.","[S0603] Stuxnet: Stuxnet schedules a network job to execute two minutes after host infection.","[S0260] InvisiMole: InvisiMole has used scheduled tasks named MSST and \\Microsoft\\Windows\\Autochk\\Scheduled to establish persistence.","[S0050] CosmicDuke: CosmicDuke uses scheduled tasks typically named \"Watchmon Service\" for persistence.","[G0038] Stealth Falcon: Stealth Falcon malware creates a scheduled task entitled “IE Web Cache” to execute a malicious file hourly.","[G1002] BITTER: BITTER has used scheduled tasks for persistence and execution.","[S0650] QakBot: QakBot has the ability to create scheduled tasks for persistence.","[S0184] POWRUNER: POWRUNER persists through a scheduled task that executes it every minute.","[S0379] Revenge RAT: Revenge RAT schedules tasks to run malicious scripts at different intervals.","[S0168] Gazer: Gazer can establish persistence by creating a scheduled task.","[G0142] Confucius: Confucius has created scheduled tasks to maintain persistence on a compromised host.","[S0189] ISMInjector: ISMInjector creates scheduled tasks to establish persistence.","[S0111] schtasks: schtasks is used to schedule tasks on a Windows system to run at a specific date and time.","[S0262] QuasarRAT: QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot.","[S0477] Goopy: Goopy has the ability to maintain persistence by creating scheduled tasks set to run every hour.","[S0680] LitePower: LitePower can create a scheduled task to enable persistence mechanisms.","[S0226] Smoke Loader: Smoke Loader launches a scheduled task.","[S1152] IMAPLoader: IMAPLoader creates scheduled tasks for persistence based on the operating system version of the victim machine.","[G0067] APT37: APT37 has created scheduled tasks to run malicious scripts on a compromised host.","[S0250] Koadic: Koadic has used scheduled tasks to add persistence.","[S0251] Zebrocy: Zebrocy has a command to create a scheduled task for persistence.","[S1087] AsyncRAT: AsyncRAT can create a scheduled task to maintain persistence on system start-up.","[S0431] HotCroissant: HotCroissant has attempted to install a scheduled task named “Java Maintenance64” on startup to establish persistence.","[S0269] QUADAGENT: QUADAGENT creates a scheduled task to maintain persistence on the victim’s machine.","[S1169] Mango: Mango can create a scheduled task to run every 32 seconds to communicate with C2 and execute received commands."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1053.006","technique_name":"Scheduled Task/Job: Systemd Timers","description":"Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH. Each .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/. An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.","detection":"Systemd timer unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and ~/.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: systemctl list-timers –all. Analyze the contents of corresponding .service files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1053.007","technique_name":"Scheduled Task/Job: Container Orchestration Job","description":"Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster. In Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks. An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.","detection":"Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.","procedures":null,"tactics":"TA0003 - Persistence"}
{"technique_id":"T1078.001","technique_name":"Valid Accounts: Default Accounts","description":"Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS, the root user account in ESXi, and the default service account in Kubernetes. Default accounts are not limited to client machines; rather, they also include accounts that are preset for equipment such as network devices and computer applications, whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen Private Keys or credential materials to legitimately connect to remote environments via Remote Services. Default accounts may be created on a system after initial setup by connecting or integrating it with another application. For example, when an ESXi server is connected to a vCenter server, a default privileged account called `vpxuser` is created on the ESXi server. If a threat actor is able to compromise this account’s credentials (for example, via Exploitation for Credential Access on the vCenter host), they will then have access to the ESXi server.","detection":"Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.","procedures":["[G1016] FIN13: FIN13 has leveraged default credentials for authenticating myWebMethods (WMS) and QLogic web management interface to gain initial access.","[S0537] HyperStack: HyperStack can use default credentials to connect to IPC$ shares on remote machines.","[C0038] HomeLand Justice: During HomeLand Justice, threat actors used the built-in administrator account to move laterally using RDP and Impacket.","[G0059] Magic Hound: Magic Hound enabled and used the default system managed account, DefaultAccount, via `\"powershell.exe\" /c net user DefaultAccount /active:yes` to connect to a targeted Exchange server over RDP.","[S0603] Stuxnet: Stuxnet infected WinCC machines via a hardcoded database server password.","[G1003] Ember Bear: Ember Bear has abused default user names and passwords in externally-accessible IP cameras for initial access."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1078.002","technique_name":"Valid Accounts: Domain Accounts","description":"Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services. Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as OS Credential Dumping or password reuse, allowing access to privileged resources of the domain.","detection":"Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access). On Linux, check logs and other artifacts created by use of domain authentication services, such as the System Security Services Daemon (sssd). Perform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.","procedures":["[S1024] CreepySnail: CreepySnail can use stolen credentials to authenticate on target networks.","[C0002] Night Dragon: During Night Dragon, threat actors used domain accounts to gain further access to victim systems.","[C0023] Operation Ghost: For Operation Ghost, APT29 used stolen administrator credentials for lateral movement on compromised networks.","[C0048] Operation MidnightEclipse: During Operation MidnightEclipse, threat actors used a compromised domain admin account to move laterally.","[S0154] Cobalt Strike: Cobalt Strike can use known credentials to run commands and spawn processes as a domain user account.","[G0019] Naikon: Naikon has used administrator credentials for lateral movement in compromised networks.","[C0049] Leviathan Australian Intrusions: Leviathan compromised domain credentials during Leviathan Australian Intrusions.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used compromised domain administrator credentials as part of their lateral movement.","[G1030] Agrius: Agrius attempted to acquire valid credentials for victim environments through various means to enable follow-on lateral movement.","[G0102] Wizard Spider: Wizard Spider has used administrative accounts, including Domain Admin, to move laterally within a victim network.","[G0034] Sandworm Team: Sandworm Team has used stolen credentials to access administrative accounts within the domain.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used domain administrators' accounts to help facilitate lateral movement on compromised networks.","[S0446] Ryuk: Ryuk can use stolen domain admin accounts to move laterally within a victim domain.","[G0049] OilRig: OilRig has used an exfiltration tool named STEALHOOK to retreive valid domain credentials.","[S0140] Shamoon: If Shamoon cannot access shares using current privileges, it attempts access using hard coded, domain-specific credentials gathered earlier in the intrusion.","[G1021] Cinnamon Tempest: Cinnamon Tempest has obtained highly privileged credentials such as domain administrator in order to deploy malware.","[G1022] ToddyCat: ToddyCat has used compromised domain admin credentials to mount local network shares.","[G0119] Indrik Spider: Indrik Spider has collected credentials from infected systems, including domain accounts.","[G0022] APT3: APT3 leverages valid accounts after gaining credentials for use within the victim domain.","[G0114] Chimera: Chimera has used compromised domain accounts to gain access to the target environment.","[C0014] Operation Wocao: During Operation Wocao, threat actors used domain credentials, including domain admin, for lateral movement and privilege escalation.","[G1040] Play: Play has used valid domain accounts for access.","[G0092] TA505: TA505 has used stolen domain admin accounts to compromise additional hosts.","[G0028] Threat Group-1314: Threat Group-1314 actors used compromised domain credentials for the victim's endpoint management platform, Altiris, to move laterally.","[G1023] APT5: APT5 has used legitimate account credentials to move laterally through compromised environments.","[G0059] Magic Hound: Magic Hound has used domain administrator accounts after dumping LSASS process memory.","[C0029] Cutting Edge: During Cutting Edge, threat actors used compromised VPN accounts for lateral movement on targeted networks.","[S0603] Stuxnet: Stuxnet attempts to access network resources with a domain account’s credentials.","[G1017] Volt Typhoon: Volt Typhoon has used compromised domain accounts to authenticate to devices on compromised networks.","[G1043] BlackByte: BlackByte captured credentials for or impersonated domain administration users.","[G0143] Aquatic Panda: Aquatic Panda used multiple mechanisms to capture valid user accounts for victim domains to enable lateral movement and access to additional hosts in victim environments."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1078.003","technique_name":"Valid Accounts: Local Accounts","description":"Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. Local Accounts may also be abused to elevate privileges and harvest credentials through OS Credential Dumping. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.","detection":"Perform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.","procedures":["[G0094] Kimsuky: Kimsuky has used a tool called GREASE to add a Windows admin account in order to allow them continued access via RDP.","[S0367] Emotet: Emotet can brute force a local admin password, then use it to facilitate lateral movement.","[S0154] Cobalt Strike: Cobalt Strike can use known credentials to run commands and spawn processes as a local user account.","[G0056] PROMETHIUM: PROMETHIUM has created admin accounts on a compromised host.","[G0051] FIN10: FIN10 has moved laterally using the Local Administrator account.","[G1040] Play: Play has used valid local accounts to gain initial access.","[G0050] APT32: APT32 has used legitimate local admin account credentials.","[G1041] Sea Turtle: Sea Turtle compromised cPanel accounts in victim environments.","[G0081] Tropic Trooper: Tropic Trooper has used known administrator account credentials to execute the backdoor directly.","[G0125] HAFNIUM: HAFNIUM has used the NT AUTHORITY\\SYSTEM account to create files on Exchange servers.","[G0046] FIN7: FIN7 has used compromised credentials for access as SYSTEM on Exchange servers.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used compromised local accounts to access victims' networks.","[C0049] Leviathan Australian Intrusions: Leviathan used captured local account information, such as service accounts, for actions during Leviathan Australian Intrusions.","[G1047] Velvet Ant: Velvet Ant accessed vulnerable Cisco switch devices using accounts with administrator privileges.","[G0016] APT29: APT29 targets dormant or inactive user accounts, accounts belonging to individuals no longer at the organization but whose accounts remain on the system, for access and persistence.","[S0368] NotPetya: NotPetya can use valid credentials with PsExec or wmic to spread itself to remote systems.","[S1202] LockBit 3.0: LockBit 3.0 can use a compromised local account for lateral movement.","[S0221] Umbreon: Umbreon creates valid local users to provide access to the system.","[C0014] Operation Wocao: During Operation Wocao, threat actors used local account credentials found during the intrusion for lateral movement and privilege escalation.","[G0010] Turla: Turla has abused local accounts that have the same password across the victim’s network."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1078.004","technique_name":"Valid Accounts: Cloud Accounts","description":"Valid accounts in cloud environments may allow adversaries to perform actions to achieve Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. Cloud Accounts can exist solely in the cloud; alternatively, they may be hybrid-joined between on-premises systems and the cloud through syncing or federation with other identity sources such as Windows Active Directory. Service or user accounts may be targeted by adversaries through Brute Force, Phishing, or various other means to gain access to the environment. Federated or synced accounts may be a pathway for the adversary to affect both on-premises systems and cloud environments - for example, by leveraging shared credentials to log onto Remote Services. High privileged cloud accounts, whether federated, synced, or cloud-only, may also allow pivoting to on-premises environments by leveraging SaaS-based Software Deployment Tools to run commands on hybrid-joined devices. An adversary may create long lasting Additional Cloud Credentials on a compromised cloud account to maintain persistence in the environment. Such credentials may also be used to bypass security controls such as multi-factor authentication. Cloud accounts may also be able to assume Temporary Elevated Cloud Access or other privileges through various means within the environment. Misconfigurations in role assignments or role assumption policies may allow an adversary to use these mechanisms to leverage permissions outside the intended scope of the account. Such over privileged accounts may be used to harvest sensitive data from online storage accounts and databases through Cloud API or other methods. For example, in Azure environments, adversaries may target Azure Managed Identities, which allow associated Azure resources to request access tokens. By compromising a resource with an attached Managed Identity, such as an Azure VM, adversaries may be able to Steal Application Access Tokens to move laterally across the cloud environment.","detection":"Monitor the activity of cloud accounts to detect abnormal or malicious behavior, such as accessing information outside of the normal function of the account or account usage at atypical hours.","procedures":["[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used a compromised O365 administrator account to create a new Service Principal.","[G0016] APT29: APT29 has gained access to a global administrator account in Azure AD and has used `Service Principal` credentials in Exchange.","[G1023] APT5: APT5 has accessed Microsoft M365 cloud environments using stolen credentials.","[S0684] ROADTools: ROADTools leverages valid cloud credentials to perform enumeration operations using the internal Azure AD Graph API.","[G0007] APT28: APT28 has used compromised Office 365 service accounts with Global Administrator privileges to collect email from user inboxes.","[C0027] C0027: During C0027, Scattered Spider leveraged compromised credentials from victim users to authenticate to Azure tenants.","[S0683] Peirates: Peirates can use stolen service account tokens to perform its operations.","[G0125] HAFNIUM: HAFNIUM has abused service principals in compromised environments to enable data exfiltration.","[S1091] Pacu: Pacu leverages valid cloud accounts to perform most of its operations.","[G0064] APT33: APT33 has used compromised Office 365 accounts in tandem with Ruler in an attempt to gain control of endpoints.","[G1004] LAPSUS$: LAPSUS$ has used compromised credentials to access cloud assets within a target organization.","[G0004] Ke3chang: Ke3chang has used compromised credentials to sign into victims’ Microsoft 365 accounts."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1098.001","technique_name":"Account Manipulation: Additional Cloud Credentials","description":"Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment. For example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure / Entra ID. These credentials include both x509 keys and passwords. With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules. In infrastructure-as-a-service (IaaS) environments, after gaining access through Cloud Accounts, adversaries may generate or import their own SSH keys using either the CreateKeyPair or ImportKeyPair API in AWS or the gcloud compute os-login ssh-keys add command in GCP. This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts. Adversaries may also use the CreateAccessKey API in AWS or the gcloud iam service-accounts keys create command in GCP to add access keys to an account. Alternatively, they may use the CreateLoginProfile API in AWS to add a password that can be used to log into the AWS Management Console for Cloud Service Dashboard. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. Cloud Accounts). For example, in Entra ID environments, an adversary with the Application Administrator role can add a new set of credentials to their application's service principal. In doing so the adversary would be able to access the service principal’s roles and permissions, which may be different from those of the Application Administrator. In AWS environments, adversaries with the appropriate permissions may also use the `sts:GetFederationToken` API call to create a temporary set of credentials to Forge Web Credentials tied to the permissions of the original user account. These temporary credentials may remain valid for the duration of their lifetime even if the original account’s API credentials are deactivated. In Entra ID environments with the app password feature enabled, adversaries may be able to add an app password to a user account. As app passwords are intended to be used with legacy devices that do not support multi-factor authentication (MFA), adding an app password can allow an adversary to bypass MFA requirements. Additionally, app passwords may remain valid even if the user’s primary password is reset.","detection":"Monitor Azure Activity Logs for Service Principal and Application modifications. Monitor for the usage of APIs that create or import SSH keys, particularly by unexpected users or accounts such as the root account. Monitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.","procedures":["[S1091] Pacu: Pacu can generate SSH and API keys for AWS infrastructure and additional API keys for other IAM users.","[C0027] C0027: During C0027, Scattered Spider used aws_consoler to create temporary federated credentials for fake users in order to obfuscate which AWS credential is compromised and enable pivoting from the AWS CLI to console sessions without MFA.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 added credentials to OAuth Applications and Service Principals."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1098.002","technique_name":"Account Manipulation: Additional Email Delegate Permissions","description":"Adversaries may grant additional permission levels to maintain persistent access to an adversary-controlled email account. For example, the Add-MailboxPermission PowerShell cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox. In Google Workspace, delegation can be enabled via the Google Admin console and users can delegate accounts via their Gmail settings. Adversaries may also assign mailbox folder permissions through individual folder permissions or roles. In Office 365 environments, adversaries may assign the Default or Anonymous user permissions or roles to the Top of Information Store (root), Inbox, or other mailbox folders. By assigning one or both user permissions to a folder, the adversary can utilize any other account in the tenant to maintain persistence to the target user’s mail folders. This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can add Additional Cloud Roles to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: Internal Spearphishing), so the messages evade spam/phishing detection mechanisms.","detection":"Monitor for unusual Exchange and Office 365 email account permissions changes that may indicate excessively broad permissions being granted to compromised accounts. Enable the UpdateFolderPermissions action for all logon types. The mailbox audit log will forward folder permission modification events to the Unified Audit Log. Create rules to alert on ModifyFolderPermissions operations where the Anonymous or Default user is assigned permissions other than None. A larger than normal volume of emails sent from an account and similar phishing emails sent from real accounts within a network may be a sign that an account was compromised and attempts to leverage access with modified email permissions is occurring.","procedures":["[C0038] HomeLand Justice: During HomeLand Justice, threat actors added the `ApplicationImpersonation` management role to accounts under their control to impersonate users and take ownership of targeted mailboxes.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 added their own devices as allowed IDs for active sync using `Set-CASMailbox`, allowing it to obtain copies of victim mailboxes. It also added additional permissions (such as Mail.Read and Mail.ReadWrite) to compromised Application or Service Principals.","[G0059] Magic Hound: Magic Hound granted compromised email accounts read access to the email boxes of additional targeted accounts. The group then was able to authenticate to the intended victim's OWA (Outlook Web Access) portal and read hundreds of email communications for information on Middle East organizations.","[G0007] APT28: APT28 has used a Powershell cmdlet to grant the ApplicationImpersonation role to a compromised account.","[G0016] APT29: APT29 has used a compromised global administrator account in Azure AD to backdoor a service principal with `ApplicationImpersonation` rights to start collecting emails from targeted mailboxes; APT29 has also used compromised accounts holding `ApplicationImpersonation` rights in Exchange to collect emails."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1098.003","technique_name":"Account Manipulation: Additional Cloud Roles","description":"An adversary may add additional roles or permissions to an adversary-controlled cloud account to maintain persistent access to a tenant. For example, adversaries may update IAM policies in cloud-based environments or add a new global administrator in Office 365 environments. With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins). This account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. This could lead to privilege escalation, particularly if the roles added allow for lateral movement to additional accounts. For example, in AWS environments, an adversary with appropriate permissions may be able to use the CreatePolicyVersion API to define a new version of an IAM policy or the AttachUserPolicy API to attach an IAM policy with additional or distinct permissions to a compromised user account. In some cases, adversaries may add roles to adversary-controlled accounts outside the victim cloud tenant. This allows these external accounts to perform actions inside the victim tenant without requiring the adversary to Create Account or modify a victim-owned account.","detection":"Collect activity logs from IAM services and cloud administrator accounts to identify unusual activity in the assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.","procedures":["[C0027] C0027: During C0027, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 granted `company administrator` privileges to a newly created service principle.","[G1015] Scattered Spider: During C0027, Scattered Spider used IAM manipulation to gain persistence and to assume or elevate privileges. Scattered Spider has also assigned user access admin roles in order to gain Tenant Root Group management permissions in Azure.","[G1004] LAPSUS$: LAPSUS$ has added the global admin role to accounts they have created in the targeted organization's cloud instances."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1098.004","technique_name":"Account Manipulation: SSH Authorized Keys","description":"Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions, macOS, and ESXi hypervisors commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under &lt;user-home&gt;/.ssh/authorized_keys (or, on ESXi, `/etc/ssh/keys-/authorized_keys`). Users may edit the system’s SSH config file to modify the directives `PubkeyAuthentication` and `RSAAuthentication` to the value `yes` to ensure public key and RSA authentication are enabled, as well as modify the directive `PermitRootLogin` to the value `yes` to enable root authentication via SSH. The SSH config file is usually located under /etc/ssh/sshd_config. Adversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. In cloud environments, adversaries may be able to modify the SSH authorized_keys file of a particular virtual machine via the command line interface or rest API. For example, by using the Google Cloud CLI’s “add-metadata” command an adversary may add SSH keys to a user account. Similarly, in Azure, an adversary may update the authorized_keys file of a virtual machine via a PATCH request to the API. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH. It may also lead to privilege escalation where the virtual machine or instance has distinct permissions from the requesting user. Where authorized_keys files are modified via cloud APIs or command line interfaces, an adversary may achieve privilege escalation on the target virtual machine if they add a key to a higher-privileged user. SSH keys can also be added to accounts on network devices, such as with the `ip ssh pubkey-chain` Network Device CLI command.","detection":"Use file integrity monitoring to detect changes made to the authorized_keys file for each user on a system. Monitor for suspicious processes modifying the authorized_keys file. In cloud environments, monitor instances for modification of metadata and configurations. Monitor for changes to and suspicious processes modifiying /etc/ssh/sshd_config. For network infrastructure devices, collect AAA logging to monitor for rogue SSH keys being added to accounts.","procedures":["[G1006] Earth Lusca: Earth Lusca has dropped an SSH-authorized key in the `/root/.ssh` folder in order to access a compromised server with SSH.","[S0468] Skidmap: Skidmap has the ability to add the public key of its handlers to the authorized_keys file to maintain persistence on an infected host.","[G1045] Salt Typhoon: Salt Typhoon has added SSH authorized_keys under root or other users at the Linux level on compromised network devices.","[S0658] XCSSET: XCSSET will create an ssh key if necessary with the ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -P command. XCSSET will upload a private key file to the server to remotely access the host without a password.","[S0482] Bundlore: Bundlore creates a new key pair with ssh-keygen and drops the newly created user key in authorized_keys to enable remote login.","[G0139] TeamTNT: TeamTNT has added RSA keys in authorized_keys."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1098.005","technique_name":"Account Manipulation: Device Registration","description":"Adversaries may register a device to an adversary-controlled account. Devices may be registered in a multifactor authentication (MFA) system, which handles authentication to the network, or in a device management system, which handles device access and compliance. MFA systems, such as Duo or Okta, allow users to associate devices with their accounts in order to complete MFA requirements. An adversary that compromises a user’s credentials may enroll a new device in order to bypass initial MFA requirements and gain persistent access to a network. In some cases, the MFA self-enrollment process may require only a username and password to enroll the account's first device or to enroll a device to an inactive account. Similarly, an adversary with existing access to a network may register a device to Entra ID and/or its device management system, Microsoft Intune, in order to access sensitive data or resources while bypassing conditional access policies. Devices registered in Entra ID may be able to conduct Internal Spearphishing campaigns via intra-organizational emails, which are less likely to be treated as suspicious by the email client. Additionally, an adversary may be able to perform a Service Exhaustion Flood on an Entra ID tenant by registering a large number of devices.","detection":null,"procedures":["[G0016] APT29: APT29 has enrolled their own devices into compromised cloud tenants, including enrolling a device in MFA to an Azure AD environment following a successful password guessing attack against a dormant account.","[S0677] AADInternals: AADInternals can register a device to Azure AD.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 registered devices in order to enable mailbox syncing via the `Set-CASMailbox` command.","[C0027] C0027: During C0027, Scattered Spider registered devices for MFA to maintain persistence through victims' VPN."],"tactics":"TA0003 - Persistence"}
{"technique_id":"T1098.006","technique_name":"Account Manipulation: Additional Container Cluster Roles","description":"An adversary may add additional roles or permissions to an adversary-controlled user or service account to maintain persistent access to a container orchestration system. For example, an adversary with sufficient permissions may create a RoleBinding or a ClusterRoleBinding to bind a Role or ClusterRole to a Kubernetes account. Where attribute-based access control (ABAC) is in use, an adversary with sufficient permissions may modify a Kubernetes ABAC policy to give the target account additional permissions. This account modification may immediately follow Create Account or other malicious account activity. Adversaries may also modify existing Valid Accounts that they have compromised. Note that where container orchestration systems are deployed in cloud environments, as with Google Kubernetes Engine, Amazon Elastic Kubernetes Service, and Azure Kubernetes Service, cloud-based role-based access control (RBAC) assignments or ABAC policies can often be used in place of or in addition to local permission assignments. In these cases, this technique may be used in conjunction with Additional Cloud Roles.","detection":null,"procedures":null,"tactics":"TA0003 - Persistence"}