{"technique_id":"T1037.001","technique_name":"Boot or Logon Initialization Scripts: Logon Script (Windows)","description":"Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system. This is done via adding a path to a script to the HKCU\\Environment\\UserInitMprLogonScript Registry key. Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.","detection":"Monitor for changes to Registry values associated with Windows logon scrips, nameley HKCU\\Environment\\UserInitMprLogonScript. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","procedures":["[G0007] APT28: An APT28 loader Trojan adds the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.","[S0438] Attor: Attor's dispatcher can establish persistence via adding a Registry key with a logon script HKEY_CURRENT_USER\\Environment \"UserInitMprLogonScript\" .","[S0044] JHUHUGIT: JHUHUGIT has registered a Windows shell script under the Registry key HKCU\\Environment\\UserInitMprLogonScript to establish persistence.","[S0526] KGH_SPY: KGH_SPY has the ability to set the HKCU\\Environment\\UserInitMprLogonScript Registry key to execute logon scripts.","[S0251] Zebrocy: Zebrocy performs persistence with a logon script via adding to the Registry key HKCU\\Environment\\UserInitMprLogonScript.","[G0080] Cobalt Group: Cobalt Group has added persistence by registering the file name for the next stage malware under HKCU\\Environment\\UserInitMprLogonScript."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1037.002","technique_name":"Boot or Logon Initialization Scripts: Login Hook","description":"Adversaries may use a Login Hook to establish persistence executed upon user logon. A login hook is a plist file that points to a specific script to execute with root privileges upon user logon. The plist file is located in the /Library/Preferences/com.apple.loginwindow.plist file and can be modified using the defaults command-line utility. This behavior is the same for logout hooks where a script can be executed upon user logout. All hooks require administrator permissions to modify or create hooks. Adversaries can add or insert a path to a malicious script in the com.apple.loginwindow.plist file, using the LoginHook or LogoutHook key-value pair. The malicious script is executed upon the next user login. If a login hook already exists, adversaries can add additional commands to an existing login hook. There can be only one login and logout hook on a system at a time. **Note:** Login hooks were deprecated in 10.11 version of macOS in favor of Launch Daemon and Launch Agent","detection":"Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","procedures":null,"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1037.003","technique_name":"Boot or Logon Initialization Scripts: Network Logon Script","description":"Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects. These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems. Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.","detection":"Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.","procedures":null,"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1037.004","technique_name":"Boot or Logon Initialization Scripts: RC Scripts","description":"Adversaries may establish persistence by modifying RC scripts, which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify. Adversaries may establish persistence by adding a malicious binary path or shell commands to rc.local, rc.common, and other RC scripts specific to the Unix-like distribution. Upon reboot, the system executes the script's contents as root, resulting in persistence. Adversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as ESXi hypervisors, IoT, or embedded systems. As ESXi servers store most system files in memory and therefore discard changes on shutdown, leveraging `/etc/rc.local.d/local.sh` is one of the few mechanisms for enabling persistence across reboots. Several Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of Launchd. This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts. To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.","detection":"Monitor for unexpected changes to RC scripts in the /etc/ directory. Monitor process execution resulting from RC scripts for unusual or unknown applications or behavior. Monitor for /etc/rc.local file creation. Although types of RC scripts vary for each Unix-like distribution, several execute /etc/rc.local if present.","procedures":["[G1047] Velvet Ant: Velvet Ant used a modified `/etc/rc.local` file on compromised F5 BIG-IP devices to maintain persistence.","[S0394] HiddenWasp: HiddenWasp installs reboot persistence by adding itself to /etc/rc.local.","[G0016] APT29: APT29 has installed a run command on a compromised system to enable malware execution on system startup.","[S0690] Green Lambert: Green Lambert can add init.d and rc.d files in the /etc folder to establish persistence.","[S0687] Cyclops Blink: Cyclops Blink has the ability to execute on device startup, using a modified RC script named S51armled.","[S0278] iKitten: iKitten adds an entry to the rc.common file for persistence."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1037.005","technique_name":"Boot or Logon Initialization Scripts: Startup Items","description":"Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. This is technically a deprecated technology (superseded by Launch Daemon), and thus the appropriate folder, /Library/StartupItems isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), StartupParameters.plist, reside in the top-level directory. An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism. Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.","detection":"The /Library/StartupItems folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist. Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.","procedures":["[S0283] jRAT: jRAT can list and manage startup entries."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1053.002","technique_name":"Scheduled Task/Job: At","description":"Adversaries may abuse the at utility to perform task scheduling for initial or recurring execution of malicious code. The at utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of Scheduled Task's schtasks in Windows environments, using at requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. In addition to explicitly running the `at` command, adversaries may also schedule a task with at by directly leveraging the Windows Management Instrumentation `Win32_ScheduledJob` WMI class. On Linux and macOS, at may be invoked by the superuser as well as any users added to the at.allow file. If the at.allow file does not exist, the at.deny file is checked. Every username not listed in at.deny is allowed to invoke at. If the at.deny exists and is empty, global use of at is permitted. If neither file exists (which is often the baseline) only the superuser is allowed to use at. Adversaries may use at to execute programs at system startup or on a scheduled basis for Persistence. at can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). In Linux environments, adversaries may also abuse at to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, at may also be used for Privilege Escalation if the binary is allowed to run as superuser via sudo.","detection":"Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. Several events will then be logged on scheduled task activity, including: * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data. In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Review all jobs using the atq command and ensure IP addresses stored in the SSH_CONNECTION and SSH_CLIENT variables, machines that created the jobs, are trusted hosts. All at jobs are stored in /var/spool/cron/atjobs/. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[G0027] Threat Group-3390: Threat Group-3390 actors use at to schedule tasks to run self-extracting RAR archives, which install HTTPBrowser or PlugX on other victims on a network.","[S0488] CrackMapExec: CrackMapExec can set a scheduled task on the target system to execute commands remotely using at.","[G0026] APT18: APT18 actors used the native at Windows task scheduler tool to use scheduled tasks for execution on a victim network.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used at to register a scheduled task to execute malware during lateral movement.","[S0233] MURKYTOP: MURKYTOP has the capability to schedule remote AT jobs.","[S0110] at: at can be used to schedule a task on a system to be executed at a specific date or time."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1053.003","technique_name":"Scheduled Task/Job: Cron","description":"Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code. The cron utility is a time-based job scheduler for Unix-like operating systems. The crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths. An adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for Persistence. In ESXi environments, cron jobs must be created directly via the crontab file (e.g., `/var/spool/cron/crontabs/root`).","detection":"Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.","procedures":["[S0374] SpeakUp: SpeakUp uses cron tasks to ensure persistence.","[S0504] Anchor: Anchor can install itself as a cron job.","[S0163] Janicab: Janicab used a cron job for persistence on Mac devices.","[S0468] Skidmap: Skidmap has installed itself via crontab.","[G0106] Rocke: Rocke installed a cron job that downloaded and executed files from the C2.","[S0341] Xbash: Xbash can create a cronjob for persistence if it determines it is on a Linux system.","[S0198] NETWIRE: NETWIRE can use crontabs to establish persistence.","[S0588] GoldMax: The GoldMax Linux variant has used a crontab entry with a @reboot line to gain persistence.","[S1198] Gomir: Gomir will configure a crontab for process execution to start the backdoor on reboot if it is not initially running under group 0 privileges.","[S0587] Penquin: Penquin can use Cron to create periodic and pre-scheduled background jobs.","[C0048] Operation MidnightEclipse: During Operation MidnightEclipse, threat actors configured cron jobs to retrieve payloads from actor-controlled infrastructure.","[G1023] APT5: APT5 has made modifications to the crontab file including in `/var/cron/tabs/`.","[S0599] Kinsing: Kinsing has used crontab to download and run shell scripts every minute to ensure persistence.","[G0082] APT38: APT38 has used cron to create pre-scheduled and periodic background jobs on a Linux system.","[S0401] Exaramel for Linux: Exaramel for Linux uses crontab for persistence if it does not have root privileges.","[S1107] NKAbuse: NKAbuse uses a Cron job to establish persistence when infecting Linux hosts."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1053.005","technique_name":"Scheduled Task/Job: Scheduled Task","description":"Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The schtasks utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library and Windows Management Instrumentation (WMI) to create a scheduled task. Adversaries may also utilize the Powershell Cmdlet `Invoke-CimMethod`, which leverages WMI class `PS_ScheduledTask` to create a scheduled task via an XML path. An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to System Binary Proxy Execution, adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes. Adversaries may also create \"hidden\" scheduled tasks (i.e. Hide Artifacts) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions). Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.","detection":"Monitor process execution from the svchost.exe in Windows 10 and the Windows Task Scheduler taskeng.exe for older versions of Windows. If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in %systemroot%\\System32\\Tasks for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Configure event logging for scheduled task creation and changes by enabling the \"Microsoft-Windows-TaskScheduler/Operational\" setting within the event logging service. Several events will then be logged on scheduled task activity, including: * Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered * Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated * Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted * Event ID 4698 on Windows 10, Server 2016 - Scheduled task created * Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled * Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.","procedures":["[S0588] GoldMax: GoldMax has used scheduled tasks to maintain persistence.","[S0648] JSS Loader: JSS Loader has the ability to launch scheduled tasks to establish persistence.","[S0414] BabyShark: BabyShark has used scheduled tasks to maintain persistence.","[C0024] SolarWinds Compromise: During the SolarWinds Compromise, APT29 used `scheduler` and `schtasks` to create new tasks on remote host as part of their lateral movement. They manipulated scheduled tasks by updating an existing legitimate task to execute their tools and then returned the scheduled task to its original configuration. APT29 also created a scheduled task to maintain SUNSPOT persistence when the host booted.","[S1014] DanBot: DanBot can use a scheduled task for installation.","[S0170] Helminth: Helminth has used a scheduled task for persistence.","[G0022] APT3: An APT3 downloader creates persistence by creating the following scheduled task: schtasks /create /tn \"mysc\" /tr C:\\Users\\Public\\test.exe /sc ONLOGON /ru \"System\".","[S1015] Milan: Milan can establish persistence on a targeted host with scheduled tasks.","[S0697] HermeticWiper: HermeticWiper has the ability to use scheduled tasks for execution.","[S1166] Solar: Solar can create scheduled tasks named Earth and Venus, which run every 30 and 40 seconds respectively, to support C2 and exfiltration.","[S0266] TrickBot: TrickBot creates a scheduled task on the system that provides persistence.","[S0335] Carbon: Carbon creates several tasks for later execution to continue persistence on the victim’s machine.","[S0126] ComRAT: ComRAT has used a scheduled task to launch its PowerShell loader.","[S0044] JHUHUGIT: JHUHUGIT has registered itself as a scheduled task to run each time the current user logs in.","[G0080] Cobalt Group: Cobalt Group has created Windows tasks to establish persistence.","[G0091] Silence: Silence has used scheduled tasks to stage its operation.","[G0114] Chimera: Chimera has used scheduled tasks to invoke Cobalt Strike including through batch script schtasks /create /ru \"SYSTEM\" /tn \"update\" /tr \"cmd /c c:\\windows\\temp\\update.bat\" /sc once /f /st and to maintain persistence.","[S1199] LockBit 2.0: LockBit 2.0 can be executed via scheduled task.","[G0040] Patchwork: A Patchwork file stealer can run a TaskScheduler DLL to add persistence.","[G1034] Daggerfly: Daggerfly has attempted to use scheduled tasks for persistence in victim environments.","[S0248] yty: yty establishes persistence by creating a scheduled task with the command SchTasks /Create /SC DAILY /TN BigData /TR “ + path_file + “/ST 09:30“.","[G0046] FIN7: FIN7 malware has created scheduled tasks to establish persistence.","[S0589] Sibot: Sibot has been executed via a scheduled task.","[S0504] Anchor: Anchor can create a scheduled task for persistence.","[S0632] GrimAgent: GrimAgent has the ability to set persistence using the Task Scheduler.","[G1018] TA2541: TA2541 has used scheduled tasks to establish persistence for installed tools.","[G0093] GALLIUM: GALLIUM established persistence for PoisonIvy by created a scheduled task.","[G0034] Sandworm Team: Sandworm Team leveraged SHARPIVORY, a .NET dropper that writes embedded payload to disk and uses scheduled tasks to persist on victim machines.","[S1064] SVCReady: SVCReady can create a scheduled task named `RecoveryExTask` to gain persistence.","[G1043] BlackByte: BlackByte created scheduled tasks for payload execution.","[S0409] Machete: The different components of Machete are executed by Windows Task Scheduler.","[G1001] HEXANE: HEXANE has used a scheduled task to establish persistence for a keylogger.","[G0129] Mustang Panda: Mustang Panda has created a scheduled task to execute additional malicious software, as well as maintain persistence.","[S0546] SharpStage: SharpStage has a persistence component to write a scheduled task for the payload.","[S0368] NotPetya: NotPetya creates a task to reboot the system one hour after infection.","[G0059] Magic Hound: Magic Hound has used scheduled tasks to establish persistence and execution.","[C0034] 2022 Ukraine Electric Power Attack: During the 2022 Ukraine Electric Power Attack, Sandworm Team leveraged Scheduled Tasks through a Group Policy Object (GPO) to execute CaddyWiper at a predetermined time.","[S1160] Latrodectus: Latrodectus can create scheduled tasks for persistence.","[S1147] Nightdoor: Nightdoor uses scheduled tasks for persistence to load the final malware payload into memory.","[S0350] zwShell: zwShell has used SchTasks for execution.","[S0375] Remexi: Remexi utilizes scheduled tasks as a persistence mechanism.","[S1058] Prestige: Prestige has been executed on a target system through a scheduled task created by Sandworm Team using Impacket.","[C0017] C0017: During C0017, APT41 used the following Windows scheduled tasks for DEADEYE dropper persistence on US state government networks: `\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor`, `\\Microsoft\\Windows\\Ras\\ManagerMobility`, `\\Microsoft\\Windows\\WDI\\SrvSetupResults`, and `\\Microsoft\\Windows\\WDI\\USOShared`.","[G1016] FIN13: FIN13 has created scheduled tasks in the `C:\\Windows` directory of the compromised network.","[C0001] Frankenstein: During Frankenstein, the threat actors established persistence through a scheduled task using the command: `/Create /F /SC DAILY /ST 09:00 /TN WinUpdate /TR`, named \"WinUpdate\"","[S1081] BADHATCH: BADHATCH can use `schtasks.exe` to gain persistence.","[S0384] Dridex: Dridex can maintain persistence via the creation of scheduled tasks within system directories such as `windows\\system32\\`, `windows\\syswow64,` `winnt\\system32`, and `winnt\\syswow64`.","[G1022] ToddyCat: ToddyCat has used scheduled tasks to execute discovery commands and scripts for collection.","[G0108] Blue Mockingbird: Blue Mockingbird has used Windows Scheduled Tasks to establish persistence on local and remote hosts.","[G0021] Molerats: Molerats has created scheduled tasks to persistently run VBScripts.","[S0439] Okrum: Okrum's installer can attempt to achieve persistence by creating a scheduled task.","[S0458] Ramsay: Ramsay can schedule tasks via the Windows COM API to maintain persistence.","[S0538] Crutch: Crutch has the ability to persist using scheduled tasks.","[S0671] Tomiris: Tomiris has used `SCHTASKS /CREATE /SC DAILY /TN StartDVL /TR \"[path to self]\" /ST 10:00` to establish persistence.","[C0044] Juicy Mix: During Juicy Mix, OilRig used VBS droppers to schedule tasks for persistence.","[S0606] Bad Rabbit: Bad Rabbit’s infpub.dat file creates a scheduled task to launch a malicious executable.","[S0483] IcedID: IcedID has created a scheduled task to establish persistence.","[G0016] APT29: APT29 has used named and hijacked scheduled tasks to establish persistence.","[S1207] XLoader: XLoader can create scheduled tasks for persistence.","[S1089] SharpDisco: SharpDisco can create scheduled tasks to execute reverse shells that read and write data to and from specified SMB shares.","[S0527] CSPY Downloader: CSPY Downloader can use the schtasks utility to bypass UAC.","[S0128] BADNEWS: BADNEWS creates a scheduled task to establish by executing a malicious payload every subsequent minute.","[G0087] APT39: APT39 has created scheduled tasks for persistence.","[G0061] FIN8: FIN8 has used scheduled tasks to maintain RDP backdoors.","[S0024] Dyre: Dyre has the ability to achieve persistence by adding a new task in the task scheduler to run every minute.","[G0102] Wizard Spider: Wizard Spider has used scheduled tasks to establish persistence for TrickBot and other malware.","[S1013] ZxxZ: ZxxZ has used scheduled tasks for persistence and execution.","[C0030] Triton Safety Instrumented System Attack: In the Triton Safety Instrumented System Attack, TEMP.Veles installed scheduled tasks defined in XML files.","[S0532] Lucifer: Lucifer has established persistence by creating the following scheduled task schtasks /create /sc minute /mo 1 /tn QQMusic ^ /tr C:Users\\%USERPROFILE%\\Downloads\\spread.exe /F.","[S1018] Saint Bot: Saint Bot has created a scheduled task named \"Maintenance\" to establish persistence.","[G0126] Higaisa: Higaisa dropped and added officeupdate.exe to scheduled tasks.","[S0237] GravityRAT: GravityRAT creates a scheduled task to ensure it is re-executed everyday.","[S1182] MagicRAT: MagicRAT can persist via scheduled tasks.","[S1140] Spica: Spica has created a scheduled task named `CalendarChecker` to establish persistence.","[S1190] Kapeka: Kapeka persists via scheduled tasks.","[G0096] APT41: APT41 used a compromised account to create a scheduled task on a system.","[S1149] CHIMNEYSWEEP: CHIMNEYSWEEP can use the Windows `SilentCleanup` scheduled task to enable payload execution.","[S0516] SoreFang: SoreFang can gain persistence through use of scheduled tasks.","[G0075] Rancor: Rancor launched a scheduled task to gain persistence using the schtasks /create /sc command.","[S0360] BONDUPDATER: BONDUPDATER persists using a scheduled task that executes every minute.","[S0447] Lokibot: Lokibot embedded the commands schtasks /Run /TN \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I inside a batch script.","[G1003] Ember Bear: Ember Bear uses remotely scheduled tasks to facilitate remote command execution on victim machines.","[S0367] Emotet: Emotet has maintained persistence through a scheduled task, e.g. though a .dll file in the Registry.","[S0688] Meteor: Meteor execution begins from a scheduled task named `Microsoft\\Windows\\Power Efficiency Diagnostics\\AnalyzeAll` and it creates a separate scheduled task called `mstask` to run the wiper only once at 23:55:00.","[C0004] CostaRicto: During CostaRicto, the threat actors used scheduled tasks to download backdoor tools.","[C0022] Operation Dream Job: During Operation Dream Job, Lazarus Group created scheduled tasks to set a periodic execution of a remote XSL script.","[S1011] Tarrask: Tarrask is able to create “hidden” scheduled tasks for persistence.","[C0012] Operation CuckooBees: During Operation CuckooBees, the threat actors used scheduled tasks to execute batch scripts for lateral movement with the following command: `SCHTASKS /Create /S /U /p /SC ONCE /TN test /TR /ST /RU SYSTEM.`","[G0095] Machete: Machete has created scheduled tasks to maintain Machete's persistence.","[S1180] BlackByte Ransomware: BlackByte Ransomware creates a schedule task to execute remotely deployed ransomware payloads.","[G1044] APT42: APT42 has used scheduled tasks for persistence.","[S0148] RTM: RTM tries to add a scheduled task to establish persistence.","[S1042] SUGARDUMP: SUGARDUMP has created scheduled tasks called `MicrosoftInternetExplorerCrashRepoeterTaskMachineUA` and `MicrosoftEdgeCrashRepoeterTaskMachineUA`, which were configured to execute `CrashReporter.exe` during user logon.","[G0051] FIN10: FIN10 has established persistence by using S4U tasks as well as the Scheduled Task option in PowerShell Empire.","[G0019] Naikon: Naikon has used schtasks.exe for lateral movement in compromised networks.","[S0140] Shamoon: Shamoon copies an executable payload to the target system by using SMB/Windows Admin Shares and then scheduling an unnamed task to execute the malware.","[S0581] IronNetInjector: IronNetInjector has used a task XML file named mssch.xml to run an IronPython script when a user logs in or when specific system events are created.","[G1039] RedCurl: RedCurl has created scheduled tasks for persistence.","[S0194] PowerSploit: PowerSploit's New-UserPersistenceOption Persistence argument can be used to establish via a Scheduled Task/Job.","[S0331] Agent Tesla: Agent Tesla has achieved persistence via scheduled tasks.","[G1036] Moonstone Sleet: Moonstone Sleet used scheduled tasks for program execution during initial access to victim machines.","[G0050] APT32: APT32 has used scheduled tasks to persist on victim systems.","[S0438] Attor: Attor's installer plugin can schedule a new task that loads the dispatcher on boot/logon.","[G0117] Fox Kitten: Fox Kitten has used Scheduled Tasks for persistence and to load and execute a reverse proxy binary.","[G0064] APT33: APT33 has created a scheduled task to execute a .vbe file multiple times a day.","[S0446] Ryuk: Ryuk can remotely create a scheduled task to execute itself on a system.","[S0396] EvilBunny: EvilBunny has executed commands via scheduled tasks.","[G0049] OilRig: OilRig has created scheduled tasks that run a VBScript to execute a payload on victim machines.","[G0082] APT38: APT38 has used Task Scheduler to run programs at system startup or on a scheduled basis for persistence. Additionally, APT38 has used living-off-the-land scripts to execute a malicious script via a scheduled task.","[S0449] Maze: Maze has created scheduled tasks using name variants such as \"Windows Update Security\", \"Windows Update Security Patches\", and \"Google Chrome Security Update\", to launch Maze at a specific time.","[G0045] menuPass: menuPass has used a script (atexec.py) to execute a command on a target machine via Task Scheduler.","[G0099] APT-C-36: APT-C-36 has used a macro function to set scheduled tasks, disguised as those used by Google.","[S0166] RemoteCMD: RemoteCMD can execute commands remotely by creating a new schedule task on the remote system","[S0584] AppleJeus: AppleJeus has created a scheduled SYSTEM task that runs when a user logs in.","[S0046] CozyCar: One persistence mechanism used by CozyCar is to register itself as a scheduled task.","[G0037] FIN6: FIN6 has used scheduled tasks to establish persistence for various malware it uses, including downloaders known as HARDTACK and SHIPBREAD and FrameworkPOS.","[S0629] RainyDay: RainyDay can use scheduled tasks to achieve persistence.","[G1014] LuminousMoth: LuminousMoth has created scheduled tasks to establish persistence for their tools.","[S1043] ccf32: ccf32 can run on a daily basis using a scheduled task.","[C0014] Operation Wocao: During Operation Wocao, threat actors used scheduled tasks to execute malicious PowerShell code on remote systems.","[S0223] POWERSTATS: POWERSTATS has established persistence through a scheduled task using the command ”C:\\Windows\\system32\\schtasks.exe” /Create /F /SC DAILY /ST 12:00 /TN MicrosoftEdge /TR “c:\\Windows\\system32\\wscript.exe C:\\Windows\\temp\\Windows.vbe”.","[S0476] Valak: Valak has used scheduled tasks to execute additional payloads and to gain persistence on a compromised host.","[G0032] Lazarus Group: Lazarus Group has used schtasks for persistence including through the periodic execution of a remote XSL script or a dropped VBS payload.","[G0060] BRONZE BUTLER: BRONZE BUTLER has used schtasks to register a scheduled task to execute malware during lateral movement.","[S0500] MCMD: MCMD can use scheduled tasks for persistence.","[G1035] Winter Vivern: Winter Vivern executed PowerShell scripts that would subsequently attempt to establish persistence by creating scheduled tasks objects to periodically retrieve and execute remotely-hosted payloads.","[S0038] Duqu: Adversaries can instruct Duqu to spread laterally by copying itself to shares it has enumerated and for which it has obtained legitimate credentials (via keylogging or other means). The remote host is then infected by using the compromised credentials to schedule a task on remote machines that executes the malware.","[G0035] Dragonfly: Dragonfly has used scheduled tasks to automatically log out of created accounts every 8 hours as well as to execute malicious files.","[S0475] BackConfig: BackConfig has the ability to use scheduled tasks to repeatedly execute malicious payloads on a compromised host.","[S0198] NETWIRE: NETWIRE can create a scheduled task to establish persistence.","[S1133] Apostle: Apostle achieves persistence by creating a scheduled task, such as MicrosoftCrashHandlerUAC.","[S0363] Empire: Empire has modules to interact with the Windows task scheduler.","[C0032] C0032: During the C0032 campaign, TEMP.Veles used scheduled task XML triggers.","[G0069] MuddyWater: MuddyWater has used scheduled tasks to establish persistence.","[S0390] SQLRat: SQLRat has created scheduled tasks in %appdata%\\Roaming\\Microsoft\\Templates\\.","[S0264] OopsIE: OopsIE creates a scheduled task to run itself every three minutes.","[S1039] Bumblebee: Bumblebee can achieve persistence by copying its DLL to a subdirectory of %APPDATA% and creating a Visual Basic Script that will load the DLL via a scheduled task.","[S0534] Bazar: Bazar can create a scheduled task for persistence.","[S0167] Matryoshka: Matryoshka can establish persistence by adding a Scheduled Task named \"Microsoft Boost Kernel Optimization\".","[S0417] GRIFFON: GRIFFON has used sctasks for persistence.","[S1135] MultiLayer Wiper: MultiLayer Wiper creates a malicious scheduled task that launches a batch file to remove Windows Event Logs.","[S0382] ServHelper: ServHelper contains modules that will use schtasks to carry out malicious operations.","[S1088] Disco: Disco can create a scheduled task to run every minute for persistence.","[G0047] Gamaredon Group: Gamaredon Group has created scheduled tasks to launch executables after a designated number of minutes have passed.","[S0673] DarkWatchman: DarkWatchman has created a scheduled task for persistence.","[G0094] Kimsuky: Kimsuky has downloaded additional malware with scheduled tasks.","[S0147] Pteranodon: Pteranodon schedules tasks to invoke its components in order to establish persistence.","[S0603] Stuxnet: Stuxnet schedules a network job to execute two minutes after host infection.","[S0260] InvisiMole: InvisiMole has used scheduled tasks named MSST and \\Microsoft\\Windows\\Autochk\\Scheduled to establish persistence.","[S0050] CosmicDuke: CosmicDuke uses scheduled tasks typically named \"Watchmon Service\" for persistence.","[G0038] Stealth Falcon: Stealth Falcon malware creates a scheduled task entitled “IE Web Cache” to execute a malicious file hourly.","[G1002] BITTER: BITTER has used scheduled tasks for persistence and execution.","[S0650] QakBot: QakBot has the ability to create scheduled tasks for persistence.","[S0184] POWRUNER: POWRUNER persists through a scheduled task that executes it every minute.","[S0379] Revenge RAT: Revenge RAT schedules tasks to run malicious scripts at different intervals.","[S0168] Gazer: Gazer can establish persistence by creating a scheduled task.","[G0142] Confucius: Confucius has created scheduled tasks to maintain persistence on a compromised host.","[S0189] ISMInjector: ISMInjector creates scheduled tasks to establish persistence.","[S0111] schtasks: schtasks is used to schedule tasks on a Windows system to run at a specific date and time.","[S0262] QuasarRAT: QuasarRAT contains a .NET wrapper DLL for creating and managing scheduled tasks for maintaining persistence upon reboot.","[S0477] Goopy: Goopy has the ability to maintain persistence by creating scheduled tasks set to run every hour.","[S0680] LitePower: LitePower can create a scheduled task to enable persistence mechanisms.","[S0226] Smoke Loader: Smoke Loader launches a scheduled task.","[S1152] IMAPLoader: IMAPLoader creates scheduled tasks for persistence based on the operating system version of the victim machine.","[G0067] APT37: APT37 has created scheduled tasks to run malicious scripts on a compromised host.","[S0250] Koadic: Koadic has used scheduled tasks to add persistence.","[S0251] Zebrocy: Zebrocy has a command to create a scheduled task for persistence.","[S1087] AsyncRAT: AsyncRAT can create a scheduled task to maintain persistence on system start-up.","[S0431] HotCroissant: HotCroissant has attempted to install a scheduled task named “Java Maintenance64” on startup to establish persistence.","[S0269] QUADAGENT: QUADAGENT creates a scheduled task to maintain persistence on the victim’s machine.","[S1169] Mango: Mango can create a scheduled task to run every 32 seconds to communicate with C2 and execute received commands."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1053.006","technique_name":"Scheduled Task/Job: Systemd Timers","description":"Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to Cron in Linux environments. Systemd timers may be activated remotely via the systemctl command line utility, which operates over SSH. Each .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are Systemd Service unit files that are managed by the systemd system and service manager. Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/. An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence. Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.","detection":"Systemd timer unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and ~/.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user. Suspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: systemctl list-timers –all. Analyze the contents of corresponding .service files present on the file system and ensure that they refer to legitimate, expected executables. Audit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.","procedures":null,"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1053.007","technique_name":"Scheduled Task/Job: Container Orchestration Job","description":"Adversaries may abuse task scheduling functionality provided by container orchestration tools such as Kubernetes to schedule deployment of containers configured to execute malicious code. Container orchestration jobs run these automated tasks at a specific date and time, similar to cron jobs on a Linux system. Deployments of this type can also be configured to maintain a quantity of containers over time, automating the process of maintaining persistence within a cluster. In Kubernetes, a CronJob may be used to schedule a Job that runs one or more containers to perform specific tasks. An adversary therefore may utilize a CronJob to schedule deployment of a Job that executes malicious code in various nodes within a cluster.","detection":"Monitor for the anomalous creation of scheduled jobs in container orchestration environments. Use logging agents on Kubernetes nodes and retrieve logs from sidecar proxies for application and resource pods to monitor malicious container orchestration job deployments.","procedures":null,"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.001","technique_name":"Process Injection: Dynamic-link Library Injection","description":"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process. DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread (which calls the LoadLibrary API responsible for loading the DLL). Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of LoadLibrary). Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's AddressOfEntryPoint before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1027] Heyoka Backdoor: Heyoka Backdoor can inject a DLL into rundll32.exe for execution.","[S1018] Saint Bot: Saint Bot has injected its DLL component into `EhStorAurhn.exe`.","[S0082] Emissary: Emissary injects its DLL file into a newly spawned Internet Explorer process.","[S0125] Remsec: Remsec can perform DLL injection.","[S1066] DarkTortilla: DarkTortilla can use a .NET-based DLL named `RunPe6` for process injection.","[S0089] BlackEnergy: BlackEnergy injects its DLL component into svchost.exe.","[G0010] Turla: Turla has used Metasploit to perform reflective DLL injection in order to escalate privileges.","[S0613] PS1: PS1 can inject its payload DLL Into memory.","[S0250] Koadic: Koadic can perform process injection by using a reflective DLL.","[S0055] RARSTONE: After decrypting itself in memory, RARSTONE downloads a DLL file from its C2 server and loads it in the memory space of a hidden Internet Explorer process. This “downloaded” file is actually not dropped onto the system.","[S0154] Cobalt Strike: Cobalt Strike has the ability to load DLLs via reflective injection.","[S0461] SDBbot: SDBbot has the ability to inject a downloaded DLL into a newly created rundll32.exe process.","[S0455] Metamorfo: Metamorfo has injected a malicious DLL into the Windows Media Player process (wmplayer.exe).","[S0126] ComRAT: ComRAT has injected its orchestrator DLL into explorer.exe. ComRAT has also injected its communications module into the victim's default browser to make C2 connections appear less suspicious as all network connections will be initiated by the browser process.","[S0273] Socksbot: Socksbot creates a suspended svchost process and injects its DLL into it.","[S1039] Bumblebee: The Bumblebee loader can support the `Dij` command which gives it the ability to inject DLLs into the memory of other processes.","[S0681] Lizar: Lizar has used the PowerKatz plugin that can be loaded into the address space of a PowerShell process through reflective DLL loading.","[G1026] Malteiro: Malteiro has injected Mispadu’s DLL into a process.","[S1044] FunnyDream: The FunnyDream FilepakMonitor component can inject into the Bka.exe process using the `VirtualAllocEx`, `WriteProcessMemory` and `CreateRemoteThread` APIs to load the DLL component.","[S0449] Maze: Maze has injected the malware DLL into a target process.","[S0167] Matryoshka: Matryoshka uses reflective DLL injection to inject the malicious library and execute the RAT.","[S0192] Pupy: Pupy can migrate into another process using reflective DLL injection.","[S0194] PowerSploit: PowerSploit contains a collection of CodeExecution modules that inject code (DLL, shellcode) into a process.","[S0182] FinFisher: FinFisher injects itself into various processes depending on whether it is low integrity or high integrity.","[S0501] PipeMon: PipeMon can inject its modules into various processes using reflective DLL loading.","[S0024] Dyre: Dyre injects into other processes to load modules.","[S1210] Sagerunex: Sagerunex is designed to be dynamic link library (DLL) injected into an infected endpoint and executed directly in memory.","[G0135] BackdoorDiplomacy: BackdoorDiplomacy has dropped legitimate software onto a compromised host and used it to execute malicious DLLs.","[S0460] Get2: Get2 has the ability to inject DLLs into processes.","[S0011] Taidoor: Taidoor can perform DLL loading.","[S0241] RATANKBA: RATANKBA performs a reflective DLL injection using a given pid.","[S1081] BADHATCH: BADHATCH has the ability to execute a malicious DLL by injecting into `explorer.exe` on a compromised machine.","[S0576] MegaCortex: MegaCortex loads injecthelper.dll into a newly created rundll32.exe process.","[S0603] Stuxnet: Stuxnet injects an entire DLL into an existing, newly created, or preselected trusted process.","[C0015] C0015: During C0015, the threat actors used a DLL named `D8B3.dll` that was injected into the Winlogon process.","[G0065] Leviathan: Leviathan has utilized techniques like reflective DLL loading to write a DLL into memory and load a shell that provides backdoor access to the victim.","[S0265] Kazuar: If running in a Windows environment, Kazuar saves a DLL to disk that is injected into the explorer.exe process to execute the payload. Kazuar can also be configured to inject and execute within specific processes.","[S0038] Duqu: Duqu will inject itself into different processes to evade detection. The selection of the target process is influenced by the security software that is installed on the system (Duqu will inject into different processes depending on which security suite is installed on the infected host).","[S0012] PoisonIvy: PoisonIvy can inject a malicious DLL into a process.","[S0021] Derusbi: Derusbi injects itself into the secure shell (SSH) process.","[S0412] ZxShell: ZxShell is injected into a shared SVCHOST process.","[G0024] Putter Panda: An executable dropped onto victims by Putter Panda aims to inject the specified DLL into a process that would normally be accessing the network, including Outlook Express (msinm.exe), Outlook (outlook.exe), Internet Explorer (iexplore.exe), and Firefox (firefox.exe).","[S0666] Gelsemium: Gelsemium has the ability to inject DLLs into specific processes.","[S0135] HIDEDRV: HIDEDRV injects a DLL for Downdelph into the explorer.exe process.","[S0335] Carbon: Carbon has a command to inject code into a process.","[G0032] Lazarus Group: A Lazarus Group malware sample performs reflective DLL injection.","[G0081] Tropic Trooper: Tropic Trooper has injected a DLL backdoor into dllhost.exe and svchost.exe.","[S0581] IronNetInjector: IronNetInjector has the ability to inject a DLL into running processes, including the IronNetInjector DLL into explorer.exe.","[S0467] TajMahal: TajMahal has the ability to inject DLLs for malicious plugins into running processes.","[S1026] Mongall: Mongall can inject a DLL into `rundll32.exe` for execution.","[S0575] Conti: Conti has loaded an encrypted DLL into memory and then executes it.","[S0458] Ramsay: Ramsay can use ImprovedReflectiveDLLInjection to deploy components.","[S0022] Uroburos: Uroburos can use DLL injection to load embedded files and modules.","[S0484] Carberp: Carberp's bootkit can inject a malicious DLL into the address space of running processes.","[S0615] SombRAT: SombRAT can execute loadfromfile, loadfromstorage, and loadfrommem to inject a DLL from disk, storage, or memory respectively.","[S0018] Sykipot: Sykipot injects itself into running instances of outlook.exe, iexplore.exe, or firefox.exe.","[S0367] Emotet: Emotet has been observed injecting in to Explorer.exe and other processes.","[S0456] Aria-body: Aria-body has the ability to inject itself into another process such as rundll32.exe and dllhost.exe.","[S0457] Netwalker: The Netwalker DLL has been injected reflectively into the memory of a legitimate running process.","[G0092] TA505: TA505 has been seen injecting a DLL into winword.exe.","[S0081] Elise: Elise injects DLL files into iexplore.exe.","[G0102] Wizard Spider: Wizard Spider has injected malicious DLLs into memory with read, write, and execute permissions.","[S0596] ShadowPad: ShadowPad has injected a DLL into svchost.exe."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.002","technique_name":"Process Injection: Portable Executable Injection","description":"Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as VirtualAllocEx and WriteProcessMemory, then invoked with CreateRemoteThread or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1063] Brute Ratel C4: Brute Ratel C4 has injected Latrodectus into the Explorer.exe process on comrpomised hosts.","[S0260] InvisiMole: InvisiMole can inject its backdoor as a portable executable into a target process.","[S0030] Carbanak: Carbanak downloads an executable and injects it directly into a new process.","[G0106] Rocke: Rocke's miner, \"TermsHost.exe\", evaded defenses by injecting itself into Windows processes, including Notepad.exe.","[G0078] Gorgon Group: Gorgon Group malware can download a remote access tool, ShiftyBug, and inject into another process.","[S0681] Lizar: Lizar can execute PE files in the address space of the specified process.","[S1138] Gootloader: Gootloader can use its own PE loader to execute payloads in memory.","[S0342] GreyEnergy: GreyEnergy has a module to inject a PE binary into a remote process.","[S1158] DUSTPAN: DUSTPAN can inject its decrypted payload into another process.","[S1145] Pikabot: Pikabot, following payload decryption, creates a process hard-coded into the dropped (e.g., WerFault.exe) and injects the decrypted core modules into it.","[S0330] Zeus Panda: Zeus Panda checks processes on the system and if they meet the necessary requirements, it injects into that process."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.003","technique_name":"Process Injection: Thread Execution Hijacking","description":"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point the process can be suspended then written to, realigned to the injected code, and resumed via SuspendThread , VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively. This is very similar to Process Hollowing but targets an existing process rather than creating a process in a suspended state. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1145] Pikabot: Pikabot can create a suspended instance of a legitimate process (e.g., ctfmon.exe), allocate memory within the suspended process corresponding to Pikabot's core module, then redirect execution flow via `SetContextThread` API so that when the thread resumes the Pikabot core module is executed.","[S0579] Waterbear: Waterbear can use thread injection to inject shellcode into the process of security software.","[S0168] Gazer: Gazer performs thread execution hijacking to inject its orchestrator into a running thread from a remote process.","[S0094] Trojan.Karagany: Trojan.Karagany can inject a suspended thread of its own process into a new process and initiate via the ResumeThread API."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.004","technique_name":"Process Injection: Asynchronous Procedure Call","description":"Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. APC injection is commonly performed by attaching malicious code to the APC Queue of a process's thread. Queued APC functions are executed when the thread enters an alterable state. A handle to an existing victim process is first created with native Windows API calls such as OpenThread. At this point QueueUserAPC can be used to invoke a function (such as LoadLibrayA pointing to a malicious DLL). A variation of APC injection, dubbed \"Early Bird injection\", involves creating a suspended process in which malicious code can be written and executed before the process' entry point (and potentially subsequent anti-malware hooks) via an APC. AtomBombing is another variation that utilizes APCs to invoke malicious code previously written to the global atom table. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S0199] TURNEDUP: TURNEDUP is capable of injecting code into the APC queue of a created Rundll32 process as part of an \"Early Bird injection.\"","[S0517] Pillowmint: Pillowmint has used the NtQueueApcThread syscall to inject code into svchost.exe.","[S0260] InvisiMole: InvisiMole can inject its code into a trusted process via the APC queue.","[S1039] Bumblebee: Bumblebee can use asynchronous procedure call (APC) injection to execute commands received from C2.","[S1018] Saint Bot: Saint Bot has written its payload into a newly-created `EhStorAuthn.exe` process using `ZwWriteVirtualMemory` and executed it using `NtQueueApcThread` and `ZwAlertResumeThread`.","[S0484] Carberp: Carberp has queued an APC routine to explorer.exe by calling ZwQueueApcThread.","[S0483] IcedID: IcedID has used ZwQueueApcThread to inject itself into remote processes.","[S1207] XLoader: XLoader injects code into the APC queue using `NtQueueApcThread` API.","[S1081] BADHATCH: BADHATCH can inject itself into a new `svchost.exe -k netsvcs` process using the asynchronous procedure call (APC) queue.","[G0061] FIN8: FIN8 has injected malicious code into a new svchost.exe process.","[S0438] Attor: Attor performs the injection by attaching its code into the APC queue using NtQueueApcThread API.","[S1085] Sardonic: Sardonic can use the `QueueUserAPC` API to execute shellcode on a compromised machine."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.005","technique_name":"Process Injection: Thread Local Storage","description":"Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other Process Injection techniques such as Process Hollowing. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S0386] Ursnif: Ursnif has injected code into target processes via thread local storage callbacks."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.008","technique_name":"Process Injection: Ptrace System Calls","description":"Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values. Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S1109] PACEMAKER: PACEMAKER can use PTRACE to attach to a targeted process to read process memory."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.009","technique_name":"Process Injection: Proc Memory","description":"Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. Proc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within /proc/[pid]/maps can be overwritten using dd. Other techniques such as Dynamic Linker Hijacking may be used to populate a target process with more available gadgets. Similar to Process Hollowing, proc memory injection may target child processes (such as a backgrounded copy of sleep). Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[C0035] KV Botnet Activity: KV Botnet Activity final payload installation includes mounting and binding to the \\/proc\\/ filepath on the victim system to enable subsequent operation in memory while also removing on-disk artifacts."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.011","technique_name":"Process Injection: Extra Window Memory Injection","description":"Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM. Execution granted through EWM injection may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong and SetWindowLong . Malware associated with this technique have also used SendNotifyMessage to trigger the associated window procedure and eventual malicious injection.","procedures":["[S0091] Epic: Epic has overwritten the function pointer in the extra window memory of Explorer's Shell_TrayWnd in order to execute malicious code in the context of the explorer.exe process.","[S0177] Power Loader: Power Loader overwrites Explorer’s Shell_TrayWnd extra window memory to redirect execution to a NTDLL function that is abused to assemble and execute a return-oriented programming (ROP) chain and create a malicious thread within Explorer.exe."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.012","technique_name":"Process Injection: Process Hollowing","description":"Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process. Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as CreateProcess, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as ZwUnmapViewOfSection or NtUnmapViewOfSection before being written to, realigned to the injected code, and resumed via VirtualAllocEx, WriteProcessMemory, SetThreadContext, then ResumeThread respectively. This is very similar to Thread Local Storage but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique. Processing hollowing commonly involves spawning an otherwise benign victim process. Consider correlating detections of processes created in a suspended state (ex: through API flags or process’ thread metadata) with other malicious activity such as attempts to modify a process' memory, especially by its parent process, or other abnormal process behavior. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[G0078] Gorgon Group: Gorgon Group malware can use process hollowing to inject one of its trojans into another process.","[S0483] IcedID: IcedID can inject a Cobalt Strike beacon into cmd.exe via process hallowing.","[S1207] XLoader: XLoader uses process hollowing by injecting itself into the `explorer.exe` process and other files ithin the Windows `SysWOW64` directory.","[G0027] Threat Group-3390: A Threat Group-3390 tool can spawn `svchost.exe` and inject the payload into that process.","[S0662] RCSession: RCSession can launch itself from a hollowed svchost.exe process.","[S0354] Denis: Denis performed process hollowing through the API calls CreateRemoteThread, ResumeThread, and Wow64SetThreadContext.","[S1065] Woody RAT: Woody RAT can create a suspended notepad process and write shellcode to delete a file into the suspended process using `NtWriteVirtualMemory`.","[S0344] Azorult: Azorult can decrypt the payload into memory, create a new suspended process of itself, then inject a decrypted payload to the new process and resume new process execution.","[G0040] Patchwork: A Patchwork payload uses process hollowing to hide the UAC bypass vulnerability exploitation inside svchost.exe.","[S0650] QakBot: QakBot can use process hollowing to execute its main payload.","[S0154] Cobalt Strike: Cobalt Strike can use process hollowing for execution.","[S0447] Lokibot: Lokibot has used process hollowing to inject itself into legitimate Windows process.","[S1086] Snip3: Snip3 can use RunPE to execute malicious payloads within a hollowed Windows process.","[S0234] Bandook: Bandook has been launched by starting iexplore.exe and replacing it with Bandook's payload.","[S1213] Lumma Stealer: Lumma Stealer has used process hollowing leveraging a legitimate program such as “BitLockerToGo.exe” to inject a malicious payload.","[G1043] BlackByte: BlackByte used process hollowing for defense evasion purposes.","[S1130] Raspberry Robin: Raspberry Robin will execute a legitimate process, then suspend it to inject code for a Tor client into the process, followed by resumption of the process to enable Tor client execution.","[S0226] Smoke Loader: Smoke Loader spawns a new copy of c:\\windows\\syswow64\\explorer.exe and then replaces the executable code in memory with malware.","[S0373] Astaroth: Astaroth can create a new process in a suspended state from a targeted legitimate process in order to unmap its memory and replace it with malicious code.","[S0567] Dtrack: Dtrack has used process hollowing shellcode to target a predefined list of processes from %SYSTEM32%.","[G1018] TA2541: TA2541 has used process hollowing to execute CyberGate malware.","[S0689] WhisperGate: WhisperGate has the ability to inject its fourth stage into a suspended process created by the legitimate Windows utility `InstallUtil.exe`.","[S0128] BADNEWS: BADNEWS has a command to download an .exe and use process hollowing to inject it into a new process.","[S0660] Clambling: Clambling can execute binaries through process hollowing.","[S1138] Gootloader: Gootloader can inject its Delphi executable into ImagingDevices.exe using a process hollowing technique.","[G0045] menuPass: menuPass has used process hollowing in iexplore.exe to load the RedLeaves implant.","[S0189] ISMInjector: ISMInjector hollows out a newly created process RegASM.exe and injects its payload into the hollowed process.","[S1018] Saint Bot: The Saint Bot loader has used API calls to spawn `MSBuild.exe` in a suspended state before injecting the decrypted Saint Bot binary into it.","[S0198] NETWIRE: The NETWIRE payload has been injected into benign Microsoft executables via process hollowing.","[S0367] Emotet: Emotet uses a copy of `certutil.exe` stored in a temporary directory for process hollowing, starting the program in a suspended state before loading malicious code.","[S0331] Agent Tesla: Agent Tesla has used process hollowing to create and manipulate processes through sections of unmapped memory by reallocating that space with its malicious code.","[S0229] Orz: Some Orz versions have an embedded DLL known as MockDll that uses process hollowing and Regsvr32 to execute another payload.","[S0266] TrickBot: TrickBot injects into the svchost.exe process.","[S0386] Ursnif: Ursnif has used process hollowing to inject into child processes.","[G0094] Kimsuky: Kimsuky has used a file injector DLL to spawn a benign process on the victim's system and inject the malicious payload into it via process hollowing.","[S0534] Bazar: Bazar can inject into a target process including Svchost, Explorer, and cmd using process hollowing.","[S0127] BBSRAT: BBSRAT has been seen loaded into msiexec.exe through process hollowing to hide its execution.","[S0038] Duqu: Duqu is capable of loading executable code via process hollowing.","[S1111] DarkGate: DarkGate leverages process hollowing techniques to evade detection, such as decrypting the content of an encrypted PE file and injecting it into the process vbc.exe."],"tactics":"TA0004 - Privilege Escalation"}
{"technique_id":"T1055.013","technique_name":"Process Injection: Process Doppelgänging","description":"Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. Adversaries may abuse TxF to a perform a file-less variation of Process Injection. Similar to Process Hollowing, process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. Process Doppelgänging is implemented in 4 steps : * Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction. * Load – Create a shared section of memory and load the malicious executable. * Rollback – Undo changes to original executable, effectively removing malicious code from the file system. * Animate – Create a process from the tainted section of memory and initiate execution. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.","detection":"Monitor and analyze calls to CreateTransaction, CreateFileTransacted, RollbackTransaction, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to NtCreateProcessEx and NtCreateThreadEx as well as API calls used to modify memory within another process, such as WriteProcessMemory. Scan file objects reported during the PsSetCreateProcessNotifyRoutine, which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. Also consider comparing file objects loaded in memory to the corresponding file on disk. Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.","procedures":["[S0242] SynAck: SynAck abuses NTFS transactions to launch and conceal malicious processes.","[S0534] Bazar: Bazar can inject into a target process using process doppelgänging.","[G0077] Leafminer: Leafminer has used Process Doppelgänging to evade security software while deploying tools on compromised systems."],"tactics":"TA0004 - Privilege Escalation"}